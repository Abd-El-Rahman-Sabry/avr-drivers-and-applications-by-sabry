
Hope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000c26  00000cba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800098  00800098  00000cf2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e83  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd3  00000000  00000000  00003f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aad  00000000  00000000  00004f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009bc  00000000  00000000  000069fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019b0  00000000  00000000  000073b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f1e  00000000  00000000  00008d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  0000ac86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_1>
   8:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__vector_2>
   c:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__vector_6>
  1c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_7>
  20:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__vector_8>
  24:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__vector_9>
  28:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3b       	cpi	r26, 0xB9	; 185
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e5 03 	call	0x7ca	; 0x7ca <main>
  8a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <detect_row>:
						'c' , '0' , '=' , '+'

};

static uint8 detect_row(Keypad *keypad , uint8 col)
{
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	ec 01       	movw	r28, r24
  9a:	16 2f       	mov	r17, r22
	uint8 code ,mask;
	GPIO_init_port(keypad->port , 0xf0);
  9c:	60 ef       	ldi	r22, 0xF0	; 240
  9e:	8c 81       	ldd	r24, Y+4	; 0x04
  a0:	0e 94 4e 04 	call	0x89c	; 0x89c <GPIO_init_port>
	GPIO_write_port(keypad->port , 0x0f);
  a4:	6f e0       	ldi	r22, 0x0F	; 15
  a6:	8c 81       	ldd	r24, Y+4	; 0x04
  a8:	0e 94 81 04 	call	0x902	; 0x902 <GPIO_write_port>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	00 c0       	rjmp	.+0      	; 0xae <detect_row+0x1c>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <detect_row+0x1e>
  b0:	00 00       	nop
	_delay_us(5);
	mask = (~(1<<(col)))&0xf0;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <detect_row+0x2a>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	1a 95       	dec	r17
  be:	e2 f7       	brpl	.-8      	; 0xb8 <detect_row+0x26>
  c0:	80 95       	com	r24
  c2:	18 2f       	mov	r17, r24
  c4:	10 7f       	andi	r17, 0xF0	; 240
	GPIO_port_set_mask(keypad->port , mask) ;
  c6:	61 2f       	mov	r22, r17
  c8:	8c 81       	ldd	r24, Y+4	; 0x04
  ca:	0e 94 8e 04 	call	0x91c	; 0x91c <GPIO_port_set_mask>
	code = GPIO_read_port(keypad->port)&0x0f;
  ce:	8c 81       	ldd	r24, Y+4	; 0x04
  d0:	0e 94 9d 04 	call	0x93a	; 0x93a <GPIO_read_port>
  d4:	8f 70       	andi	r24, 0x0F	; 15
	if(code != 0x0f)
  d6:	8f 30       	cpi	r24, 0x0F	; 15
  d8:	11 f0       	breq	.+4      	; 0xde <detect_row+0x4c>
	{
		return mask|code;
  da:	81 2b       	or	r24, r17
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <detect_row+0x4e>
	}

	return 0xff;
  de:	8f ef       	ldi	r24, 0xFF	; 255
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	1f 91       	pop	r17
  e6:	08 95       	ret

000000e8 <Keypad_listen>:
				
uint8 Keypad_listen(Keypad *keypad){
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	8c 01       	movw	r16, r24
	uint8 key = 0xff;
	uint8 code = 'E';
	
	//Detect Key
	for(uint8 col = 4 ; col < 8 ; col++)
  f2:	d4 e0       	ldi	r29, 0x04	; 4

	return 0xff;
}
				
uint8 Keypad_listen(Keypad *keypad){
	uint8 key = 0xff;
  f4:	cf ef       	ldi	r28, 0xFF	; 255
	uint8 code = 'E';
	
	//Detect Key
	for(uint8 col = 4 ; col < 8 ; col++)
  f6:	09 c0       	rjmp	.+18     	; 0x10a <Keypad_listen+0x22>
	{
		uint8 val = detect_row(keypad , col); 
  f8:	6d 2f       	mov	r22, r29
  fa:	c8 01       	movw	r24, r16
  fc:	0e 94 49 00 	call	0x92	; 0x92 <detect_row>
		if(  val != 0xff)
 100:	8f 3f       	cpi	r24, 0xFF	; 255
 102:	09 f4       	brne	.+2      	; 0x106 <Keypad_listen+0x1e>
 104:	8c 2f       	mov	r24, r28
uint8 Keypad_listen(Keypad *keypad){
	uint8 key = 0xff;
	uint8 code = 'E';
	
	//Detect Key
	for(uint8 col = 4 ; col < 8 ; col++)
 106:	df 5f       	subi	r29, 0xFF	; 255
 108:	c8 2f       	mov	r28, r24
 10a:	d8 30       	cpi	r29, 0x08	; 8
 10c:	a8 f3       	brcs	.-22     	; 0xf8 <Keypad_listen+0x10>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e c0       	rjmp	.+28     	; 0x12e <Keypad_listen+0x46>
	}

		
		for(uint8 i = 0 ; i <16 ; i++)
		{
			if(key == key_codes[i])
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	f9 01       	movw	r30, r18
 118:	e8 57       	subi	r30, 0x78	; 120
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	90 81       	ld	r25, Z
 11e:	c9 13       	cpse	r28, r25
 120:	05 c0       	rjmp	.+10     	; 0x12c <Keypad_listen+0x44>
				{code = keys[i];break;}
 122:	f9 01       	movw	r30, r18
 124:	e8 58       	subi	r30, 0x88	; 136
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	80 81       	ld	r24, Z
 12a:	04 c0       	rjmp	.+8      	; 0x134 <Keypad_listen+0x4c>
			key = val;
		}
	}

		
		for(uint8 i = 0 ; i <16 ; i++)
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	80 31       	cpi	r24, 0x10	; 16
 130:	80 f3       	brcs	.-32     	; 0x112 <Keypad_listen+0x2a>
	return 0xff;
}
				
uint8 Keypad_listen(Keypad *keypad){
	uint8 key = 0xff;
	uint8 code = 'E';
 132:	85 e4       	ldi	r24, 0x45	; 69
		for(uint8 i = 0 ; i <16 ; i++)
		{
			if(key == key_codes[i])
				{code = keys[i];break;}
		}
	switch(keypad->current_state)
 134:	d8 01       	movw	r26, r16
 136:	13 96       	adiw	r26, 0x03	; 3
 138:	9c 91       	ld	r25, X
 13a:	91 30       	cpi	r25, 0x01	; 1
 13c:	61 f0       	breq	.+24     	; 0x156 <Keypad_listen+0x6e>
 13e:	28 f0       	brcs	.+10     	; 0x14a <Keypad_listen+0x62>
 140:	92 30       	cpi	r25, 0x02	; 2
 142:	e1 f0       	breq	.+56     	; 0x17c <Keypad_listen+0x94>
 144:	93 30       	cpi	r25, 0x03	; 3
 146:	89 f1       	breq	.+98     	; 0x1aa <Keypad_listen+0xc2>
 148:	40 c0       	rjmp	.+128    	; 0x1ca <Keypad_listen+0xe2>
	{
		
		case NOT_PRESSED:
			if(key != 0xff)
 14a:	cf 3f       	cpi	r28, 0xFF	; 255
 14c:	f1 f1       	breq	.+124    	; 0x1ca <Keypad_listen+0xe2>
			{
				keypad->current_state = MAYBE_PRESSED;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	f8 01       	movw	r30, r16
 152:	83 83       	std	Z+3, r24	; 0x03
 154:	3a c0       	rjmp	.+116    	; 0x1ca <Keypad_listen+0xe2>
			}
		break;
		
		case MAYBE_PRESSED:
				if(key != 0xff)
 156:	cf 3f       	cpi	r28, 0xFF	; 255
 158:	71 f0       	breq	.+28     	; 0x176 <Keypad_listen+0x8e>
				{
					keypad->current_state = NOT_RELEASED;
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	d8 01       	movw	r26, r16
 15e:	13 96       	adiw	r26, 0x03	; 3
 160:	9c 93       	st	X, r25
 162:	13 97       	sbiw	r26, 0x03	; 3
					if(keypad->evt == ON_KEY_DOWN)
 164:	9c 91       	ld	r25, X
 166:	91 11       	cpse	r25, r1
 168:	30 c0       	rjmp	.+96     	; 0x1ca <Keypad_listen+0xe2>
							keypad->callback(code);
 16a:	11 96       	adiw	r26, 0x01	; 1
 16c:	ed 91       	ld	r30, X+
 16e:	fc 91       	ld	r31, X
 170:	12 97       	sbiw	r26, 0x02	; 2
 172:	09 95       	icall
 174:	2a c0       	rjmp	.+84     	; 0x1ca <Keypad_listen+0xe2>
					
				}
				else
					keypad->current_state = NOT_PRESSED;
 176:	f8 01       	movw	r30, r16
 178:	13 82       	std	Z+3, r1	; 0x03
 17a:	27 c0       	rjmp	.+78     	; 0x1ca <Keypad_listen+0xe2>
		break;
			
		case NOT_RELEASED:
				if(key != 0xff)
 17c:	cf 3f       	cpi	r28, 0xFF	; 255
 17e:	81 f0       	breq	.+32     	; 0x1a0 <Keypad_listen+0xb8>
				{
					if(keypad->evt == ON_KEY_PRESSED)
 180:	d8 01       	movw	r26, r16
 182:	9c 91       	ld	r25, X
 184:	91 30       	cpi	r25, 0x01	; 1
 186:	09 f5       	brne	.+66     	; 0x1ca <Keypad_listen+0xe2>
							{
								keypad->callback(code);
 188:	11 96       	adiw	r26, 0x01	; 1
 18a:	ed 91       	ld	r30, X+
 18c:	fc 91       	ld	r31, X
 18e:	12 97       	sbiw	r26, 0x02	; 2
 190:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	e3 e2       	ldi	r30, 0x23	; 35
 194:	f4 ef       	ldi	r31, 0xF4	; 244
 196:	31 97       	sbiw	r30, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <Keypad_listen+0xae>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <Keypad_listen+0xb4>
 19c:	00 00       	nop
 19e:	15 c0       	rjmp	.+42     	; 0x1ca <Keypad_listen+0xe2>
								_delay_ms(COOL_DOWN_MS);
							}
						
				}
				else 
					keypad->current_state = MAYBE_RELEASED;
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	d8 01       	movw	r26, r16
 1a4:	13 96       	adiw	r26, 0x03	; 3
 1a6:	8c 93       	st	X, r24
 1a8:	10 c0       	rjmp	.+32     	; 0x1ca <Keypad_listen+0xe2>
		break;
		
		case MAYBE_RELEASED:
				if(key != 0xff)
 1aa:	cf 3f       	cpi	r28, 0xFF	; 255
 1ac:	51 f0       	breq	.+20     	; 0x1c2 <Keypad_listen+0xda>
				{
					keypad->current_state = NOT_PRESSED;
 1ae:	f8 01       	movw	r30, r16
 1b0:	13 82       	std	Z+3, r1	; 0x03
					if(keypad->evt == ON_KEY_UP)
 1b2:	90 81       	ld	r25, Z
 1b4:	92 30       	cpi	r25, 0x02	; 2
 1b6:	49 f4       	brne	.+18     	; 0x1ca <Keypad_listen+0xe2>
							keypad->callback(code);
 1b8:	01 80       	ldd	r0, Z+1	; 0x01
 1ba:	f2 81       	ldd	r31, Z+2	; 0x02
 1bc:	e0 2d       	mov	r30, r0
 1be:	09 95       	icall
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <Keypad_listen+0xe2>
						
				}
				else 
					keypad->current_state = NOT_RELEASED;
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	d8 01       	movw	r26, r16
 1c6:	13 96       	adiw	r26, 0x03	; 3
 1c8:	8c 93       	st	X, r24
		break;
	}
	
	
	for(uint8 i = 0 ; i <16 ; i++)
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e c0       	rjmp	.+28     	; 0x1ea <Keypad_listen+0x102>
	{
		if(key == key_codes[i])
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	f9 01       	movw	r30, r18
 1d4:	e8 57       	subi	r30, 0x78	; 120
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	90 81       	ld	r25, Z
 1da:	c9 13       	cpse	r28, r25
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <Keypad_listen+0x100>
			return keys[i];
 1de:	f9 01       	movw	r30, r18
 1e0:	e8 58       	subi	r30, 0x88	; 136
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	80 81       	ld	r24, Z
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <Keypad_listen+0x108>
					keypad->current_state = NOT_RELEASED;
		break;
	}
	
	
	for(uint8 i = 0 ; i <16 ; i++)
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	80 31       	cpi	r24, 0x10	; 16
 1ec:	80 f3       	brcs	.-32     	; 0x1ce <Keypad_listen+0xe6>
	{
		if(key == key_codes[i])
			return keys[i];
	}
	return 'Z';
 1ee:	8a e5       	ldi	r24, 0x5A	; 90
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	08 95       	ret

000001fa <Keypad_config>:

void Keypad_config(Keypad *keypad , GPIO_port_name_t port ,Button_event evnt, void (*callback)(uint8))
{
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
 208:	e6 2e       	mov	r14, r22
 20a:	f4 2e       	mov	r15, r20
 20c:	89 01       	movw	r16, r18
	GPIO_init_port(keypad->port , 0xf0);
 20e:	60 ef       	ldi	r22, 0xF0	; 240
 210:	8c 81       	ldd	r24, Y+4	; 0x04
 212:	0e 94 4e 04 	call	0x89c	; 0x89c <GPIO_init_port>
	GPIO_write_port(keypad->port , 0x0f);
 216:	6f e0       	ldi	r22, 0x0F	; 15
 218:	8c 81       	ldd	r24, Y+4	; 0x04
 21a:	0e 94 81 04 	call	0x902	; 0x902 <GPIO_write_port>
	keypad->port = port;
 21e:	ec 82       	std	Y+4, r14	; 0x04
	keypad->current_state = NOT_PRESSED;
 220:	1b 82       	std	Y+3, r1	; 0x03
	keypad->evt =  evnt;
 222:	f8 82       	st	Y, r15
	keypad->callback = callback;
 224:	1a 83       	std	Y+2, r17	; 0x02
 226:	09 83       	std	Y+1, r16	; 0x01
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	08 95       	ret

00000236 <lcd_write_data>:
	uint8 c = 0;
	while ( str[c] )
	{
		LCD_write_char(str[c++]);
	}
}
 236:	cf 93       	push	r28
 238:	c8 2f       	mov	r28, r24
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	65 e0       	ldi	r22, 0x05	; 5
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	64 e0       	ldi	r22, 0x04	; 4
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 24e:	4c 2f       	mov	r20, r28
 250:	40 71       	andi	r20, 0x10	; 16
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	55 95       	asr	r21
 256:	47 95       	ror	r20
 258:	55 95       	asr	r21
 25a:	47 95       	ror	r20
 25c:	55 95       	asr	r21
 25e:	47 95       	ror	r20
 260:	55 95       	asr	r21
 262:	47 95       	ror	r20
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 26c:	4c 2f       	mov	r20, r28
 26e:	40 72       	andi	r20, 0x20	; 32
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	55 95       	asr	r21
 274:	47 95       	ror	r20
 276:	55 95       	asr	r21
 278:	47 95       	ror	r20
 27a:	55 95       	asr	r21
 27c:	47 95       	ror	r20
 27e:	55 95       	asr	r21
 280:	47 95       	ror	r20
 282:	55 95       	asr	r21
 284:	47 95       	ror	r20
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 28e:	4c 2f       	mov	r20, r28
 290:	40 74       	andi	r20, 0x40	; 64
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	04 2e       	mov	r0, r20
 296:	45 2f       	mov	r20, r21
 298:	00 0c       	add	r0, r0
 29a:	44 1f       	adc	r20, r20
 29c:	55 0b       	sbc	r21, r21
 29e:	00 0c       	add	r0, r0
 2a0:	44 1f       	adc	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 2ac:	4c 2f       	mov	r20, r28
 2ae:	44 1f       	adc	r20, r20
 2b0:	44 27       	eor	r20, r20
 2b2:	44 1f       	adc	r20, r20
 2b4:	63 e0       	ldi	r22, 0x03	; 3
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	66 e0       	ldi	r22, 0x06	; 6
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 2c6:	83 ef       	ldi	r24, 0xF3	; 243
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_write_data+0x94>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <lcd_write_data+0x9a>
 2d0:	00 00       	nop
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	66 e0       	ldi	r22, 0x06	; 6
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 2dc:	83 ef       	ldi	r24, 0xF3	; 243
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_write_data+0xaa>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <lcd_write_data+0xb0>
 2e6:	00 00       	nop
 2e8:	4c 2f       	mov	r20, r28
 2ea:	41 70       	andi	r20, 0x01	; 1
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 2f4:	4c 2f       	mov	r20, r28
 2f6:	42 70       	andi	r20, 0x02	; 2
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	55 95       	asr	r21
 2fc:	47 95       	ror	r20
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 306:	4c 2f       	mov	r20, r28
 308:	44 70       	andi	r20, 0x04	; 4
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	55 95       	asr	r21
 30e:	47 95       	ror	r20
 310:	55 95       	asr	r21
 312:	47 95       	ror	r20
 314:	62 e0       	ldi	r22, 0x02	; 2
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 31c:	c8 70       	andi	r28, 0x08	; 8
 31e:	4c 2f       	mov	r20, r28
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	55 95       	asr	r21
 324:	47 95       	ror	r20
 326:	55 95       	asr	r21
 328:	47 95       	ror	r20
 32a:	55 95       	asr	r21
 32c:	47 95       	ror	r20
 32e:	63 e0       	ldi	r22, 0x03	; 3
 330:	82 e0       	ldi	r24, 0x02	; 2
 332:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	66 e0       	ldi	r22, 0x06	; 6
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 340:	83 ef       	ldi	r24, 0xF3	; 243
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <lcd_write_data+0x10e>
 348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_write_data+0x114>
 34a:	00 00       	nop
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	66 e0       	ldi	r22, 0x06	; 6
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 356:	83 ef       	ldi	r24, 0xF3	; 243
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <lcd_write_data+0x124>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <lcd_write_data+0x12a>
 360:	00 00       	nop
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <lcd_write_command>:
 366:	cf 93       	push	r28
 368:	c8 2f       	mov	r28, r24
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	65 e0       	ldi	r22, 0x05	; 5
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	64 e0       	ldi	r22, 0x04	; 4
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 37e:	4c 2f       	mov	r20, r28
 380:	40 71       	andi	r20, 0x10	; 16
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	55 95       	asr	r21
 386:	47 95       	ror	r20
 388:	55 95       	asr	r21
 38a:	47 95       	ror	r20
 38c:	55 95       	asr	r21
 38e:	47 95       	ror	r20
 390:	55 95       	asr	r21
 392:	47 95       	ror	r20
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 39c:	4c 2f       	mov	r20, r28
 39e:	40 72       	andi	r20, 0x20	; 32
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	55 95       	asr	r21
 3a4:	47 95       	ror	r20
 3a6:	55 95       	asr	r21
 3a8:	47 95       	ror	r20
 3aa:	55 95       	asr	r21
 3ac:	47 95       	ror	r20
 3ae:	55 95       	asr	r21
 3b0:	47 95       	ror	r20
 3b2:	55 95       	asr	r21
 3b4:	47 95       	ror	r20
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 3be:	4c 2f       	mov	r20, r28
 3c0:	40 74       	andi	r20, 0x40	; 64
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	04 2e       	mov	r0, r20
 3c6:	45 2f       	mov	r20, r21
 3c8:	00 0c       	add	r0, r0
 3ca:	44 1f       	adc	r20, r20
 3cc:	55 0b       	sbc	r21, r21
 3ce:	00 0c       	add	r0, r0
 3d0:	44 1f       	adc	r20, r20
 3d2:	55 1f       	adc	r21, r21
 3d4:	62 e0       	ldi	r22, 0x02	; 2
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 3dc:	4c 2f       	mov	r20, r28
 3de:	44 1f       	adc	r20, r20
 3e0:	44 27       	eor	r20, r20
 3e2:	44 1f       	adc	r20, r20
 3e4:	63 e0       	ldi	r22, 0x03	; 3
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	66 e0       	ldi	r22, 0x06	; 6
 3f0:	82 e0       	ldi	r24, 0x02	; 2
 3f2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 3f6:	83 ef       	ldi	r24, 0xF3	; 243
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_write_command+0x94>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	66 e0       	ldi	r22, 0x06	; 6
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 40c:	83 ef       	ldi	r24, 0xF3	; 243
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	4c 2f       	mov	r20, r28
 41a:	41 70       	andi	r20, 0x01	; 1
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 424:	4c 2f       	mov	r20, r28
 426:	42 70       	andi	r20, 0x02	; 2
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	55 95       	asr	r21
 42c:	47 95       	ror	r20
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 436:	4c 2f       	mov	r20, r28
 438:	44 70       	andi	r20, 0x04	; 4
 43a:	50 e0       	ldi	r21, 0x00	; 0
 43c:	55 95       	asr	r21
 43e:	47 95       	ror	r20
 440:	55 95       	asr	r21
 442:	47 95       	ror	r20
 444:	62 e0       	ldi	r22, 0x02	; 2
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 44c:	c8 70       	andi	r28, 0x08	; 8
 44e:	4c 2f       	mov	r20, r28
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	55 95       	asr	r21
 454:	47 95       	ror	r20
 456:	55 95       	asr	r21
 458:	47 95       	ror	r20
 45a:	55 95       	asr	r21
 45c:	47 95       	ror	r20
 45e:	63 e0       	ldi	r22, 0x03	; 3
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	66 e0       	ldi	r22, 0x06	; 6
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 470:	83 ef       	ldi	r24, 0xF3	; 243
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 47a:	00 00       	nop
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	66 e0       	ldi	r22, 0x06	; 6
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GPIO_write_pin>
 486:	83 ef       	ldi	r24, 0xF3	; 243
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 490:	00 00       	nop
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <LCD_Init>:
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	64 e0       	ldi	r22, 0x04	; 4
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_init_pin>
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	66 e0       	ldi	r22, 0x06	; 6
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_init_pin>
 4aa:	41 e0       	ldi	r20, 0x01	; 1
 4ac:	65 e0       	ldi	r22, 0x05	; 5
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_init_pin>
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_init_pin>
 4be:	41 e0       	ldi	r20, 0x01	; 1
 4c0:	61 e0       	ldi	r22, 0x01	; 1
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_init_pin>
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	62 e0       	ldi	r22, 0x02	; 2
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_init_pin>
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	63 e0       	ldi	r22, 0x03	; 3
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	0e 94 24 04 	call	0x848	; 0x848 <GPIO_init_pin>
 4dc:	85 ea       	ldi	r24, 0xA5	; 165
 4de:	9e e0       	ldi	r25, 0x0E	; 14
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <LCD_Init+0x4a>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <LCD_Init+0x50>
 4e6:	00 00       	nop
 4e8:	83 e3       	ldi	r24, 0x33	; 51
 4ea:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_command>
 4ee:	91 e2       	ldi	r25, 0x21	; 33
 4f0:	9a 95       	dec	r25
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <LCD_Init+0x5a>
 4f4:	00 00       	nop
 4f6:	82 e3       	ldi	r24, 0x32	; 50
 4f8:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_command>
 4fc:	81 e2       	ldi	r24, 0x21	; 33
 4fe:	8a 95       	dec	r24
 500:	f1 f7       	brne	.-4      	; 0x4fe <LCD_Init+0x68>
 502:	00 00       	nop
 504:	88 e2       	ldi	r24, 0x28	; 40
 506:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_command>
 50a:	91 e2       	ldi	r25, 0x21	; 33
 50c:	9a 95       	dec	r25
 50e:	f1 f7       	brne	.-4      	; 0x50c <LCD_Init+0x76>
 510:	00 00       	nop
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_command>
 518:	83 ef       	ldi	r24, 0xF3	; 243
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <LCD_Init+0x86>
 520:	00 c0       	rjmp	.+0      	; 0x522 <LCD_Init+0x8c>
 522:	00 00       	nop
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_command>
 52a:	83 ef       	ldi	r24, 0xF3	; 243
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <LCD_Init+0x98>
 532:	00 c0       	rjmp	.+0      	; 0x534 <LCD_Init+0x9e>
 534:	00 00       	nop
 536:	8c e0       	ldi	r24, 0x0C	; 12
 538:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_command>
 53c:	91 e2       	ldi	r25, 0x21	; 33
 53e:	9a 95       	dec	r25
 540:	f1 f7       	brne	.-4      	; 0x53e <LCD_Init+0xa8>
 542:	00 00       	nop
 544:	08 95       	ret

00000546 <LCD_write_char>:
 546:	18 16       	cp	r1, r24
 548:	14 f4       	brge	.+4      	; 0x54e <LCD_write_char+0x8>
 54a:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_write_data>
 54e:	08 95       	ret

00000550 <LCD_clear>:
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_command>
 556:	83 ef       	ldi	r24, 0xF3	; 243
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <LCD_clear+0xa>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <LCD_clear+0x10>
 560:	00 00       	nop
 562:	08 95       	ret

00000564 <LCD_go_to>:

void LCD_go_to(uint8 row , uint8 col)
{
	if(row == 1)
 564:	81 30       	cpi	r24, 0x01	; 1
 566:	39 f4       	brne	.+14     	; 0x576 <LCD_go_to+0x12>
	{
		if(col < MAX_COL)
 568:	60 31       	cpi	r22, 0x10	; 16
 56a:	68 f4       	brcc	.+26     	; 0x586 <LCD_go_to+0x22>
		{
			lcd_write_command((0x80+col));
 56c:	80 e8       	ldi	r24, 0x80	; 128
 56e:	86 0f       	add	r24, r22
 570:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_command>
 574:	08 95       	ret
		}
	}
	else if(row == 2)
 576:	82 30       	cpi	r24, 0x02	; 2
 578:	31 f4       	brne	.+12     	; 0x586 <LCD_go_to+0x22>
	{
		if(col < MAX_COL)
 57a:	60 31       	cpi	r22, 0x10	; 16
 57c:	20 f4       	brcc	.+8      	; 0x586 <LCD_go_to+0x22>
		{
			lcd_write_command((0xC0+col));
 57e:	80 ec       	ldi	r24, 0xC0	; 192
 580:	86 0f       	add	r24, r22
 582:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_write_command>
 586:	08 95       	ret

00000588 <LCD_write_number>:
		}
	}
}
void LCD_write_number(uint32 n)
{
 588:	1f 93       	push	r17
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	2a 97       	sbiw	r28, 0x0a	; 10
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	de bf       	out	0x3e, r29	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	cd bf       	out	0x3d, r28	; 61
 59e:	ac 01       	movw	r20, r24
	uint8 i = 0 , j , digits[10];
	if(n == 0)
 5a0:	89 2b       	or	r24, r25
 5a2:	91 f5       	brne	.+100    	; 0x608 <LCD_write_number+0x80>
		lcd_write_data('0');
 5a4:	80 e3       	ldi	r24, 0x30	; 48
 5a6:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_write_data>
 5aa:	42 c0       	rjmp	.+132    	; 0x630 <LCD_write_number+0xa8>
	else {
		while(n)
		{
			digits[i] = (uint8)(n%10 + '0');
 5ac:	9a 01       	movw	r18, r20
 5ae:	ad ec       	ldi	r26, 0xCD	; 205
 5b0:	bc ec       	ldi	r27, 0xCC	; 204
 5b2:	0e 94 02 06 	call	0xc04	; 0xc04 <__umulhisi3>
 5b6:	96 95       	lsr	r25
 5b8:	87 95       	ror	r24
 5ba:	96 95       	lsr	r25
 5bc:	87 95       	ror	r24
 5be:	96 95       	lsr	r25
 5c0:	87 95       	ror	r24
 5c2:	9c 01       	movw	r18, r24
 5c4:	22 0f       	add	r18, r18
 5c6:	33 1f       	adc	r19, r19
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	82 0f       	add	r24, r18
 5d6:	93 1f       	adc	r25, r19
 5d8:	9a 01       	movw	r18, r20
 5da:	28 1b       	sub	r18, r24
 5dc:	39 0b       	sbc	r19, r25
 5de:	c9 01       	movw	r24, r18
 5e0:	80 5d       	subi	r24, 0xD0	; 208
 5e2:	e1 e0       	ldi	r30, 0x01	; 1
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	ec 0f       	add	r30, r28
 5e8:	fd 1f       	adc	r31, r29
 5ea:	e1 0f       	add	r30, r17
 5ec:	f1 1d       	adc	r31, r1
 5ee:	80 83       	st	Z, r24
			n = n / 10;
 5f0:	9a 01       	movw	r18, r20
 5f2:	0e 94 02 06 	call	0xc04	; 0xc04 <__umulhisi3>
 5f6:	ac 01       	movw	r20, r24
 5f8:	56 95       	lsr	r21
 5fa:	47 95       	ror	r20
 5fc:	56 95       	lsr	r21
 5fe:	47 95       	ror	r20
 600:	56 95       	lsr	r21
 602:	47 95       	ror	r20
			i++;
 604:	1f 5f       	subi	r17, 0xFF	; 255
 606:	01 c0       	rjmp	.+2      	; 0x60a <LCD_write_number+0x82>
 608:	10 e0       	ldi	r17, 0x00	; 0
{
	uint8 i = 0 , j , digits[10];
	if(n == 0)
		lcd_write_data('0');
	else {
		while(n)
 60a:	41 15       	cp	r20, r1
 60c:	51 05       	cpc	r21, r1
 60e:	71 f6       	brne	.-100    	; 0x5ac <LCD_write_number+0x24>
 610:	0d c0       	rjmp	.+26     	; 0x62c <LCD_write_number+0xa4>
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
		{
			lcd_write_data(digits[j-1]);
 612:	e1 2f       	mov	r30, r17
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	31 97       	sbiw	r30, 0x01	; 1
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	8c 0f       	add	r24, r28
 61e:	9d 1f       	adc	r25, r29
 620:	e8 0f       	add	r30, r24
 622:	f9 1f       	adc	r31, r25
 624:	80 81       	ld	r24, Z
 626:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_write_data>
		{
			digits[i] = (uint8)(n%10 + '0');
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
 62a:	11 50       	subi	r17, 0x01	; 1
 62c:	11 11       	cpse	r17, r1
 62e:	f1 cf       	rjmp	.-30     	; 0x612 <LCD_write_number+0x8a>
		{
			lcd_write_data(digits[j-1]);
		}
	}
}
 630:	2a 96       	adiw	r28, 0x0a	; 10
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	de bf       	out	0x3e, r29	; 62
 638:	0f be       	out	0x3f, r0	; 63
 63a:	cd bf       	out	0x3d, r28	; 61
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	08 95       	ret

00000644 <keypad_callback>:

uint8 op1[5] , sign , op2[5];
uint8 i = 0, j = 0 ;
uint8 next_flag = 0;
void keypad_callback(uint8 key)
{
 644:	1f 93       	push	r17
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	18 2f       	mov	r17, r24
	static uint8 pos  = 0;
	if(key == 'c')
 64c:	83 36       	cpi	r24, 0x63	; 99
 64e:	49 f4       	brne	.+18     	; 0x662 <keypad_callback+0x1e>
	{
		LCD_clear();
 650:	0e 94 a8 02 	call	0x550	; 0x550 <LCD_clear>
		pos = 0;
 654:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__data_end>
		i = 0;
 658:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <i>
		j = 0;
 65c:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <j>
 660:	b0 c0       	rjmp	.+352    	; 0x7c2 <keypad_callback+0x17e>
	}
	else
	{
		if(next_flag)
 662:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <next_flag>
 666:	88 23       	and	r24, r24
 668:	21 f0       	breq	.+8      	; 0x672 <keypad_callback+0x2e>
		{
			LCD_clear();
 66a:	0e 94 a8 02 	call	0x550	; 0x550 <LCD_clear>
			next_flag = 0;
 66e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <next_flag>
		}
		LCD_write_char(key);
 672:	81 2f       	mov	r24, r17
 674:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_write_char>
		if(key >= '0' && key <= '9' && pos == 0 )
 678:	80 ed       	ldi	r24, 0xD0	; 208
 67a:	81 0f       	add	r24, r17
 67c:	8a 30       	cpi	r24, 0x0A	; 10
 67e:	78 f4       	brcc	.+30     	; 0x69e <keypad_callback+0x5a>
 680:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <__data_end>
 684:	91 11       	cpse	r25, r1
 686:	0b c0       	rjmp	.+22     	; 0x69e <keypad_callback+0x5a>
		{

			op1[i] = key -'0';
 688:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <i>
 68c:	e9 2f       	mov	r30, r25
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	ec 54       	subi	r30, 0x4C	; 76
 692:	ff 4f       	sbci	r31, 0xFF	; 255
 694:	80 83       	st	Z, r24
			i++;
 696:	9f 5f       	subi	r25, 0xFF	; 255
 698:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <i>
 69c:	1c c0       	rjmp	.+56     	; 0x6d6 <keypad_callback+0x92>
		}
		else if(key <= '/' && key>= '+' || key == 'X')
 69e:	95 ed       	ldi	r25, 0xD5	; 213
 6a0:	91 0f       	add	r25, r17
 6a2:	95 30       	cpi	r25, 0x05	; 5
 6a4:	10 f0       	brcs	.+4      	; 0x6aa <keypad_callback+0x66>
 6a6:	18 35       	cpi	r17, 0x58	; 88
 6a8:	31 f4       	brne	.+12     	; 0x6b6 <keypad_callback+0x72>
		{
			sign = key;
 6aa:	10 93 ae 00 	sts	0x00AE, r17	; 0x8000ae <sign>
			pos = 2;
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__data_end>
 6b4:	10 c0       	rjmp	.+32     	; 0x6d6 <keypad_callback+0x92>
		}
		else if(key >= '0' && key <= '9' && pos == 2)
 6b6:	8a 30       	cpi	r24, 0x0A	; 10
 6b8:	70 f4       	brcc	.+28     	; 0x6d6 <keypad_callback+0x92>
 6ba:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <__data_end>
 6be:	92 30       	cpi	r25, 0x02	; 2
 6c0:	51 f4       	brne	.+20     	; 0x6d6 <keypad_callback+0x92>
		{
			op2[j] = key - '0';
 6c2:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <j>
 6c6:	e9 2f       	mov	r30, r25
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	e1 55       	subi	r30, 0x51	; 81
 6cc:	ff 4f       	sbci	r31, 0xFF	; 255
 6ce:	80 83       	st	Z, r24
			j++;
 6d0:	9f 5f       	subi	r25, 0xFF	; 255
 6d2:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <j>
		}
		 
		 if(key == '=' )
 6d6:	1d 33       	cpi	r17, 0x3D	; 61
 6d8:	09 f0       	breq	.+2      	; 0x6dc <keypad_callback+0x98>
 6da:	73 c0       	rjmp	.+230    	; 0x7c2 <keypad_callback+0x17e>
		{
			uint16 o1 = 0 , o2 = 0 , s = 1;
			
			for(uint8 x = i ; x > 0 ; x--)
 6dc:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <i>
			j++;
		}
		 
		 if(key == '=' )
		{
			uint16 o1 = 0 , o2 = 0 , s = 1;
 6e0:	21 e0       	ldi	r18, 0x01	; 1
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	50 e0       	ldi	r21, 0x00	; 0
			
			for(uint8 x = i ; x > 0 ; x--)
 6e8:	18 c0       	rjmp	.+48     	; 0x71a <keypad_callback+0xd6>
			{
				o1 += op1[x-1]*s;
 6ea:	e9 2f       	mov	r30, r25
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	ed 54       	subi	r30, 0x4D	; 77
 6f0:	ff 4f       	sbci	r31, 0xFF	; 255
 6f2:	80 81       	ld	r24, Z
 6f4:	82 9f       	mul	r24, r18
 6f6:	b0 01       	movw	r22, r0
 6f8:	83 9f       	mul	r24, r19
 6fa:	70 0d       	add	r23, r0
 6fc:	11 24       	eor	r1, r1
 6fe:	46 0f       	add	r20, r22
 700:	57 1f       	adc	r21, r23
				s*=10;
 702:	b9 01       	movw	r22, r18
 704:	66 0f       	add	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	22 0f       	add	r18, r18
 70a:	33 1f       	adc	r19, r19
 70c:	22 0f       	add	r18, r18
 70e:	33 1f       	adc	r19, r19
 710:	22 0f       	add	r18, r18
 712:	33 1f       	adc	r19, r19
 714:	26 0f       	add	r18, r22
 716:	37 1f       	adc	r19, r23
		 
		 if(key == '=' )
		{
			uint16 o1 = 0 , o2 = 0 , s = 1;
			
			for(uint8 x = i ; x > 0 ; x--)
 718:	91 50       	subi	r25, 0x01	; 1
 71a:	91 11       	cpse	r25, r1
 71c:	e6 cf       	rjmp	.-52     	; 0x6ea <keypad_callback+0xa6>
			{
				o1 += op1[x-1]*s;
				s*=10;
			}
			s = 1;
			for(uint8 x = j ; x > 0 ; x--)
 71e:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <j>
			for(uint8 x = i ; x > 0 ; x--)
			{
				o1 += op1[x-1]*s;
				s*=10;
			}
			s = 1;
 722:	21 e0       	ldi	r18, 0x01	; 1
 724:	30 e0       	ldi	r19, 0x00	; 0
			j++;
		}
		 
		 if(key == '=' )
		{
			uint16 o1 = 0 , o2 = 0 , s = 1;
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	70 e0       	ldi	r23, 0x00	; 0
			{
				o1 += op1[x-1]*s;
				s*=10;
			}
			s = 1;
			for(uint8 x = j ; x > 0 ; x--)
 72a:	18 c0       	rjmp	.+48     	; 0x75c <keypad_callback+0x118>
			{
				o2 += op2[x-1]*s;
 72c:	e9 2f       	mov	r30, r25
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	e2 55       	subi	r30, 0x52	; 82
 732:	ff 4f       	sbci	r31, 0xFF	; 255
 734:	80 81       	ld	r24, Z
 736:	82 9f       	mul	r24, r18
 738:	f0 01       	movw	r30, r0
 73a:	83 9f       	mul	r24, r19
 73c:	f0 0d       	add	r31, r0
 73e:	11 24       	eor	r1, r1
 740:	6e 0f       	add	r22, r30
 742:	7f 1f       	adc	r23, r31
				s*=10;
 744:	f9 01       	movw	r30, r18
 746:	ee 0f       	add	r30, r30
 748:	ff 1f       	adc	r31, r31
 74a:	22 0f       	add	r18, r18
 74c:	33 1f       	adc	r19, r19
 74e:	22 0f       	add	r18, r18
 750:	33 1f       	adc	r19, r19
 752:	22 0f       	add	r18, r18
 754:	33 1f       	adc	r19, r19
 756:	2e 0f       	add	r18, r30
 758:	3f 1f       	adc	r19, r31
			{
				o1 += op1[x-1]*s;
				s*=10;
			}
			s = 1;
			for(uint8 x = j ; x > 0 ; x--)
 75a:	91 50       	subi	r25, 0x01	; 1
 75c:	91 11       	cpse	r25, r1
 75e:	e6 cf       	rjmp	.-52     	; 0x72c <keypad_callback+0xe8>
			{
				o2 += op2[x-1]*s;
				s*=10;
			}
			uint16 r ;
			switch(sign)
 760:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <sign>
 764:	8d 32       	cpi	r24, 0x2D	; 45
 766:	69 f0       	breq	.+26     	; 0x782 <keypad_callback+0x13e>
 768:	18 f4       	brcc	.+6      	; 0x770 <keypad_callback+0x12c>
 76a:	8b 32       	cpi	r24, 0x2B	; 43
 76c:	31 f0       	breq	.+12     	; 0x77a <keypad_callback+0x136>
 76e:	19 c0       	rjmp	.+50     	; 0x7a2 <keypad_callback+0x15e>
 770:	8f 32       	cpi	r24, 0x2F	; 47
 772:	99 f0       	breq	.+38     	; 0x79a <keypad_callback+0x156>
 774:	88 35       	cpi	r24, 0x58	; 88
 776:	49 f0       	breq	.+18     	; 0x78a <keypad_callback+0x146>
 778:	14 c0       	rjmp	.+40     	; 0x7a2 <keypad_callback+0x15e>
			{
				case '+':
					r = o1+o2;
 77a:	ea 01       	movw	r28, r20
 77c:	c6 0f       	add	r28, r22
 77e:	d7 1f       	adc	r29, r23
					break;
 780:	10 c0       	rjmp	.+32     	; 0x7a2 <keypad_callback+0x15e>
				case '-':
					r = o1 - o2;
 782:	ea 01       	movw	r28, r20
 784:	c6 1b       	sub	r28, r22
 786:	d7 0b       	sbc	r29, r23
					break;
 788:	0c c0       	rjmp	.+24     	; 0x7a2 <keypad_callback+0x15e>
				case 'X':
					r = o1*o2;
 78a:	46 9f       	mul	r20, r22
 78c:	e0 01       	movw	r28, r0
 78e:	47 9f       	mul	r20, r23
 790:	d0 0d       	add	r29, r0
 792:	56 9f       	mul	r21, r22
 794:	d0 0d       	add	r29, r0
 796:	11 24       	eor	r1, r1
					break;
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <keypad_callback+0x15e>
				case '/':
					r = o1/o2;
 79a:	ca 01       	movw	r24, r20
 79c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__udivmodhi4>
 7a0:	eb 01       	movw	r28, r22
					break;
			}
			LCD_go_to(2,0);
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	82 e0       	ldi	r24, 0x02	; 2
 7a6:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_go_to>
			LCD_write_number(r);
 7aa:	ce 01       	movw	r24, r28
 7ac:	0e 94 c4 02 	call	0x588	; 0x588 <LCD_write_number>
			next_flag = 1;
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <next_flag>
			pos = 0;
 7b6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__data_end>
			i = 0 ;
 7ba:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <i>
			j = 0;
 7be:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <j>
		}
	}
	
}
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	1f 91       	pop	r17
 7c8:	08 95       	ret

000007ca <main>:



int main(void)
{
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	00 d0       	rcall	.+0      	; 0x7d0 <main+0x6>
 7d0:	00 d0       	rcall	.+0      	; 0x7d2 <main+0x8>
 7d2:	1f 92       	push	r1
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
 7d8:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_Init>
	Keypad keypad;
	Keypad_config(&keypad , GPIO_A , ON_KEY_PRESSED , keypad_callback);
 7dc:	22 e2       	ldi	r18, 0x22	; 34
 7de:	33 e0       	ldi	r19, 0x03	; 3
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	ce 01       	movw	r24, r28
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Keypad_config>
	while(1)
	{
		Keypad_listen(&keypad);
 7ec:	ce 01       	movw	r24, r28
 7ee:	01 96       	adiw	r24, 0x01	; 1
 7f0:	0e 94 74 00 	call	0xe8	; 0xe8 <Keypad_listen>
 7f4:	fb cf       	rjmp	.-10     	; 0x7ec <main+0x22>

000007f6 <__vector_16>:
	
	return  (ADCL + ADCH*256);
}

ISR(ADC_vect)
{
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	2f 93       	push	r18
 802:	3f 93       	push	r19
 804:	4f 93       	push	r20
 806:	5f 93       	push	r21
 808:	6f 93       	push	r22
 80a:	7f 93       	push	r23
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
 812:	bf 93       	push	r27
 814:	ef 93       	push	r30
 816:	ff 93       	push	r31
	if(adc_isr != NULLPTR)
 818:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <adc_isr>
 81c:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <adc_isr+0x1>
 820:	30 97       	sbiw	r30, 0x00	; 0
 822:	09 f0       	breq	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
	{
		adc_isr();
 824:	09 95       	icall
	}
 826:	ff 91       	pop	r31
 828:	ef 91       	pop	r30
 82a:	bf 91       	pop	r27
 82c:	af 91       	pop	r26
 82e:	9f 91       	pop	r25
 830:	8f 91       	pop	r24
 832:	7f 91       	pop	r23
 834:	6f 91       	pop	r22
 836:	5f 91       	pop	r21
 838:	4f 91       	pop	r20
 83a:	3f 91       	pop	r19
 83c:	2f 91       	pop	r18
 83e:	0f 90       	pop	r0
 840:	0f be       	out	0x3f, r0	; 63
 842:	0f 90       	pop	r0
 844:	1f 90       	pop	r1
 846:	18 95       	reti

00000848 <GPIO_init_pin>:
	}
	else 
	{
		return GET_BIT( (*(input_registers[reg])) , pin);
	}
}
 848:	84 30       	cpi	r24, 0x04	; 4
 84a:	10 f5       	brcc	.+68     	; 0x890 <__stack+0x31>
 84c:	68 30       	cpi	r22, 0x08	; 8
 84e:	10 f5       	brcc	.+68     	; 0x894 <__stack+0x35>
 850:	42 30       	cpi	r20, 0x02	; 2
 852:	10 f5       	brcc	.+68     	; 0x898 <__stack+0x39>
 854:	e8 2f       	mov	r30, r24
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	ee 0f       	add	r30, r30
 85a:	ff 1f       	adc	r31, r31
 85c:	e0 59       	subi	r30, 0x90	; 144
 85e:	ff 4f       	sbci	r31, 0xFF	; 255
 860:	01 90       	ld	r0, Z+
 862:	f0 81       	ld	r31, Z
 864:	e0 2d       	mov	r30, r0
 866:	20 81       	ld	r18, Z
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	06 2e       	mov	r0, r22
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	0a 94       	dec	r0
 876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
 87c:	44 0f       	add	r20, r20
 87e:	55 1f       	adc	r21, r21
 880:	6a 95       	dec	r22
 882:	e2 f7       	brpl	.-8      	; 0x87c <__stack+0x1d>
 884:	80 95       	com	r24
 886:	82 23       	and	r24, r18
 888:	48 2b       	or	r20, r24
 88a:	40 83       	st	Z, r20
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	08 95       	ret
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	08 95       	ret
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	08 95       	ret
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	08 95       	ret

0000089c <GPIO_init_port>:
 89c:	84 30       	cpi	r24, 0x04	; 4
 89e:	50 f4       	brcc	.+20     	; 0x8b4 <GPIO_init_port+0x18>
 8a0:	e8 2f       	mov	r30, r24
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	ee 0f       	add	r30, r30
 8a6:	ff 1f       	adc	r31, r31
 8a8:	e0 59       	subi	r30, 0x90	; 144
 8aa:	ff 4f       	sbci	r31, 0xFF	; 255
 8ac:	01 90       	ld	r0, Z+
 8ae:	f0 81       	ld	r31, Z
 8b0:	e0 2d       	mov	r30, r0
 8b2:	60 83       	st	Z, r22
 8b4:	08 95       	ret

000008b6 <GPIO_write_pin>:
 8b6:	84 30       	cpi	r24, 0x04	; 4
 8b8:	00 f5       	brcc	.+64     	; 0x8fa <GPIO_write_pin+0x44>
 8ba:	68 30       	cpi	r22, 0x08	; 8
 8bc:	00 f5       	brcc	.+64     	; 0x8fe <GPIO_write_pin+0x48>
 8be:	e8 2f       	mov	r30, r24
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	ee 0f       	add	r30, r30
 8c4:	ff 1f       	adc	r31, r31
 8c6:	e0 5a       	subi	r30, 0xA0	; 160
 8c8:	ff 4f       	sbci	r31, 0xFF	; 255
 8ca:	01 90       	ld	r0, Z+
 8cc:	f0 81       	ld	r31, Z
 8ce:	e0 2d       	mov	r30, r0
 8d0:	20 81       	ld	r18, Z
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	06 2e       	mov	r0, r22
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <GPIO_write_pin+0x28>
 8da:	88 0f       	add	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	0a 94       	dec	r0
 8e0:	e2 f7       	brpl	.-8      	; 0x8da <GPIO_write_pin+0x24>
 8e2:	50 e0       	ldi	r21, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <GPIO_write_pin+0x34>
 8e6:	44 0f       	add	r20, r20
 8e8:	55 1f       	adc	r21, r21
 8ea:	6a 95       	dec	r22
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <GPIO_write_pin+0x30>
 8ee:	80 95       	com	r24
 8f0:	82 23       	and	r24, r18
 8f2:	48 2b       	or	r20, r24
 8f4:	40 83       	st	Z, r20
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	08 95       	ret
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	08 95       	ret
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	08 95       	ret

00000902 <GPIO_write_port>:
 902:	84 30       	cpi	r24, 0x04	; 4
 904:	50 f4       	brcc	.+20     	; 0x91a <GPIO_write_port+0x18>
 906:	e8 2f       	mov	r30, r24
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	ee 0f       	add	r30, r30
 90c:	ff 1f       	adc	r31, r31
 90e:	e0 5a       	subi	r30, 0xA0	; 160
 910:	ff 4f       	sbci	r31, 0xFF	; 255
 912:	01 90       	ld	r0, Z+
 914:	f0 81       	ld	r31, Z
 916:	e0 2d       	mov	r30, r0
 918:	60 83       	st	Z, r22
 91a:	08 95       	ret

0000091c <GPIO_port_set_mask>:
 91c:	84 30       	cpi	r24, 0x04	; 4
 91e:	60 f4       	brcc	.+24     	; 0x938 <GPIO_port_set_mask+0x1c>
 920:	e8 2f       	mov	r30, r24
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	ee 0f       	add	r30, r30
 926:	ff 1f       	adc	r31, r31
 928:	e0 5a       	subi	r30, 0xA0	; 160
 92a:	ff 4f       	sbci	r31, 0xFF	; 255
 92c:	01 90       	ld	r0, Z+
 92e:	f0 81       	ld	r31, Z
 930:	e0 2d       	mov	r30, r0
 932:	80 81       	ld	r24, Z
 934:	68 2b       	or	r22, r24
 936:	60 83       	st	Z, r22
 938:	08 95       	ret

0000093a <GPIO_read_port>:
uint8 GPIO_read_port(GPIO_port_name_t reg)
{
	if(NOT_VALID_PORT(reg))
 93a:	84 30       	cpi	r24, 0x04	; 4
 93c:	58 f4       	brcc	.+22     	; 0x954 <GPIO_read_port+0x1a>
	{
		return 255;
	}
	else
	{
		return ((*(input_registers[reg])));
 93e:	e8 2f       	mov	r30, r24
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	ee 0f       	add	r30, r30
 944:	ff 1f       	adc	r31, r31
 946:	e8 59       	subi	r30, 0x98	; 152
 948:	ff 4f       	sbci	r31, 0xFF	; 255
 94a:	01 90       	ld	r0, Z+
 94c:	f0 81       	ld	r31, Z
 94e:	e0 2d       	mov	r30, r0
 950:	80 81       	ld	r24, Z
 952:	08 95       	ret
}
uint8 GPIO_read_port(GPIO_port_name_t reg)
{
	if(NOT_VALID_PORT(reg))
	{
		return 255;
 954:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
	{
		return ((*(input_registers[reg])));
	}
}
 956:	08 95       	ret

00000958 <__vector_1>:
	return EXT_SUCCESS;
}


ISR(INT0_vect)
{
 958:	1f 92       	push	r1
 95a:	0f 92       	push	r0
 95c:	0f b6       	in	r0, 0x3f	; 63
 95e:	0f 92       	push	r0
 960:	11 24       	eor	r1, r1
 962:	2f 93       	push	r18
 964:	3f 93       	push	r19
 966:	4f 93       	push	r20
 968:	5f 93       	push	r21
 96a:	6f 93       	push	r22
 96c:	7f 93       	push	r23
 96e:	8f 93       	push	r24
 970:	9f 93       	push	r25
 972:	af 93       	push	r26
 974:	bf 93       	push	r27
 976:	ef 93       	push	r30
 978:	ff 93       	push	r31
	EXT_int0_isr();
 97a:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <EXT_int0_isr>
 97e:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <EXT_int0_isr+0x1>
 982:	09 95       	icall
}
 984:	ff 91       	pop	r31
 986:	ef 91       	pop	r30
 988:	bf 91       	pop	r27
 98a:	af 91       	pop	r26
 98c:	9f 91       	pop	r25
 98e:	8f 91       	pop	r24
 990:	7f 91       	pop	r23
 992:	6f 91       	pop	r22
 994:	5f 91       	pop	r21
 996:	4f 91       	pop	r20
 998:	3f 91       	pop	r19
 99a:	2f 91       	pop	r18
 99c:	0f 90       	pop	r0
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	0f 90       	pop	r0
 9a2:	1f 90       	pop	r1
 9a4:	18 95       	reti

000009a6 <__vector_2>:
ISR(INT1_vect)
{
 9a6:	1f 92       	push	r1
 9a8:	0f 92       	push	r0
 9aa:	0f b6       	in	r0, 0x3f	; 63
 9ac:	0f 92       	push	r0
 9ae:	11 24       	eor	r1, r1
 9b0:	2f 93       	push	r18
 9b2:	3f 93       	push	r19
 9b4:	4f 93       	push	r20
 9b6:	5f 93       	push	r21
 9b8:	6f 93       	push	r22
 9ba:	7f 93       	push	r23
 9bc:	8f 93       	push	r24
 9be:	9f 93       	push	r25
 9c0:	af 93       	push	r26
 9c2:	bf 93       	push	r27
 9c4:	ef 93       	push	r30
 9c6:	ff 93       	push	r31
	EXT_int1_isr();
 9c8:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <EXT_int1_isr>
 9cc:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <EXT_int1_isr+0x1>
 9d0:	09 95       	icall
}
 9d2:	ff 91       	pop	r31
 9d4:	ef 91       	pop	r30
 9d6:	bf 91       	pop	r27
 9d8:	af 91       	pop	r26
 9da:	9f 91       	pop	r25
 9dc:	8f 91       	pop	r24
 9de:	7f 91       	pop	r23
 9e0:	6f 91       	pop	r22
 9e2:	5f 91       	pop	r21
 9e4:	4f 91       	pop	r20
 9e6:	3f 91       	pop	r19
 9e8:	2f 91       	pop	r18
 9ea:	0f 90       	pop	r0
 9ec:	0f be       	out	0x3f, r0	; 63
 9ee:	0f 90       	pop	r0
 9f0:	1f 90       	pop	r1
 9f2:	18 95       	reti

000009f4 <__vector_3>:
ISR(INT2_vect)
{
 9f4:	1f 92       	push	r1
 9f6:	0f 92       	push	r0
 9f8:	0f b6       	in	r0, 0x3f	; 63
 9fa:	0f 92       	push	r0
 9fc:	11 24       	eor	r1, r1
 9fe:	2f 93       	push	r18
 a00:	3f 93       	push	r19
 a02:	4f 93       	push	r20
 a04:	5f 93       	push	r21
 a06:	6f 93       	push	r22
 a08:	7f 93       	push	r23
 a0a:	8f 93       	push	r24
 a0c:	9f 93       	push	r25
 a0e:	af 93       	push	r26
 a10:	bf 93       	push	r27
 a12:	ef 93       	push	r30
 a14:	ff 93       	push	r31
	EXT_int2_isr();
 a16:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <EXT_int2_isr>
 a1a:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <EXT_int2_isr+0x1>
 a1e:	09 95       	icall
 a20:	ff 91       	pop	r31
 a22:	ef 91       	pop	r30
 a24:	bf 91       	pop	r27
 a26:	af 91       	pop	r26
 a28:	9f 91       	pop	r25
 a2a:	8f 91       	pop	r24
 a2c:	7f 91       	pop	r23
 a2e:	6f 91       	pop	r22
 a30:	5f 91       	pop	r21
 a32:	4f 91       	pop	r20
 a34:	3f 91       	pop	r19
 a36:	2f 91       	pop	r18
 a38:	0f 90       	pop	r0
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	0f 90       	pop	r0
 a3e:	1f 90       	pop	r1
 a40:	18 95       	reti

00000a42 <__vector_10>:
	{	
		timer0_overflow_isr();
	}
}*/
ISR(TIMER0_COMP)
{
 a42:	1f 92       	push	r1
 a44:	0f 92       	push	r0
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	0f 92       	push	r0
 a4a:	11 24       	eor	r1, r1
 a4c:	2f 93       	push	r18
 a4e:	3f 93       	push	r19
 a50:	4f 93       	push	r20
 a52:	5f 93       	push	r21
 a54:	6f 93       	push	r22
 a56:	7f 93       	push	r23
 a58:	8f 93       	push	r24
 a5a:	9f 93       	push	r25
 a5c:	af 93       	push	r26
 a5e:	bf 93       	push	r27
 a60:	ef 93       	push	r30
 a62:	ff 93       	push	r31
	if(timer0_compare_isr != NULLPTR)
 a64:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <timer0_compare_isr>
 a68:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <timer0_compare_isr+0x1>
 a6c:	30 97       	sbiw	r30, 0x00	; 0
 a6e:	09 f0       	breq	.+2      	; 0xa72 <__vector_10+0x30>
	{
		timer0_compare_isr();
 a70:	09 95       	icall
	}
}
 a72:	ff 91       	pop	r31
 a74:	ef 91       	pop	r30
 a76:	bf 91       	pop	r27
 a78:	af 91       	pop	r26
 a7a:	9f 91       	pop	r25
 a7c:	8f 91       	pop	r24
 a7e:	7f 91       	pop	r23
 a80:	6f 91       	pop	r22
 a82:	5f 91       	pop	r21
 a84:	4f 91       	pop	r20
 a86:	3f 91       	pop	r19
 a88:	2f 91       	pop	r18
 a8a:	0f 90       	pop	r0
 a8c:	0f be       	out	0x3f, r0	; 63
 a8e:	0f 90       	pop	r0
 a90:	1f 90       	pop	r1
 a92:	18 95       	reti

00000a94 <__vector_9>:


ISR(TIMER1_OVF)
{
 a94:	1f 92       	push	r1
 a96:	0f 92       	push	r0
 a98:	0f b6       	in	r0, 0x3f	; 63
 a9a:	0f 92       	push	r0
 a9c:	11 24       	eor	r1, r1
 a9e:	2f 93       	push	r18
 aa0:	3f 93       	push	r19
 aa2:	4f 93       	push	r20
 aa4:	5f 93       	push	r21
 aa6:	6f 93       	push	r22
 aa8:	7f 93       	push	r23
 aaa:	8f 93       	push	r24
 aac:	9f 93       	push	r25
 aae:	af 93       	push	r26
 ab0:	bf 93       	push	r27
 ab2:	ef 93       	push	r30
 ab4:	ff 93       	push	r31
	if(timer1_overflow_isr != NULLPTR)
 ab6:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <timer1_overflow_isr>
 aba:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <timer1_overflow_isr+0x1>
 abe:	30 97       	sbiw	r30, 0x00	; 0
 ac0:	09 f0       	breq	.+2      	; 0xac4 <__vector_9+0x30>
	{
		timer1_overflow_isr();
 ac2:	09 95       	icall
	}
}
 ac4:	ff 91       	pop	r31
 ac6:	ef 91       	pop	r30
 ac8:	bf 91       	pop	r27
 aca:	af 91       	pop	r26
 acc:	9f 91       	pop	r25
 ace:	8f 91       	pop	r24
 ad0:	7f 91       	pop	r23
 ad2:	6f 91       	pop	r22
 ad4:	5f 91       	pop	r21
 ad6:	4f 91       	pop	r20
 ad8:	3f 91       	pop	r19
 ada:	2f 91       	pop	r18
 adc:	0f 90       	pop	r0
 ade:	0f be       	out	0x3f, r0	; 63
 ae0:	0f 90       	pop	r0
 ae2:	1f 90       	pop	r1
 ae4:	18 95       	reti

00000ae6 <__vector_7>:

ISR(TIMER1_COMPA)
{
 ae6:	1f 92       	push	r1
 ae8:	0f 92       	push	r0
 aea:	0f b6       	in	r0, 0x3f	; 63
 aec:	0f 92       	push	r0
 aee:	11 24       	eor	r1, r1
 af0:	2f 93       	push	r18
 af2:	3f 93       	push	r19
 af4:	4f 93       	push	r20
 af6:	5f 93       	push	r21
 af8:	6f 93       	push	r22
 afa:	7f 93       	push	r23
 afc:	8f 93       	push	r24
 afe:	9f 93       	push	r25
 b00:	af 93       	push	r26
 b02:	bf 93       	push	r27
 b04:	ef 93       	push	r30
 b06:	ff 93       	push	r31
	if(timer1_compare_a_isr != NULLPTR)
 b08:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <timer1_compare_a_isr>
 b0c:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <timer1_compare_a_isr+0x1>
 b10:	30 97       	sbiw	r30, 0x00	; 0
 b12:	09 f0       	breq	.+2      	; 0xb16 <__vector_7+0x30>
	{
		timer1_compare_a_isr();
 b14:	09 95       	icall
	}
}
 b16:	ff 91       	pop	r31
 b18:	ef 91       	pop	r30
 b1a:	bf 91       	pop	r27
 b1c:	af 91       	pop	r26
 b1e:	9f 91       	pop	r25
 b20:	8f 91       	pop	r24
 b22:	7f 91       	pop	r23
 b24:	6f 91       	pop	r22
 b26:	5f 91       	pop	r21
 b28:	4f 91       	pop	r20
 b2a:	3f 91       	pop	r19
 b2c:	2f 91       	pop	r18
 b2e:	0f 90       	pop	r0
 b30:	0f be       	out	0x3f, r0	; 63
 b32:	0f 90       	pop	r0
 b34:	1f 90       	pop	r1
 b36:	18 95       	reti

00000b38 <__vector_8>:

ISR(TIMER1_COMPB)
{
 b38:	1f 92       	push	r1
 b3a:	0f 92       	push	r0
 b3c:	0f b6       	in	r0, 0x3f	; 63
 b3e:	0f 92       	push	r0
 b40:	11 24       	eor	r1, r1
 b42:	2f 93       	push	r18
 b44:	3f 93       	push	r19
 b46:	4f 93       	push	r20
 b48:	5f 93       	push	r21
 b4a:	6f 93       	push	r22
 b4c:	7f 93       	push	r23
 b4e:	8f 93       	push	r24
 b50:	9f 93       	push	r25
 b52:	af 93       	push	r26
 b54:	bf 93       	push	r27
 b56:	ef 93       	push	r30
 b58:	ff 93       	push	r31
	if(timer1_compare_b_isr != NULLPTR)
 b5a:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <timer1_compare_b_isr>
 b5e:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <timer1_compare_b_isr+0x1>
 b62:	30 97       	sbiw	r30, 0x00	; 0
 b64:	09 f0       	breq	.+2      	; 0xb68 <__vector_8+0x30>
	{
		timer1_compare_b_isr();
 b66:	09 95       	icall
	}
}
 b68:	ff 91       	pop	r31
 b6a:	ef 91       	pop	r30
 b6c:	bf 91       	pop	r27
 b6e:	af 91       	pop	r26
 b70:	9f 91       	pop	r25
 b72:	8f 91       	pop	r24
 b74:	7f 91       	pop	r23
 b76:	6f 91       	pop	r22
 b78:	5f 91       	pop	r21
 b7a:	4f 91       	pop	r20
 b7c:	3f 91       	pop	r19
 b7e:	2f 91       	pop	r18
 b80:	0f 90       	pop	r0
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	0f 90       	pop	r0
 b86:	1f 90       	pop	r1
 b88:	18 95       	reti

00000b8a <__vector_6>:

ISR(TIMER1_CAPT)
{
 b8a:	1f 92       	push	r1
 b8c:	0f 92       	push	r0
 b8e:	0f b6       	in	r0, 0x3f	; 63
 b90:	0f 92       	push	r0
 b92:	11 24       	eor	r1, r1
 b94:	2f 93       	push	r18
 b96:	3f 93       	push	r19
 b98:	4f 93       	push	r20
 b9a:	5f 93       	push	r21
 b9c:	6f 93       	push	r22
 b9e:	7f 93       	push	r23
 ba0:	8f 93       	push	r24
 ba2:	9f 93       	push	r25
 ba4:	af 93       	push	r26
 ba6:	bf 93       	push	r27
 ba8:	ef 93       	push	r30
 baa:	ff 93       	push	r31
	if(timer1_input_capture_isr != NULLPTR)
 bac:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <timer1_input_capture_isr>
 bb0:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <timer1_input_capture_isr+0x1>
 bb4:	30 97       	sbiw	r30, 0x00	; 0
 bb6:	09 f0       	breq	.+2      	; 0xbba <__vector_6+0x30>
	{
		timer1_input_capture_isr();
 bb8:	09 95       	icall
	}
}
 bba:	ff 91       	pop	r31
 bbc:	ef 91       	pop	r30
 bbe:	bf 91       	pop	r27
 bc0:	af 91       	pop	r26
 bc2:	9f 91       	pop	r25
 bc4:	8f 91       	pop	r24
 bc6:	7f 91       	pop	r23
 bc8:	6f 91       	pop	r22
 bca:	5f 91       	pop	r21
 bcc:	4f 91       	pop	r20
 bce:	3f 91       	pop	r19
 bd0:	2f 91       	pop	r18
 bd2:	0f 90       	pop	r0
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	0f 90       	pop	r0
 bd8:	1f 90       	pop	r1
 bda:	18 95       	reti

00000bdc <__udivmodhi4>:
 bdc:	aa 1b       	sub	r26, r26
 bde:	bb 1b       	sub	r27, r27
 be0:	51 e1       	ldi	r21, 0x11	; 17
 be2:	07 c0       	rjmp	.+14     	; 0xbf2 <__udivmodhi4_ep>

00000be4 <__udivmodhi4_loop>:
 be4:	aa 1f       	adc	r26, r26
 be6:	bb 1f       	adc	r27, r27
 be8:	a6 17       	cp	r26, r22
 bea:	b7 07       	cpc	r27, r23
 bec:	10 f0       	brcs	.+4      	; 0xbf2 <__udivmodhi4_ep>
 bee:	a6 1b       	sub	r26, r22
 bf0:	b7 0b       	sbc	r27, r23

00000bf2 <__udivmodhi4_ep>:
 bf2:	88 1f       	adc	r24, r24
 bf4:	99 1f       	adc	r25, r25
 bf6:	5a 95       	dec	r21
 bf8:	a9 f7       	brne	.-22     	; 0xbe4 <__udivmodhi4_loop>
 bfa:	80 95       	com	r24
 bfc:	90 95       	com	r25
 bfe:	bc 01       	movw	r22, r24
 c00:	cd 01       	movw	r24, r26
 c02:	08 95       	ret

00000c04 <__umulhisi3>:
 c04:	a2 9f       	mul	r26, r18
 c06:	b0 01       	movw	r22, r0
 c08:	b3 9f       	mul	r27, r19
 c0a:	c0 01       	movw	r24, r0
 c0c:	a3 9f       	mul	r26, r19
 c0e:	70 0d       	add	r23, r0
 c10:	81 1d       	adc	r24, r1
 c12:	11 24       	eor	r1, r1
 c14:	91 1d       	adc	r25, r1
 c16:	b2 9f       	mul	r27, r18
 c18:	70 0d       	add	r23, r0
 c1a:	81 1d       	adc	r24, r1
 c1c:	11 24       	eor	r1, r1
 c1e:	91 1d       	adc	r25, r1
 c20:	08 95       	ret

00000c22 <_exit>:
 c22:	f8 94       	cli

00000c24 <__stop_program>:
 c24:	ff cf       	rjmp	.-2      	; 0xc24 <__stop_program>
