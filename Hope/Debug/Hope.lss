
Hope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000fc0  00001054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800088  00800088  0000107c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c77  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dba  00000000  00000000  000040d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016ec  00000000  00000000  00004e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000914  00000000  00000000  00006580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018da  00000000  00000000  00006e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018c4  00000000  00000000  0000876e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000a032  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 96 04 	jmp	0x92c	; 0x92c <__vector_1>
   8:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_2>
   c:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__vector_6>
  1c:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__vector_7>
  20:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__vector_8>
  24:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__vector_9>
  28:	0c 94 66 05 	jmp	0xacc	; 0xacc <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 01 04 	jmp	0x802	; 0x802 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 39       	cpi	r26, 0x9F	; 159
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a6 02 	call	0x54c	; 0x54c <main>
  8a:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_write_data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	65 e0       	ldi	r22, 0x05	; 5
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
  aa:	4c 2f       	mov	r20, r28
  ac:	40 71       	andi	r20, 0x10	; 16
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	55 95       	asr	r21
  b2:	47 95       	ror	r20
  b4:	55 95       	asr	r21
  b6:	47 95       	ror	r20
  b8:	55 95       	asr	r21
  ba:	47 95       	ror	r20
  bc:	55 95       	asr	r21
  be:	47 95       	ror	r20
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
  c8:	4c 2f       	mov	r20, r28
  ca:	40 72       	andi	r20, 0x20	; 32
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	55 95       	asr	r21
  d0:	47 95       	ror	r20
  d2:	55 95       	asr	r21
  d4:	47 95       	ror	r20
  d6:	55 95       	asr	r21
  d8:	47 95       	ror	r20
  da:	55 95       	asr	r21
  dc:	47 95       	ror	r20
  de:	55 95       	asr	r21
  e0:	47 95       	ror	r20
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
  ea:	4c 2f       	mov	r20, r28
  ec:	40 74       	andi	r20, 0x40	; 64
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	04 2e       	mov	r0, r20
  f2:	45 2f       	mov	r20, r21
  f4:	00 0c       	add	r0, r0
  f6:	44 1f       	adc	r20, r20
  f8:	55 0b       	sbc	r21, r21
  fa:	00 0c       	add	r0, r0
  fc:	44 1f       	adc	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 108:	4c 2f       	mov	r20, r28
 10a:	44 1f       	adc	r20, r20
 10c:	44 27       	eor	r20, r20
 10e:	44 1f       	adc	r20, r20
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	66 e0       	ldi	r22, 0x06	; 6
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 122:	83 ef       	ldi	r24, 0xF3	; 243
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_write_data+0x94>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_write_data+0x9a>
 12c:	00 00       	nop
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	66 e0       	ldi	r22, 0x06	; 6
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 138:	83 ef       	ldi	r24, 0xF3	; 243
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_write_data+0xaa>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_write_data+0xb0>
 142:	00 00       	nop
 144:	4c 2f       	mov	r20, r28
 146:	41 70       	andi	r20, 0x01	; 1
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 150:	4c 2f       	mov	r20, r28
 152:	42 70       	andi	r20, 0x02	; 2
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	55 95       	asr	r21
 158:	47 95       	ror	r20
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 162:	4c 2f       	mov	r20, r28
 164:	44 70       	andi	r20, 0x04	; 4
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	55 95       	asr	r21
 16a:	47 95       	ror	r20
 16c:	55 95       	asr	r21
 16e:	47 95       	ror	r20
 170:	62 e0       	ldi	r22, 0x02	; 2
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 178:	c8 70       	andi	r28, 0x08	; 8
 17a:	4c 2f       	mov	r20, r28
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	55 95       	asr	r21
 180:	47 95       	ror	r20
 182:	55 95       	asr	r21
 184:	47 95       	ror	r20
 186:	55 95       	asr	r21
 188:	47 95       	ror	r20
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	66 e0       	ldi	r22, 0x06	; 6
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 19c:	83 ef       	ldi	r24, 0xF3	; 243
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_write_data+0x10e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_write_data+0x114>
 1a6:	00 00       	nop
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	66 e0       	ldi	r22, 0x06	; 6
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 1b2:	83 ef       	ldi	r24, 0xF3	; 243
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_write_data+0x124>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_write_data+0x12a>
 1bc:	00 00       	nop
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <lcd_write_command>:
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	65 e0       	ldi	r22, 0x05	; 5
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	64 e0       	ldi	r22, 0x04	; 4
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 1da:	4c 2f       	mov	r20, r28
 1dc:	40 71       	andi	r20, 0x10	; 16
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	55 95       	asr	r21
 1e2:	47 95       	ror	r20
 1e4:	55 95       	asr	r21
 1e6:	47 95       	ror	r20
 1e8:	55 95       	asr	r21
 1ea:	47 95       	ror	r20
 1ec:	55 95       	asr	r21
 1ee:	47 95       	ror	r20
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 1f8:	4c 2f       	mov	r20, r28
 1fa:	40 72       	andi	r20, 0x20	; 32
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	55 95       	asr	r21
 200:	47 95       	ror	r20
 202:	55 95       	asr	r21
 204:	47 95       	ror	r20
 206:	55 95       	asr	r21
 208:	47 95       	ror	r20
 20a:	55 95       	asr	r21
 20c:	47 95       	ror	r20
 20e:	55 95       	asr	r21
 210:	47 95       	ror	r20
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 21a:	4c 2f       	mov	r20, r28
 21c:	40 74       	andi	r20, 0x40	; 64
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	04 2e       	mov	r0, r20
 222:	45 2f       	mov	r20, r21
 224:	00 0c       	add	r0, r0
 226:	44 1f       	adc	r20, r20
 228:	55 0b       	sbc	r21, r21
 22a:	00 0c       	add	r0, r0
 22c:	44 1f       	adc	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 238:	4c 2f       	mov	r20, r28
 23a:	44 1f       	adc	r20, r20
 23c:	44 27       	eor	r20, r20
 23e:	44 1f       	adc	r20, r20
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	66 e0       	ldi	r22, 0x06	; 6
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 252:	83 ef       	ldi	r24, 0xF3	; 243
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_write_command+0x94>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_write_command+0x9a>
 25c:	00 00       	nop
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	66 e0       	ldi	r22, 0x06	; 6
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 268:	83 ef       	ldi	r24, 0xF3	; 243
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_write_command+0xaa>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_write_command+0xb0>
 272:	00 00       	nop
 274:	4c 2f       	mov	r20, r28
 276:	41 70       	andi	r20, 0x01	; 1
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 280:	4c 2f       	mov	r20, r28
 282:	42 70       	andi	r20, 0x02	; 2
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	55 95       	asr	r21
 288:	47 95       	ror	r20
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 292:	4c 2f       	mov	r20, r28
 294:	44 70       	andi	r20, 0x04	; 4
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	55 95       	asr	r21
 29a:	47 95       	ror	r20
 29c:	55 95       	asr	r21
 29e:	47 95       	ror	r20
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 2a8:	c8 70       	andi	r28, 0x08	; 8
 2aa:	4c 2f       	mov	r20, r28
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	55 95       	asr	r21
 2b0:	47 95       	ror	r20
 2b2:	55 95       	asr	r21
 2b4:	47 95       	ror	r20
 2b6:	55 95       	asr	r21
 2b8:	47 95       	ror	r20
 2ba:	63 e0       	ldi	r22, 0x03	; 3
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	66 e0       	ldi	r22, 0x06	; 6
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 2cc:	83 ef       	ldi	r24, 0xF3	; 243
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_write_command+0x10e>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_write_command+0x114>
 2d6:	00 00       	nop
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	66 e0       	ldi	r22, 0x06	; 6
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	0e 94 63 04 	call	0x8c6	; 0x8c6 <GPIO_write_pin>
 2e2:	83 ef       	ldi	r24, 0xF3	; 243
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_write_command+0x124>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <lcd_write_command+0x12a>
 2ec:	00 00       	nop
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <LCD_Init>:
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	64 e0       	ldi	r22, 0x04	; 4
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	0e 94 2a 04 	call	0x854	; 0x854 <GPIO_init_pin>
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	66 e0       	ldi	r22, 0x06	; 6
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 2a 04 	call	0x854	; 0x854 <GPIO_init_pin>
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	65 e0       	ldi	r22, 0x05	; 5
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 2a 04 	call	0x854	; 0x854 <GPIO_init_pin>
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 2a 04 	call	0x854	; 0x854 <GPIO_init_pin>
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	0e 94 2a 04 	call	0x854	; 0x854 <GPIO_init_pin>
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	0e 94 2a 04 	call	0x854	; 0x854 <GPIO_init_pin>
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	63 e0       	ldi	r22, 0x03	; 3
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	0e 94 2a 04 	call	0x854	; 0x854 <GPIO_init_pin>
 338:	85 ea       	ldi	r24, 0xA5	; 165
 33a:	9e e0       	ldi	r25, 0x0E	; 14
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_Init+0x4a>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_Init+0x50>
 342:	00 00       	nop
 344:	83 e3       	ldi	r24, 0x33	; 51
 346:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 34a:	91 e2       	ldi	r25, 0x21	; 33
 34c:	9a 95       	dec	r25
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_Init+0x5a>
 350:	00 00       	nop
 352:	82 e3       	ldi	r24, 0x32	; 50
 354:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 358:	81 e2       	ldi	r24, 0x21	; 33
 35a:	8a 95       	dec	r24
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_Init+0x68>
 35e:	00 00       	nop
 360:	88 e2       	ldi	r24, 0x28	; 40
 362:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 366:	91 e2       	ldi	r25, 0x21	; 33
 368:	9a 95       	dec	r25
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_Init+0x76>
 36c:	00 00       	nop
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 374:	83 ef       	ldi	r24, 0xF3	; 243
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <LCD_Init+0x86>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_Init+0x8c>
 37e:	00 00       	nop
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 386:	83 ef       	ldi	r24, 0xF3	; 243
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_Init+0x98>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_Init+0x9e>
 390:	00 00       	nop
 392:	8c e0       	ldi	r24, 0x0C	; 12
 394:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 398:	91 e2       	ldi	r25, 0x21	; 33
 39a:	9a 95       	dec	r25
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_Init+0xa8>
 39e:	00 00       	nop
 3a0:	08 95       	ret

000003a2 <LCD_write_char>:
 3a2:	18 16       	cp	r1, r24
 3a4:	14 f4       	brge	.+4      	; 0x3aa <LCD_write_char+0x8>
 3a6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_data>
 3aa:	08 95       	ret

000003ac <LCD_write_string>:
{
	lcd_write_command(0x01);
	_delay_ms(2);
}
void LCD_write_string(sint8 *str)
{
 3ac:	0f 93       	push	r16
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	8c 01       	movw	r16, r24
	uint8 c = 0;
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
	while ( str[c] )
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <LCD_write_string+0x12>
	{
		LCD_write_char(str[c++]);
 3b8:	cf 5f       	subi	r28, 0xFF	; 255
 3ba:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_write_char>
	_delay_ms(2);
}
void LCD_write_string(sint8 *str)
{
	uint8 c = 0;
	while ( str[c] )
 3be:	f8 01       	movw	r30, r16
 3c0:	ec 0f       	add	r30, r28
 3c2:	f1 1d       	adc	r31, r1
 3c4:	80 81       	ld	r24, Z
 3c6:	81 11       	cpse	r24, r1
 3c8:	f7 cf       	rjmp	.-18     	; 0x3b8 <LCD_write_string+0xc>
	{
		LCD_write_char(str[c++]);
	}
}
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <LCD_go_to>:

void LCD_go_to(uint8 row , uint8 col)
{
	if(row == 1)
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	39 f4       	brne	.+14     	; 0x3e4 <LCD_go_to+0x12>
	{
		if(col < MAX_COL)
 3d6:	60 31       	cpi	r22, 0x10	; 16
 3d8:	68 f4       	brcc	.+26     	; 0x3f4 <LCD_go_to+0x22>
		{
			lcd_write_command((0x80+col));
 3da:	80 e8       	ldi	r24, 0x80	; 128
 3dc:	86 0f       	add	r24, r22
 3de:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 3e2:	08 95       	ret
		}
	}
	else if(row == 2)
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	31 f4       	brne	.+12     	; 0x3f4 <LCD_go_to+0x22>
	{
		if(col < MAX_COL)
 3e8:	60 31       	cpi	r22, 0x10	; 16
 3ea:	20 f4       	brcc	.+8      	; 0x3f4 <LCD_go_to+0x22>
		{
			lcd_write_command((0xC0+col));
 3ec:	80 ec       	ldi	r24, 0xC0	; 192
 3ee:	86 0f       	add	r24, r22
 3f0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 3f4:	08 95       	ret

000003f6 <LCD_write_number>:
		}
	}
}
void LCD_write_number(uint32 n)
{
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	2a 97       	sbiw	r28, 0x0a	; 10
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	ac 01       	movw	r20, r24
	uint8 i = 0 , j , digits[10];
	if(n == 0)
 40e:	89 2b       	or	r24, r25
 410:	91 f5       	brne	.+100    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
		lcd_write_data('0');
 412:	80 e3       	ldi	r24, 0x30	; 48
 414:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_data>
 418:	42 c0       	rjmp	.+132    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
	else {
		while(n)
		{
			digits[i] = (uint8)(n%10 + '0');
 41a:	9a 01       	movw	r18, r20
 41c:	ad ec       	ldi	r26, 0xCD	; 205
 41e:	bc ec       	ldi	r27, 0xCC	; 204
 420:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__umulhisi3>
 424:	96 95       	lsr	r25
 426:	87 95       	ror	r24
 428:	96 95       	lsr	r25
 42a:	87 95       	ror	r24
 42c:	96 95       	lsr	r25
 42e:	87 95       	ror	r24
 430:	9c 01       	movw	r18, r24
 432:	22 0f       	add	r18, r18
 434:	33 1f       	adc	r19, r19
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	82 0f       	add	r24, r18
 444:	93 1f       	adc	r25, r19
 446:	9a 01       	movw	r18, r20
 448:	28 1b       	sub	r18, r24
 44a:	39 0b       	sbc	r19, r25
 44c:	c9 01       	movw	r24, r18
 44e:	80 5d       	subi	r24, 0xD0	; 208
 450:	e1 e0       	ldi	r30, 0x01	; 1
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	ec 0f       	add	r30, r28
 456:	fd 1f       	adc	r31, r29
 458:	e1 0f       	add	r30, r17
 45a:	f1 1d       	adc	r31, r1
 45c:	80 83       	st	Z, r24
			n = n / 10;
 45e:	9a 01       	movw	r18, r20
 460:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__umulhisi3>
 464:	ac 01       	movw	r20, r24
 466:	56 95       	lsr	r21
 468:	47 95       	ror	r20
 46a:	56 95       	lsr	r21
 46c:	47 95       	ror	r20
 46e:	56 95       	lsr	r21
 470:	47 95       	ror	r20
			i++;
 472:	1f 5f       	subi	r17, 0xFF	; 255
 474:	01 c0       	rjmp	.+2      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 476:	10 e0       	ldi	r17, 0x00	; 0
{
	uint8 i = 0 , j , digits[10];
	if(n == 0)
		lcd_write_data('0');
	else {
		while(n)
 478:	41 15       	cp	r20, r1
 47a:	51 05       	cpc	r21, r1
 47c:	71 f6       	brne	.-100    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 47e:	0d c0       	rjmp	.+26     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
		{
			lcd_write_data(digits[j-1]);
 480:	e1 2f       	mov	r30, r17
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	8c 0f       	add	r24, r28
 48c:	9d 1f       	adc	r25, r29
 48e:	e8 0f       	add	r30, r24
 490:	f9 1f       	adc	r31, r25
 492:	80 81       	ld	r24, Z
 494:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_data>
		{
			digits[i] = (uint8)(n%10 + '0');
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
 498:	11 50       	subi	r17, 0x01	; 1
 49a:	11 11       	cpse	r17, r1
 49c:	f1 cf       	rjmp	.-30     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
		{
			lcd_write_data(digits[j-1]);
		}
	}
}
 49e:	2a 96       	adiw	r28, 0x0a	; 10
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	cd bf       	out	0x3d, r28	; 61
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	1f 91       	pop	r17
 4b0:	08 95       	ret

000004b2 <LCD_clear_next_chars>:
void LCD_clear_next_chars(uint8 n)
{
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	d8 2f       	mov	r29, r24
	for(uint8 i = 0 ; i < n ; i++)
 4b8:	c0 e0       	ldi	r28, 0x00	; 0
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <LCD_clear_next_chars+0x12>
		LCD_write_char(' ');
 4bc:	80 e2       	ldi	r24, 0x20	; 32
 4be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_write_char>
		}
	}
}
void LCD_clear_next_chars(uint8 n)
{
	for(uint8 i = 0 ; i < n ; i++)
 4c2:	cf 5f       	subi	r28, 0xFF	; 255
 4c4:	cd 17       	cp	r28, r29
 4c6:	d0 f3       	brcs	.-12     	; 0x4bc <LCD_clear_next_chars+0xa>
		LCD_write_char(' ');
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <LM53_Temp_Sensor_Init>:
#include "LM35.h"
static ADC_channel_t lm_channel = -1;

void LM53_Temp_Sensor_Init(ADC_channel_t channel)
{
	lm_channel = channel;
 4ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 4d2:	08 95       	ret

000004d4 <LM35_Get_Temperature>:
}
uint16 LM35_Get_Temperature()
{
 4d4:	cf 93       	push	r28
	if(lm_channel == -1)
		return -1;
	
	uint16 data = 0;
	ADC_voltage_reference_t vr = ADC_get_current_vref();
 4d6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <ADC_get_current_vref>
 4da:	c8 2f       	mov	r28, r24
	data = ADC_read(lm_channel);
 4dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4e0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <ADC_read>
	
	if(vr == AVCC_pin_External_Cap_At_AREF_pin)
 4e4:	c1 30       	cpi	r28, 0x01	; 1
 4e6:	b1 f4       	brne	.+44     	; 0x514 <LM35_Get_Temperature+0x40>
	{
		return (data*4.88/10);
 4e8:	bc 01       	movw	r22, r24
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 d4 06 	call	0xda8	; 0xda8 <__floatunsisf>
 4f2:	26 ef       	ldi	r18, 0xF6	; 246
 4f4:	38 e2       	ldi	r19, 0x28	; 40
 4f6:	4c e9       	ldi	r20, 0x9C	; 156
 4f8:	50 e4       	ldi	r21, 0x40	; 64
 4fa:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	40 e2       	ldi	r20, 0x20	; 32
 504:	51 e4       	ldi	r21, 0x41	; 65
 506:	0e 94 33 06 	call	0xc66	; 0xc66 <__divsf3>
 50a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fixunssfsi>
 50e:	26 2f       	mov	r18, r22
 510:	97 2f       	mov	r25, r23
 512:	19 c0       	rjmp	.+50     	; 0x546 <LM35_Get_Temperature+0x72>
	}
	else if(vr == Internal_2560mV)
 514:	c3 30       	cpi	r28, 0x03	; 3
 516:	b1 f4       	brne	.+44     	; 0x544 <LM35_Get_Temperature+0x70>
	{
		return (data*2.5/10);
 518:	bc 01       	movw	r22, r24
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__floatunsisf>
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	40 e2       	ldi	r20, 0x20	; 32
 528:	50 e4       	ldi	r21, 0x40	; 64
 52a:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsf3>
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	40 e2       	ldi	r20, 0x20	; 32
 534:	51 e4       	ldi	r21, 0x41	; 65
 536:	0e 94 33 06 	call	0xc66	; 0xc66 <__divsf3>
 53a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__fixunssfsi>
 53e:	26 2f       	mov	r18, r22
 540:	97 2f       	mov	r25, r23
 542:	01 c0       	rjmp	.+2      	; 0x546 <LM35_Get_Temperature+0x72>
	}
 544:	01 c0       	rjmp	.+2      	; 0x548 <LM35_Get_Temperature+0x74>
 546:	82 2f       	mov	r24, r18
 548:	cf 91       	pop	r28
 54a:	08 95       	ret

0000054c <main>:
volatile uint16 temp;


int main(void)
{
	sei();
 54c:	78 94       	sei
	LCD_Init();
 54e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Init>
	
	GPIO_init_pin(GPIO_A , PIN_2 , GPIO_PIN_INPUT);
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	62 e0       	ldi	r22, 0x02	; 2
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 2a 04 	call	0x854	; 0x854 <GPIO_init_pin>
	GPIO_init_pin(GPIO_A , PIN_6 , GPIO_PIN_INPUT);
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	66 e0       	ldi	r22, 0x06	; 6
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 2a 04 	call	0x854	; 0x854 <GPIO_init_pin>
	GPIO_init_pin(GPIO_B , PIN_3 , GPIO_PIN_OUTPUT);
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 2a 04 	call	0x854	; 0x854 <GPIO_init_pin>
	GPIO_init_port_set_mask(GPIO_D,0xf0);
 570:	60 ef       	ldi	r22, 0xF0	; 240
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	0e 94 54 04 	call	0x8a8	; 0x8a8 <GPIO_init_port_set_mask>
	
	ADC_init(Channel_2_ADC2,ADC_prescaler_128,Internal_2560mV);
 578:	43 e0       	ldi	r20, 0x03	; 3
 57a:	67 e0       	ldi	r22, 0x07	; 7
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	0e 94 31 03 	call	0x662	; 0x662 <ADC_init>
	ADC_set_auto_triggering(Free_Running_Mode);
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 b4 03 	call	0x768	; 0x768 <ADC_set_auto_triggering>
	
	
	LM53_Temp_Sensor_Init(Channel_6_ADC6);
 588:	86 e0       	ldi	r24, 0x06	; 6
 58a:	0e 94 67 02 	call	0x4ce	; 0x4ce <LM53_Temp_Sensor_Init>
	
	
	
	LCD_write_string("Lm35 test :");
 58e:	81 e7       	ldi	r24, 0x71	; 113
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_write_string>
	TIMER0_init(TIMER0_PHASE_CORRECTION_PWM,TIMER0_PRESCALER_1024,TIMER0_OCO_NON_INVERTING);
 596:	42 e0       	ldi	r20, 0x02	; 2
 598:	65 e0       	ldi	r22, 0x05	; 5
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 0b 05 	call	0xa16	; 0xa16 <TIMER0_init>

    while (1) 
    {
		
		LCD_go_to(2 , 0);
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_go_to>
		LCD_write_string("temp : ");
 5a8:	8d e7       	ldi	r24, 0x7D	; 125
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_write_string>
		temp = LM35_Get_Temperature();
 5b0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LM35_Get_Temperature>
 5b4:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <temp+0x1>
 5b8:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <temp>
		
		
		LCD_write_number(temp);
 5bc:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <temp>
 5c0:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <temp+0x1>
 5c4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_write_number>
		LCD_write_string("oC");
 5c8:	85 e8       	ldi	r24, 0x85	; 133
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_write_string>
		LCD_clear_next_chars(1);
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_clear_next_chars>
		
		
		if(temp < 20)
 5d6:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <temp>
 5da:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <temp+0x1>
 5de:	44 97       	sbiw	r24, 0x14	; 20
 5e0:	40 f4       	brcc	.+16     	; 0x5f2 <main+0xa6>
		{
			GPIO_write_port(GPIO_D , 1<<4);
 5e2:	60 e1       	ldi	r22, 0x10	; 16
 5e4:	83 e0       	ldi	r24, 0x03	; 3
 5e6:	0e 94 89 04 	call	0x912	; 0x912 <GPIO_write_port>
			TIMER0_compare_reload(0);
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	0e 94 64 05 	call	0xac8	; 0xac8 <TIMER0_compare_reload>
 5f0:	d7 cf       	rjmp	.-82     	; 0x5a0 <main+0x54>
		}
		else if(temp >= 20 && temp < 40)
 5f2:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <temp>
 5f6:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <temp+0x1>
 5fa:	44 97       	sbiw	r24, 0x14	; 20
 5fc:	18 f1       	brcs	.+70     	; 0x644 <main+0xf8>
 5fe:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <temp>
 602:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <temp+0x1>
 606:	88 97       	sbiw	r24, 0x28	; 40
 608:	e8 f4       	brcc	.+58     	; 0x644 <main+0xf8>
		{
			GPIO_write_port(GPIO_D , 1<<5);
 60a:	60 e2       	ldi	r22, 0x20	; 32
 60c:	83 e0       	ldi	r24, 0x03	; 3
 60e:	0e 94 89 04 	call	0x912	; 0x912 <GPIO_write_port>
			TIMER0_compare_reload((temp - 20)*255/20);
 612:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <temp>
 616:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <temp+0x1>
 61a:	4f ef       	ldi	r20, 0xFF	; 255
 61c:	48 9f       	mul	r20, r24
 61e:	90 01       	movw	r18, r0
 620:	49 9f       	mul	r20, r25
 622:	30 0d       	add	r19, r0
 624:	11 24       	eor	r1, r1
 626:	2c 5e       	subi	r18, 0xEC	; 236
 628:	33 41       	sbci	r19, 0x13	; 19
 62a:	ad ec       	ldi	r26, 0xCD	; 205
 62c:	bc ec       	ldi	r27, 0xCC	; 204
 62e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__umulhisi3>
 632:	92 95       	swap	r25
 634:	82 95       	swap	r24
 636:	8f 70       	andi	r24, 0x0F	; 15
 638:	89 27       	eor	r24, r25
 63a:	9f 70       	andi	r25, 0x0F	; 15
 63c:	89 27       	eor	r24, r25
 63e:	0e 94 64 05 	call	0xac8	; 0xac8 <TIMER0_compare_reload>
 642:	ae cf       	rjmp	.-164    	; 0x5a0 <main+0x54>
		}
		else if( temp > 40)
 644:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <temp>
 648:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <temp+0x1>
 64c:	89 97       	sbiw	r24, 0x29	; 41
 64e:	08 f4       	brcc	.+2      	; 0x652 <main+0x106>
 650:	a7 cf       	rjmp	.-178    	; 0x5a0 <main+0x54>
		{
			GPIO_write_port(GPIO_D , 3<<6);
 652:	60 ec       	ldi	r22, 0xC0	; 192
 654:	83 e0       	ldi	r24, 0x03	; 3
 656:	0e 94 89 04 	call	0x912	; 0x912 <GPIO_write_port>
			TIMER0_compare_reload(0);			
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	0e 94 64 05 	call	0xac8	; 0xac8 <TIMER0_compare_reload>
 660:	9f cf       	rjmp	.-194    	; 0x5a0 <main+0x54>

00000662 <ADC_init>:
{
	SET_BIT(ADCSRA , ADIE);
}
void ADC_clear_interrupt()
{
	CLEAR_BIT(ADCSRA , ADIE);
 662:	80 31       	cpi	r24, 0x10	; 16
 664:	08 f0       	brcs	.+2      	; 0x668 <ADC_init+0x6>
 666:	5f c0       	rjmp	.+190    	; 0x726 <ADC_init+0xc4>
 668:	68 30       	cpi	r22, 0x08	; 8
 66a:	08 f0       	brcs	.+2      	; 0x66e <ADC_init+0xc>
 66c:	5c c0       	rjmp	.+184    	; 0x726 <ADC_init+0xc4>
 66e:	44 30       	cpi	r20, 0x04	; 4
 670:	08 f0       	brcs	.+2      	; 0x674 <ADC_init+0x12>
 672:	59 c0       	rjmp	.+178    	; 0x726 <ADC_init+0xc4>
 674:	42 30       	cpi	r20, 0x02	; 2
 676:	09 f4       	brne	.+2      	; 0x67a <ADC_init+0x18>
 678:	56 c0       	rjmp	.+172    	; 0x726 <ADC_init+0xc4>
 67a:	96 b1       	in	r25, 0x06	; 6
 67c:	90 68       	ori	r25, 0x80	; 128
 67e:	96 b9       	out	0x06, r25	; 6
 680:	97 b1       	in	r25, 0x07	; 7
 682:	9e 7f       	andi	r25, 0xFE	; 254
 684:	58 2f       	mov	r21, r24
 686:	51 70       	andi	r21, 0x01	; 1
 688:	95 2b       	or	r25, r21
 68a:	97 b9       	out	0x07, r25	; 7
 68c:	97 b1       	in	r25, 0x07	; 7
 68e:	9d 7f       	andi	r25, 0xFD	; 253
 690:	58 2f       	mov	r21, r24
 692:	52 70       	andi	r21, 0x02	; 2
 694:	95 2b       	or	r25, r21
 696:	97 b9       	out	0x07, r25	; 7
 698:	97 b1       	in	r25, 0x07	; 7
 69a:	9b 7f       	andi	r25, 0xFB	; 251
 69c:	58 2f       	mov	r21, r24
 69e:	54 70       	andi	r21, 0x04	; 4
 6a0:	95 2b       	or	r25, r21
 6a2:	97 b9       	out	0x07, r25	; 7
 6a4:	97 b1       	in	r25, 0x07	; 7
 6a6:	97 7f       	andi	r25, 0xF7	; 247
 6a8:	58 2f       	mov	r21, r24
 6aa:	58 70       	andi	r21, 0x08	; 8
 6ac:	95 2b       	or	r25, r21
 6ae:	97 b9       	out	0x07, r25	; 7
 6b0:	97 b1       	in	r25, 0x07	; 7
 6b2:	9f 7e       	andi	r25, 0xEF	; 239
 6b4:	80 71       	andi	r24, 0x10	; 16
 6b6:	89 2b       	or	r24, r25
 6b8:	87 b9       	out	0x07, r24	; 7
 6ba:	87 b1       	in	r24, 0x07	; 7
 6bc:	8f 7d       	andi	r24, 0xDF	; 223
 6be:	87 b9       	out	0x07, r24	; 7
 6c0:	87 b1       	in	r24, 0x07	; 7
 6c2:	24 2f       	mov	r18, r20
 6c4:	21 70       	andi	r18, 0x01	; 1
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	00 24       	eor	r0, r0
 6ca:	36 95       	lsr	r19
 6cc:	27 95       	ror	r18
 6ce:	07 94       	ror	r0
 6d0:	36 95       	lsr	r19
 6d2:	27 95       	ror	r18
 6d4:	07 94       	ror	r0
 6d6:	32 2f       	mov	r19, r18
 6d8:	20 2d       	mov	r18, r0
 6da:	8f 7b       	andi	r24, 0xBF	; 191
 6dc:	28 2b       	or	r18, r24
 6de:	27 b9       	out	0x07, r18	; 7
 6e0:	27 b1       	in	r18, 0x07	; 7
 6e2:	94 2f       	mov	r25, r20
 6e4:	92 70       	andi	r25, 0x02	; 2
 6e6:	89 2f       	mov	r24, r25
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	95 95       	asr	r25
 6ec:	87 95       	ror	r24
 6ee:	96 95       	lsr	r25
 6f0:	98 2f       	mov	r25, r24
 6f2:	88 27       	eor	r24, r24
 6f4:	97 95       	ror	r25
 6f6:	87 95       	ror	r24
 6f8:	92 2f       	mov	r25, r18
 6fa:	9f 77       	andi	r25, 0x7F	; 127
 6fc:	89 2b       	or	r24, r25
 6fe:	87 b9       	out	0x07, r24	; 7
 700:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__data_end>
 704:	86 b1       	in	r24, 0x06	; 6
 706:	8e 7f       	andi	r24, 0xFE	; 254
 708:	96 2f       	mov	r25, r22
 70a:	91 70       	andi	r25, 0x01	; 1
 70c:	89 2b       	or	r24, r25
 70e:	86 b9       	out	0x06, r24	; 6
 710:	86 b1       	in	r24, 0x06	; 6
 712:	8d 7f       	andi	r24, 0xFD	; 253
 714:	96 2f       	mov	r25, r22
 716:	92 70       	andi	r25, 0x02	; 2
 718:	89 2b       	or	r24, r25
 71a:	86 b9       	out	0x06, r24	; 6
 71c:	86 b1       	in	r24, 0x06	; 6
 71e:	8b 7f       	andi	r24, 0xFB	; 251
 720:	64 70       	andi	r22, 0x04	; 4
 722:	68 2b       	or	r22, r24
 724:	66 b9       	out	0x06, r22	; 6
 726:	08 95       	ret

00000728 <ADC_set_channel>:
 728:	80 31       	cpi	r24, 0x10	; 16
 72a:	e8 f4       	brcc	.+58     	; 0x766 <ADC_set_channel+0x3e>
 72c:	97 b1       	in	r25, 0x07	; 7
 72e:	9e 7f       	andi	r25, 0xFE	; 254
 730:	28 2f       	mov	r18, r24
 732:	21 70       	andi	r18, 0x01	; 1
 734:	92 2b       	or	r25, r18
 736:	97 b9       	out	0x07, r25	; 7
 738:	97 b1       	in	r25, 0x07	; 7
 73a:	9d 7f       	andi	r25, 0xFD	; 253
 73c:	28 2f       	mov	r18, r24
 73e:	22 70       	andi	r18, 0x02	; 2
 740:	92 2b       	or	r25, r18
 742:	97 b9       	out	0x07, r25	; 7
 744:	97 b1       	in	r25, 0x07	; 7
 746:	9b 7f       	andi	r25, 0xFB	; 251
 748:	28 2f       	mov	r18, r24
 74a:	24 70       	andi	r18, 0x04	; 4
 74c:	92 2b       	or	r25, r18
 74e:	97 b9       	out	0x07, r25	; 7
 750:	97 b1       	in	r25, 0x07	; 7
 752:	97 7f       	andi	r25, 0xF7	; 247
 754:	28 2f       	mov	r18, r24
 756:	28 70       	andi	r18, 0x08	; 8
 758:	92 2b       	or	r25, r18
 75a:	97 b9       	out	0x07, r25	; 7
 75c:	97 b1       	in	r25, 0x07	; 7
 75e:	9f 7e       	andi	r25, 0xEF	; 239
 760:	80 71       	andi	r24, 0x10	; 16
 762:	89 2b       	or	r24, r25
 764:	87 b9       	out	0x07, r24	; 7
 766:	08 95       	ret

00000768 <ADC_set_auto_triggering>:
 768:	81 11       	cpse	r24, r1
 76a:	04 c0       	rjmp	.+8      	; 0x774 <ADC_set_auto_triggering+0xc>
 76c:	86 b1       	in	r24, 0x06	; 6
 76e:	8f 7d       	andi	r24, 0xDF	; 223
 770:	86 b9       	out	0x06, r24	; 6
 772:	08 95       	ret
 774:	e0 b7       	in	r30, 0x30	; 48
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	bc 01       	movw	r22, r24
 77c:	61 70       	andi	r22, 0x01	; 1
 77e:	77 27       	eor	r23, r23
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	62 95       	swap	r22
 786:	72 95       	swap	r23
 788:	70 7f       	andi	r23, 0xF0	; 240
 78a:	76 27       	eor	r23, r22
 78c:	60 7f       	andi	r22, 0xF0	; 240
 78e:	76 27       	eor	r23, r22
 790:	9e 2f       	mov	r25, r30
 792:	9f 7d       	andi	r25, 0xDF	; 223
 794:	69 2b       	or	r22, r25
 796:	60 bf       	out	0x30, r22	; 48
 798:	90 b7       	in	r25, 0x30	; 48
 79a:	81 fb       	bst	r24, 1
 79c:	44 27       	eor	r20, r20
 79e:	40 f9       	bld	r20, 0
 7a0:	50 e0       	ldi	r21, 0x00	; 0
 7a2:	00 24       	eor	r0, r0
 7a4:	56 95       	lsr	r21
 7a6:	47 95       	ror	r20
 7a8:	07 94       	ror	r0
 7aa:	56 95       	lsr	r21
 7ac:	47 95       	ror	r20
 7ae:	07 94       	ror	r0
 7b0:	54 2f       	mov	r21, r20
 7b2:	40 2d       	mov	r20, r0
 7b4:	9f 7b       	andi	r25, 0xBF	; 191
 7b6:	49 2b       	or	r20, r25
 7b8:	40 bf       	out	0x30, r20	; 48
 7ba:	90 b7       	in	r25, 0x30	; 48
 7bc:	82 fb       	bst	r24, 2
 7be:	22 27       	eor	r18, r18
 7c0:	20 f9       	bld	r18, 0
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	36 95       	lsr	r19
 7c6:	32 2f       	mov	r19, r18
 7c8:	22 27       	eor	r18, r18
 7ca:	37 95       	ror	r19
 7cc:	27 95       	ror	r18
 7ce:	89 2f       	mov	r24, r25
 7d0:	8f 77       	andi	r24, 0x7F	; 127
 7d2:	28 2b       	or	r18, r24
 7d4:	20 bf       	out	0x30, r18	; 48
 7d6:	08 95       	ret

000007d8 <ADC_get_current_vref>:
 7d8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 7dc:	08 95       	ret

000007de <ADC_start_conversion>:
 7de:	86 b1       	in	r24, 0x06	; 6
 7e0:	80 64       	ori	r24, 0x40	; 64
 7e2:	86 b9       	out	0x06, r24	; 6
 7e4:	08 95       	ret

000007e6 <ADC_read>:
}
uint16 ADC_read(ADC_channel_t channel)
{
	ADC_set_channel(channel);
 7e6:	0e 94 94 03 	call	0x728	; 0x728 <ADC_set_channel>
	
	ADC_start_conversion();
 7ea:	0e 94 ef 03 	call	0x7de	; 0x7de <ADC_start_conversion>
	while(GET_BIT(ADCSRA , ADIF) == 0);
 7ee:	34 9b       	sbis	0x06, 4	; 6
 7f0:	fe cf       	rjmp	.-4      	; 0x7ee <ADC_read+0x8>
	
	return  (ADCL + ADCH*256);
 7f2:	24 b1       	in	r18, 0x04	; 4
 7f4:	85 b1       	in	r24, 0x05	; 5
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	98 2f       	mov	r25, r24
 7fa:	88 27       	eor	r24, r24
}
 7fc:	82 0f       	add	r24, r18
 7fe:	91 1d       	adc	r25, r1
 800:	08 95       	ret

00000802 <__vector_16>:

ISR(ADC_vect)
{
 802:	1f 92       	push	r1
 804:	0f 92       	push	r0
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	0f 92       	push	r0
 80a:	11 24       	eor	r1, r1
 80c:	2f 93       	push	r18
 80e:	3f 93       	push	r19
 810:	4f 93       	push	r20
 812:	5f 93       	push	r21
 814:	6f 93       	push	r22
 816:	7f 93       	push	r23
 818:	8f 93       	push	r24
 81a:	9f 93       	push	r25
 81c:	af 93       	push	r26
 81e:	bf 93       	push	r27
 820:	ef 93       	push	r30
 822:	ff 93       	push	r31
	if(adc_isr != NULLPTR)
 824:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <adc_isr>
 828:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <adc_isr+0x1>
 82c:	30 97       	sbiw	r30, 0x00	; 0
 82e:	09 f0       	breq	.+2      	; 0x832 <__vector_16+0x30>
	{
		adc_isr();
 830:	09 95       	icall
	}
 832:	ff 91       	pop	r31
 834:	ef 91       	pop	r30
 836:	bf 91       	pop	r27
 838:	af 91       	pop	r26
 83a:	9f 91       	pop	r25
 83c:	8f 91       	pop	r24
 83e:	7f 91       	pop	r23
 840:	6f 91       	pop	r22
 842:	5f 91       	pop	r21
 844:	4f 91       	pop	r20
 846:	3f 91       	pop	r19
 848:	2f 91       	pop	r18
 84a:	0f 90       	pop	r0
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	0f 90       	pop	r0
 850:	1f 90       	pop	r1
 852:	18 95       	reti

00000854 <GPIO_init_pin>:
		{
			return;
		}
		else
		{
			PORT_CLEAR_MASK((*(direction_regisers[reg])),mask);
 854:	84 30       	cpi	r24, 0x04	; 4
 856:	10 f5       	brcc	.+68     	; 0x89c <__stack+0x3d>
 858:	68 30       	cpi	r22, 0x08	; 8
 85a:	10 f5       	brcc	.+68     	; 0x8a0 <__stack+0x41>
 85c:	42 30       	cpi	r20, 0x02	; 2
 85e:	10 f5       	brcc	.+68     	; 0x8a4 <__stack+0x45>
 860:	e8 2f       	mov	r30, r24
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	ee 0f       	add	r30, r30
 866:	ff 1f       	adc	r31, r31
 868:	e7 59       	subi	r30, 0x97	; 151
 86a:	ff 4f       	sbci	r31, 0xFF	; 255
 86c:	01 90       	ld	r0, Z+
 86e:	f0 81       	ld	r31, Z
 870:	e0 2d       	mov	r30, r0
 872:	20 81       	ld	r18, Z
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	06 2e       	mov	r0, r22
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
 87c:	88 0f       	add	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	0a 94       	dec	r0
 882:	e2 f7       	brpl	.-8      	; 0x87c <__stack+0x1d>
 884:	50 e0       	ldi	r21, 0x00	; 0
 886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
 888:	44 0f       	add	r20, r20
 88a:	55 1f       	adc	r21, r21
 88c:	6a 95       	dec	r22
 88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
 890:	80 95       	com	r24
 892:	82 23       	and	r24, r18
 894:	48 2b       	or	r20, r24
 896:	40 83       	st	Z, r20
 898:	80 e0       	ldi	r24, 0x00	; 0
 89a:	08 95       	ret
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	08 95       	ret
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	08 95       	ret
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	08 95       	ret

000008a8 <GPIO_init_port_set_mask>:
 8a8:	84 30       	cpi	r24, 0x04	; 4
 8aa:	60 f4       	brcc	.+24     	; 0x8c4 <GPIO_init_port_set_mask+0x1c>
 8ac:	e8 2f       	mov	r30, r24
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	ee 0f       	add	r30, r30
 8b2:	ff 1f       	adc	r31, r31
 8b4:	e7 59       	subi	r30, 0x97	; 151
 8b6:	ff 4f       	sbci	r31, 0xFF	; 255
 8b8:	01 90       	ld	r0, Z+
 8ba:	f0 81       	ld	r31, Z
 8bc:	e0 2d       	mov	r30, r0
 8be:	80 81       	ld	r24, Z
 8c0:	68 2b       	or	r22, r24
 8c2:	60 83       	st	Z, r22
 8c4:	08 95       	ret

000008c6 <GPIO_write_pin>:
//write functions

GPIO_state_t GPIO_write_pin(GPIO_port_name_t reg , uint8 pin , uint8 data)
{
		GPIO_state_t state = SUCCESS;
		if( NOT_VALID_PORT(reg) || NOT_VALID_PIN(pin) )
 8c6:	84 30       	cpi	r24, 0x04	; 4
 8c8:	00 f5       	brcc	.+64     	; 0x90a <GPIO_write_pin+0x44>
 8ca:	68 30       	cpi	r22, 0x08	; 8
 8cc:	00 f5       	brcc	.+64     	; 0x90e <GPIO_write_pin+0x48>
		{
			state = FAIL;
		}
		else
		{
			WRITE_BIT( (*(output_registers[reg])) , pin , data);
 8ce:	e8 2f       	mov	r30, r24
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	ee 0f       	add	r30, r30
 8d4:	ff 1f       	adc	r31, r31
 8d6:	ef 59       	subi	r30, 0x9F	; 159
 8d8:	ff 4f       	sbci	r31, 0xFF	; 255
 8da:	01 90       	ld	r0, Z+
 8dc:	f0 81       	ld	r31, Z
 8de:	e0 2d       	mov	r30, r0
 8e0:	20 81       	ld	r18, Z
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	06 2e       	mov	r0, r22
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <GPIO_write_pin+0x28>
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	0a 94       	dec	r0
 8f0:	e2 f7       	brpl	.-8      	; 0x8ea <GPIO_write_pin+0x24>
 8f2:	50 e0       	ldi	r21, 0x00	; 0
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <GPIO_write_pin+0x34>
 8f6:	44 0f       	add	r20, r20
 8f8:	55 1f       	adc	r21, r21
 8fa:	6a 95       	dec	r22
 8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <GPIO_write_pin+0x30>
 8fe:	80 95       	com	r24
 900:	82 23       	and	r24, r18
 902:	48 2b       	or	r20, r24
 904:	40 83       	st	Z, r20

//write functions

GPIO_state_t GPIO_write_pin(GPIO_port_name_t reg , uint8 pin , uint8 data)
{
		GPIO_state_t state = SUCCESS;
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	08 95       	ret
		if( NOT_VALID_PORT(reg) || NOT_VALID_PIN(pin) )
		{
			state = FAIL;
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	08 95       	ret
 90e:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			WRITE_BIT( (*(output_registers[reg])) , pin , data);
		}
		return state;
}
 910:	08 95       	ret

00000912 <GPIO_write_port>:
void GPIO_write_port(GPIO_port_name_t reg , uint8 data)
{
	if(NOT_VALID_PORT(reg))
 912:	84 30       	cpi	r24, 0x04	; 4
 914:	50 f4       	brcc	.+20     	; 0x92a <GPIO_write_port+0x18>
	{
		return ;
	}
	WRITE_PORT((*(output_registers[reg])) , data);
 916:	e8 2f       	mov	r30, r24
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	ee 0f       	add	r30, r30
 91c:	ff 1f       	adc	r31, r31
 91e:	ef 59       	subi	r30, 0x9F	; 159
 920:	ff 4f       	sbci	r31, 0xFF	; 255
 922:	01 90       	ld	r0, Z+
 924:	f0 81       	ld	r31, Z
 926:	e0 2d       	mov	r30, r0
 928:	60 83       	st	Z, r22
 92a:	08 95       	ret

0000092c <__vector_1>:
	return EXT_SUCCESS;
}


ISR(INT0_vect)
{
 92c:	1f 92       	push	r1
 92e:	0f 92       	push	r0
 930:	0f b6       	in	r0, 0x3f	; 63
 932:	0f 92       	push	r0
 934:	11 24       	eor	r1, r1
 936:	2f 93       	push	r18
 938:	3f 93       	push	r19
 93a:	4f 93       	push	r20
 93c:	5f 93       	push	r21
 93e:	6f 93       	push	r22
 940:	7f 93       	push	r23
 942:	8f 93       	push	r24
 944:	9f 93       	push	r25
 946:	af 93       	push	r26
 948:	bf 93       	push	r27
 94a:	ef 93       	push	r30
 94c:	ff 93       	push	r31
	EXT_int0_isr();
 94e:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <EXT_int0_isr>
 952:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <EXT_int0_isr+0x1>
 956:	09 95       	icall
}
 958:	ff 91       	pop	r31
 95a:	ef 91       	pop	r30
 95c:	bf 91       	pop	r27
 95e:	af 91       	pop	r26
 960:	9f 91       	pop	r25
 962:	8f 91       	pop	r24
 964:	7f 91       	pop	r23
 966:	6f 91       	pop	r22
 968:	5f 91       	pop	r21
 96a:	4f 91       	pop	r20
 96c:	3f 91       	pop	r19
 96e:	2f 91       	pop	r18
 970:	0f 90       	pop	r0
 972:	0f be       	out	0x3f, r0	; 63
 974:	0f 90       	pop	r0
 976:	1f 90       	pop	r1
 978:	18 95       	reti

0000097a <__vector_2>:
ISR(INT1_vect)
{
 97a:	1f 92       	push	r1
 97c:	0f 92       	push	r0
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	0f 92       	push	r0
 982:	11 24       	eor	r1, r1
 984:	2f 93       	push	r18
 986:	3f 93       	push	r19
 988:	4f 93       	push	r20
 98a:	5f 93       	push	r21
 98c:	6f 93       	push	r22
 98e:	7f 93       	push	r23
 990:	8f 93       	push	r24
 992:	9f 93       	push	r25
 994:	af 93       	push	r26
 996:	bf 93       	push	r27
 998:	ef 93       	push	r30
 99a:	ff 93       	push	r31
	EXT_int1_isr();
 99c:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <EXT_int1_isr>
 9a0:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <EXT_int1_isr+0x1>
 9a4:	09 95       	icall
}
 9a6:	ff 91       	pop	r31
 9a8:	ef 91       	pop	r30
 9aa:	bf 91       	pop	r27
 9ac:	af 91       	pop	r26
 9ae:	9f 91       	pop	r25
 9b0:	8f 91       	pop	r24
 9b2:	7f 91       	pop	r23
 9b4:	6f 91       	pop	r22
 9b6:	5f 91       	pop	r21
 9b8:	4f 91       	pop	r20
 9ba:	3f 91       	pop	r19
 9bc:	2f 91       	pop	r18
 9be:	0f 90       	pop	r0
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	0f 90       	pop	r0
 9c4:	1f 90       	pop	r1
 9c6:	18 95       	reti

000009c8 <__vector_3>:
ISR(INT2_vect)
{
 9c8:	1f 92       	push	r1
 9ca:	0f 92       	push	r0
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	0f 92       	push	r0
 9d0:	11 24       	eor	r1, r1
 9d2:	2f 93       	push	r18
 9d4:	3f 93       	push	r19
 9d6:	4f 93       	push	r20
 9d8:	5f 93       	push	r21
 9da:	6f 93       	push	r22
 9dc:	7f 93       	push	r23
 9de:	8f 93       	push	r24
 9e0:	9f 93       	push	r25
 9e2:	af 93       	push	r26
 9e4:	bf 93       	push	r27
 9e6:	ef 93       	push	r30
 9e8:	ff 93       	push	r31
	EXT_int2_isr();
 9ea:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <EXT_int2_isr>
 9ee:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <EXT_int2_isr+0x1>
 9f2:	09 95       	icall
 9f4:	ff 91       	pop	r31
 9f6:	ef 91       	pop	r30
 9f8:	bf 91       	pop	r27
 9fa:	af 91       	pop	r26
 9fc:	9f 91       	pop	r25
 9fe:	8f 91       	pop	r24
 a00:	7f 91       	pop	r23
 a02:	6f 91       	pop	r22
 a04:	5f 91       	pop	r21
 a06:	4f 91       	pop	r20
 a08:	3f 91       	pop	r19
 a0a:	2f 91       	pop	r18
 a0c:	0f 90       	pop	r0
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	0f 90       	pop	r0
 a12:	1f 90       	pop	r1
 a14:	18 95       	reti

00000a16 <TIMER0_init>:
}
void TIMER1_set_input_compare_callback(void (*isr)(void))
{
	if(isr != NULLPTR)
	{
		timer1_input_capture_isr = isr;
 a16:	84 30       	cpi	r24, 0x04	; 4
 a18:	08 f0       	brcs	.+2      	; 0xa1c <TIMER0_init+0x6>
 a1a:	55 c0       	rjmp	.+170    	; 0xac6 <TIMER0_init+0xb0>
 a1c:	44 30       	cpi	r20, 0x04	; 4
 a1e:	08 f0       	brcs	.+2      	; 0xa22 <TIMER0_init+0xc>
 a20:	52 c0       	rjmp	.+164    	; 0xac6 <TIMER0_init+0xb0>
 a22:	68 30       	cpi	r22, 0x08	; 8
 a24:	08 f0       	brcs	.+2      	; 0xa28 <TIMER0_init+0x12>
 a26:	4f c0       	rjmp	.+158    	; 0xac6 <TIMER0_init+0xb0>
 a28:	93 b7       	in	r25, 0x33	; 51
 a2a:	98 7f       	andi	r25, 0xF8	; 248
 a2c:	96 2b       	or	r25, r22
 a2e:	93 bf       	out	0x33, r25	; 51
 a30:	70 e0       	ldi	r23, 0x00	; 0
 a32:	70 93 9c 00 	sts	0x009C, r23	; 0x80009c <scaler0+0x1>
 a36:	60 93 9b 00 	sts	0x009B, r22	; 0x80009b <scaler0>
 a3a:	81 30       	cpi	r24, 0x01	; 1
 a3c:	69 f0       	breq	.+26     	; 0xa58 <TIMER0_init+0x42>
 a3e:	28 f0       	brcs	.+10     	; 0xa4a <TIMER0_init+0x34>
 a40:	82 30       	cpi	r24, 0x02	; 2
 a42:	89 f0       	breq	.+34     	; 0xa66 <TIMER0_init+0x50>
 a44:	83 30       	cpi	r24, 0x03	; 3
 a46:	b1 f0       	breq	.+44     	; 0xa74 <TIMER0_init+0x5e>
 a48:	1b c0       	rjmp	.+54     	; 0xa80 <TIMER0_init+0x6a>
 a4a:	83 b7       	in	r24, 0x33	; 51
 a4c:	8f 7b       	andi	r24, 0xBF	; 191
 a4e:	83 bf       	out	0x33, r24	; 51
 a50:	83 b7       	in	r24, 0x33	; 51
 a52:	87 7f       	andi	r24, 0xF7	; 247
 a54:	83 bf       	out	0x33, r24	; 51
 a56:	14 c0       	rjmp	.+40     	; 0xa80 <TIMER0_init+0x6a>
 a58:	83 b7       	in	r24, 0x33	; 51
 a5a:	80 64       	ori	r24, 0x40	; 64
 a5c:	83 bf       	out	0x33, r24	; 51
 a5e:	83 b7       	in	r24, 0x33	; 51
 a60:	87 7f       	andi	r24, 0xF7	; 247
 a62:	83 bf       	out	0x33, r24	; 51
 a64:	0d c0       	rjmp	.+26     	; 0xa80 <TIMER0_init+0x6a>
 a66:	83 b7       	in	r24, 0x33	; 51
 a68:	8f 7b       	andi	r24, 0xBF	; 191
 a6a:	83 bf       	out	0x33, r24	; 51
 a6c:	83 b7       	in	r24, 0x33	; 51
 a6e:	88 60       	ori	r24, 0x08	; 8
 a70:	83 bf       	out	0x33, r24	; 51
 a72:	06 c0       	rjmp	.+12     	; 0xa80 <TIMER0_init+0x6a>
 a74:	83 b7       	in	r24, 0x33	; 51
 a76:	80 64       	ori	r24, 0x40	; 64
 a78:	83 bf       	out	0x33, r24	; 51
 a7a:	83 b7       	in	r24, 0x33	; 51
 a7c:	88 60       	ori	r24, 0x08	; 8
 a7e:	83 bf       	out	0x33, r24	; 51
 a80:	41 30       	cpi	r20, 0x01	; 1
 a82:	69 f0       	breq	.+26     	; 0xa9e <TIMER0_init+0x88>
 a84:	28 f0       	brcs	.+10     	; 0xa90 <TIMER0_init+0x7a>
 a86:	42 30       	cpi	r20, 0x02	; 2
 a88:	89 f0       	breq	.+34     	; 0xaac <TIMER0_init+0x96>
 a8a:	43 30       	cpi	r20, 0x03	; 3
 a8c:	b1 f0       	breq	.+44     	; 0xaba <TIMER0_init+0xa4>
 a8e:	08 95       	ret
 a90:	83 b7       	in	r24, 0x33	; 51
 a92:	8f 7e       	andi	r24, 0xEF	; 239
 a94:	83 bf       	out	0x33, r24	; 51
 a96:	83 b7       	in	r24, 0x33	; 51
 a98:	8f 7d       	andi	r24, 0xDF	; 223
 a9a:	83 bf       	out	0x33, r24	; 51
 a9c:	08 95       	ret
 a9e:	83 b7       	in	r24, 0x33	; 51
 aa0:	80 61       	ori	r24, 0x10	; 16
 aa2:	83 bf       	out	0x33, r24	; 51
 aa4:	83 b7       	in	r24, 0x33	; 51
 aa6:	8f 7d       	andi	r24, 0xDF	; 223
 aa8:	83 bf       	out	0x33, r24	; 51
 aaa:	08 95       	ret
 aac:	83 b7       	in	r24, 0x33	; 51
 aae:	8f 7e       	andi	r24, 0xEF	; 239
 ab0:	83 bf       	out	0x33, r24	; 51
 ab2:	83 b7       	in	r24, 0x33	; 51
 ab4:	80 62       	ori	r24, 0x20	; 32
 ab6:	83 bf       	out	0x33, r24	; 51
 ab8:	08 95       	ret
 aba:	83 b7       	in	r24, 0x33	; 51
 abc:	80 61       	ori	r24, 0x10	; 16
 abe:	83 bf       	out	0x33, r24	; 51
 ac0:	83 b7       	in	r24, 0x33	; 51
 ac2:	80 62       	ori	r24, 0x20	; 32
 ac4:	83 bf       	out	0x33, r24	; 51
 ac6:	08 95       	ret

00000ac8 <TIMER0_compare_reload>:
 ac8:	8c bf       	out	0x3c, r24	; 60
 aca:	08 95       	ret

00000acc <__vector_10>:
	{	
		timer0_overflow_isr();
	}
}*/
ISR(TIMER0_COMP)
{
 acc:	1f 92       	push	r1
 ace:	0f 92       	push	r0
 ad0:	0f b6       	in	r0, 0x3f	; 63
 ad2:	0f 92       	push	r0
 ad4:	11 24       	eor	r1, r1
 ad6:	2f 93       	push	r18
 ad8:	3f 93       	push	r19
 ada:	4f 93       	push	r20
 adc:	5f 93       	push	r21
 ade:	6f 93       	push	r22
 ae0:	7f 93       	push	r23
 ae2:	8f 93       	push	r24
 ae4:	9f 93       	push	r25
 ae6:	af 93       	push	r26
 ae8:	bf 93       	push	r27
 aea:	ef 93       	push	r30
 aec:	ff 93       	push	r31
	if(timer0_compare_isr != NULLPTR)
 aee:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <timer0_compare_isr>
 af2:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <timer0_compare_isr+0x1>
 af6:	30 97       	sbiw	r30, 0x00	; 0
 af8:	09 f0       	breq	.+2      	; 0xafc <__vector_10+0x30>
	{
		timer0_compare_isr();
 afa:	09 95       	icall
	}
}
 afc:	ff 91       	pop	r31
 afe:	ef 91       	pop	r30
 b00:	bf 91       	pop	r27
 b02:	af 91       	pop	r26
 b04:	9f 91       	pop	r25
 b06:	8f 91       	pop	r24
 b08:	7f 91       	pop	r23
 b0a:	6f 91       	pop	r22
 b0c:	5f 91       	pop	r21
 b0e:	4f 91       	pop	r20
 b10:	3f 91       	pop	r19
 b12:	2f 91       	pop	r18
 b14:	0f 90       	pop	r0
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	0f 90       	pop	r0
 b1a:	1f 90       	pop	r1
 b1c:	18 95       	reti

00000b1e <__vector_9>:


ISR(TIMER1_OVF)
{
 b1e:	1f 92       	push	r1
 b20:	0f 92       	push	r0
 b22:	0f b6       	in	r0, 0x3f	; 63
 b24:	0f 92       	push	r0
 b26:	11 24       	eor	r1, r1
 b28:	2f 93       	push	r18
 b2a:	3f 93       	push	r19
 b2c:	4f 93       	push	r20
 b2e:	5f 93       	push	r21
 b30:	6f 93       	push	r22
 b32:	7f 93       	push	r23
 b34:	8f 93       	push	r24
 b36:	9f 93       	push	r25
 b38:	af 93       	push	r26
 b3a:	bf 93       	push	r27
 b3c:	ef 93       	push	r30
 b3e:	ff 93       	push	r31
	if(timer1_overflow_isr != NULLPTR)
 b40:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <timer1_overflow_isr>
 b44:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <timer1_overflow_isr+0x1>
 b48:	30 97       	sbiw	r30, 0x00	; 0
 b4a:	09 f0       	breq	.+2      	; 0xb4e <__vector_9+0x30>
	{
		timer1_overflow_isr();
 b4c:	09 95       	icall
	}
}
 b4e:	ff 91       	pop	r31
 b50:	ef 91       	pop	r30
 b52:	bf 91       	pop	r27
 b54:	af 91       	pop	r26
 b56:	9f 91       	pop	r25
 b58:	8f 91       	pop	r24
 b5a:	7f 91       	pop	r23
 b5c:	6f 91       	pop	r22
 b5e:	5f 91       	pop	r21
 b60:	4f 91       	pop	r20
 b62:	3f 91       	pop	r19
 b64:	2f 91       	pop	r18
 b66:	0f 90       	pop	r0
 b68:	0f be       	out	0x3f, r0	; 63
 b6a:	0f 90       	pop	r0
 b6c:	1f 90       	pop	r1
 b6e:	18 95       	reti

00000b70 <__vector_7>:

ISR(TIMER1_COMPA)
{
 b70:	1f 92       	push	r1
 b72:	0f 92       	push	r0
 b74:	0f b6       	in	r0, 0x3f	; 63
 b76:	0f 92       	push	r0
 b78:	11 24       	eor	r1, r1
 b7a:	2f 93       	push	r18
 b7c:	3f 93       	push	r19
 b7e:	4f 93       	push	r20
 b80:	5f 93       	push	r21
 b82:	6f 93       	push	r22
 b84:	7f 93       	push	r23
 b86:	8f 93       	push	r24
 b88:	9f 93       	push	r25
 b8a:	af 93       	push	r26
 b8c:	bf 93       	push	r27
 b8e:	ef 93       	push	r30
 b90:	ff 93       	push	r31
	if(timer1_compare_a_isr != NULLPTR)
 b92:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <timer1_compare_a_isr>
 b96:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <timer1_compare_a_isr+0x1>
 b9a:	30 97       	sbiw	r30, 0x00	; 0
 b9c:	09 f0       	breq	.+2      	; 0xba0 <__vector_7+0x30>
	{
		timer1_compare_a_isr();
 b9e:	09 95       	icall
	}
}
 ba0:	ff 91       	pop	r31
 ba2:	ef 91       	pop	r30
 ba4:	bf 91       	pop	r27
 ba6:	af 91       	pop	r26
 ba8:	9f 91       	pop	r25
 baa:	8f 91       	pop	r24
 bac:	7f 91       	pop	r23
 bae:	6f 91       	pop	r22
 bb0:	5f 91       	pop	r21
 bb2:	4f 91       	pop	r20
 bb4:	3f 91       	pop	r19
 bb6:	2f 91       	pop	r18
 bb8:	0f 90       	pop	r0
 bba:	0f be       	out	0x3f, r0	; 63
 bbc:	0f 90       	pop	r0
 bbe:	1f 90       	pop	r1
 bc0:	18 95       	reti

00000bc2 <__vector_8>:

ISR(TIMER1_COMPB)
{
 bc2:	1f 92       	push	r1
 bc4:	0f 92       	push	r0
 bc6:	0f b6       	in	r0, 0x3f	; 63
 bc8:	0f 92       	push	r0
 bca:	11 24       	eor	r1, r1
 bcc:	2f 93       	push	r18
 bce:	3f 93       	push	r19
 bd0:	4f 93       	push	r20
 bd2:	5f 93       	push	r21
 bd4:	6f 93       	push	r22
 bd6:	7f 93       	push	r23
 bd8:	8f 93       	push	r24
 bda:	9f 93       	push	r25
 bdc:	af 93       	push	r26
 bde:	bf 93       	push	r27
 be0:	ef 93       	push	r30
 be2:	ff 93       	push	r31
	if(timer1_compare_b_isr != NULLPTR)
 be4:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <timer1_compare_b_isr>
 be8:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <timer1_compare_b_isr+0x1>
 bec:	30 97       	sbiw	r30, 0x00	; 0
 bee:	09 f0       	breq	.+2      	; 0xbf2 <__vector_8+0x30>
	{
		timer1_compare_b_isr();
 bf0:	09 95       	icall
	}
}
 bf2:	ff 91       	pop	r31
 bf4:	ef 91       	pop	r30
 bf6:	bf 91       	pop	r27
 bf8:	af 91       	pop	r26
 bfa:	9f 91       	pop	r25
 bfc:	8f 91       	pop	r24
 bfe:	7f 91       	pop	r23
 c00:	6f 91       	pop	r22
 c02:	5f 91       	pop	r21
 c04:	4f 91       	pop	r20
 c06:	3f 91       	pop	r19
 c08:	2f 91       	pop	r18
 c0a:	0f 90       	pop	r0
 c0c:	0f be       	out	0x3f, r0	; 63
 c0e:	0f 90       	pop	r0
 c10:	1f 90       	pop	r1
 c12:	18 95       	reti

00000c14 <__vector_6>:

ISR(TIMER1_CAPT)
{
 c14:	1f 92       	push	r1
 c16:	0f 92       	push	r0
 c18:	0f b6       	in	r0, 0x3f	; 63
 c1a:	0f 92       	push	r0
 c1c:	11 24       	eor	r1, r1
 c1e:	2f 93       	push	r18
 c20:	3f 93       	push	r19
 c22:	4f 93       	push	r20
 c24:	5f 93       	push	r21
 c26:	6f 93       	push	r22
 c28:	7f 93       	push	r23
 c2a:	8f 93       	push	r24
 c2c:	9f 93       	push	r25
 c2e:	af 93       	push	r26
 c30:	bf 93       	push	r27
 c32:	ef 93       	push	r30
 c34:	ff 93       	push	r31
	if(timer1_input_capture_isr != NULLPTR)
 c36:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <timer1_input_capture_isr>
 c3a:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <timer1_input_capture_isr+0x1>
 c3e:	30 97       	sbiw	r30, 0x00	; 0
 c40:	09 f0       	breq	.+2      	; 0xc44 <__vector_6+0x30>
	{
		timer1_input_capture_isr();
 c42:	09 95       	icall
	}
}
 c44:	ff 91       	pop	r31
 c46:	ef 91       	pop	r30
 c48:	bf 91       	pop	r27
 c4a:	af 91       	pop	r26
 c4c:	9f 91       	pop	r25
 c4e:	8f 91       	pop	r24
 c50:	7f 91       	pop	r23
 c52:	6f 91       	pop	r22
 c54:	5f 91       	pop	r21
 c56:	4f 91       	pop	r20
 c58:	3f 91       	pop	r19
 c5a:	2f 91       	pop	r18
 c5c:	0f 90       	pop	r0
 c5e:	0f be       	out	0x3f, r0	; 63
 c60:	0f 90       	pop	r0
 c62:	1f 90       	pop	r1
 c64:	18 95       	reti

00000c66 <__divsf3>:
 c66:	0e 94 47 06 	call	0xc8e	; 0xc8e <__divsf3x>
 c6a:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_round>
 c6e:	0e 94 21 07 	call	0xe42	; 0xe42 <__fp_pscB>
 c72:	58 f0       	brcs	.+22     	; 0xc8a <__divsf3+0x24>
 c74:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fp_pscA>
 c78:	40 f0       	brcs	.+16     	; 0xc8a <__divsf3+0x24>
 c7a:	29 f4       	brne	.+10     	; 0xc86 <__divsf3+0x20>
 c7c:	5f 3f       	cpi	r21, 0xFF	; 255
 c7e:	29 f0       	breq	.+10     	; 0xc8a <__divsf3+0x24>
 c80:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>
 c84:	51 11       	cpse	r21, r1
 c86:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_szero>
 c8a:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_nan>

00000c8e <__divsf3x>:
 c8e:	0e 94 39 07 	call	0xe72	; 0xe72 <__fp_split3>
 c92:	68 f3       	brcs	.-38     	; 0xc6e <__divsf3+0x8>

00000c94 <__divsf3_pse>:
 c94:	99 23       	and	r25, r25
 c96:	b1 f3       	breq	.-20     	; 0xc84 <__divsf3+0x1e>
 c98:	55 23       	and	r21, r21
 c9a:	91 f3       	breq	.-28     	; 0xc80 <__divsf3+0x1a>
 c9c:	95 1b       	sub	r25, r21
 c9e:	55 0b       	sbc	r21, r21
 ca0:	bb 27       	eor	r27, r27
 ca2:	aa 27       	eor	r26, r26
 ca4:	62 17       	cp	r22, r18
 ca6:	73 07       	cpc	r23, r19
 ca8:	84 07       	cpc	r24, r20
 caa:	38 f0       	brcs	.+14     	; 0xcba <__divsf3_pse+0x26>
 cac:	9f 5f       	subi	r25, 0xFF	; 255
 cae:	5f 4f       	sbci	r21, 0xFF	; 255
 cb0:	22 0f       	add	r18, r18
 cb2:	33 1f       	adc	r19, r19
 cb4:	44 1f       	adc	r20, r20
 cb6:	aa 1f       	adc	r26, r26
 cb8:	a9 f3       	breq	.-22     	; 0xca4 <__divsf3_pse+0x10>
 cba:	35 d0       	rcall	.+106    	; 0xd26 <__divsf3_pse+0x92>
 cbc:	0e 2e       	mov	r0, r30
 cbe:	3a f0       	brmi	.+14     	; 0xcce <__divsf3_pse+0x3a>
 cc0:	e0 e8       	ldi	r30, 0x80	; 128
 cc2:	32 d0       	rcall	.+100    	; 0xd28 <__divsf3_pse+0x94>
 cc4:	91 50       	subi	r25, 0x01	; 1
 cc6:	50 40       	sbci	r21, 0x00	; 0
 cc8:	e6 95       	lsr	r30
 cca:	00 1c       	adc	r0, r0
 ccc:	ca f7       	brpl	.-14     	; 0xcc0 <__divsf3_pse+0x2c>
 cce:	2b d0       	rcall	.+86     	; 0xd26 <__divsf3_pse+0x92>
 cd0:	fe 2f       	mov	r31, r30
 cd2:	29 d0       	rcall	.+82     	; 0xd26 <__divsf3_pse+0x92>
 cd4:	66 0f       	add	r22, r22
 cd6:	77 1f       	adc	r23, r23
 cd8:	88 1f       	adc	r24, r24
 cda:	bb 1f       	adc	r27, r27
 cdc:	26 17       	cp	r18, r22
 cde:	37 07       	cpc	r19, r23
 ce0:	48 07       	cpc	r20, r24
 ce2:	ab 07       	cpc	r26, r27
 ce4:	b0 e8       	ldi	r27, 0x80	; 128
 ce6:	09 f0       	breq	.+2      	; 0xcea <__divsf3_pse+0x56>
 ce8:	bb 0b       	sbc	r27, r27
 cea:	80 2d       	mov	r24, r0
 cec:	bf 01       	movw	r22, r30
 cee:	ff 27       	eor	r31, r31
 cf0:	93 58       	subi	r25, 0x83	; 131
 cf2:	5f 4f       	sbci	r21, 0xFF	; 255
 cf4:	3a f0       	brmi	.+14     	; 0xd04 <__divsf3_pse+0x70>
 cf6:	9e 3f       	cpi	r25, 0xFE	; 254
 cf8:	51 05       	cpc	r21, r1
 cfa:	78 f0       	brcs	.+30     	; 0xd1a <__divsf3_pse+0x86>
 cfc:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>
 d00:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_szero>
 d04:	5f 3f       	cpi	r21, 0xFF	; 255
 d06:	e4 f3       	brlt	.-8      	; 0xd00 <__divsf3_pse+0x6c>
 d08:	98 3e       	cpi	r25, 0xE8	; 232
 d0a:	d4 f3       	brlt	.-12     	; 0xd00 <__divsf3_pse+0x6c>
 d0c:	86 95       	lsr	r24
 d0e:	77 95       	ror	r23
 d10:	67 95       	ror	r22
 d12:	b7 95       	ror	r27
 d14:	f7 95       	ror	r31
 d16:	9f 5f       	subi	r25, 0xFF	; 255
 d18:	c9 f7       	brne	.-14     	; 0xd0c <__divsf3_pse+0x78>
 d1a:	88 0f       	add	r24, r24
 d1c:	91 1d       	adc	r25, r1
 d1e:	96 95       	lsr	r25
 d20:	87 95       	ror	r24
 d22:	97 f9       	bld	r25, 7
 d24:	08 95       	ret
 d26:	e1 e0       	ldi	r30, 0x01	; 1
 d28:	66 0f       	add	r22, r22
 d2a:	77 1f       	adc	r23, r23
 d2c:	88 1f       	adc	r24, r24
 d2e:	bb 1f       	adc	r27, r27
 d30:	62 17       	cp	r22, r18
 d32:	73 07       	cpc	r23, r19
 d34:	84 07       	cpc	r24, r20
 d36:	ba 07       	cpc	r27, r26
 d38:	20 f0       	brcs	.+8      	; 0xd42 <__divsf3_pse+0xae>
 d3a:	62 1b       	sub	r22, r18
 d3c:	73 0b       	sbc	r23, r19
 d3e:	84 0b       	sbc	r24, r20
 d40:	ba 0b       	sbc	r27, r26
 d42:	ee 1f       	adc	r30, r30
 d44:	88 f7       	brcc	.-30     	; 0xd28 <__divsf3_pse+0x94>
 d46:	e0 95       	com	r30
 d48:	08 95       	ret

00000d4a <__fixunssfsi>:
 d4a:	0e 94 41 07 	call	0xe82	; 0xe82 <__fp_splitA>
 d4e:	88 f0       	brcs	.+34     	; 0xd72 <__fixunssfsi+0x28>
 d50:	9f 57       	subi	r25, 0x7F	; 127
 d52:	98 f0       	brcs	.+38     	; 0xd7a <__fixunssfsi+0x30>
 d54:	b9 2f       	mov	r27, r25
 d56:	99 27       	eor	r25, r25
 d58:	b7 51       	subi	r27, 0x17	; 23
 d5a:	b0 f0       	brcs	.+44     	; 0xd88 <__fixunssfsi+0x3e>
 d5c:	e1 f0       	breq	.+56     	; 0xd96 <__fixunssfsi+0x4c>
 d5e:	66 0f       	add	r22, r22
 d60:	77 1f       	adc	r23, r23
 d62:	88 1f       	adc	r24, r24
 d64:	99 1f       	adc	r25, r25
 d66:	1a f0       	brmi	.+6      	; 0xd6e <__fixunssfsi+0x24>
 d68:	ba 95       	dec	r27
 d6a:	c9 f7       	brne	.-14     	; 0xd5e <__fixunssfsi+0x14>
 d6c:	14 c0       	rjmp	.+40     	; 0xd96 <__fixunssfsi+0x4c>
 d6e:	b1 30       	cpi	r27, 0x01	; 1
 d70:	91 f0       	breq	.+36     	; 0xd96 <__fixunssfsi+0x4c>
 d72:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_zero>
 d76:	b1 e0       	ldi	r27, 0x01	; 1
 d78:	08 95       	ret
 d7a:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__fp_zero>
 d7e:	67 2f       	mov	r22, r23
 d80:	78 2f       	mov	r23, r24
 d82:	88 27       	eor	r24, r24
 d84:	b8 5f       	subi	r27, 0xF8	; 248
 d86:	39 f0       	breq	.+14     	; 0xd96 <__fixunssfsi+0x4c>
 d88:	b9 3f       	cpi	r27, 0xF9	; 249
 d8a:	cc f3       	brlt	.-14     	; 0xd7e <__fixunssfsi+0x34>
 d8c:	86 95       	lsr	r24
 d8e:	77 95       	ror	r23
 d90:	67 95       	ror	r22
 d92:	b3 95       	inc	r27
 d94:	d9 f7       	brne	.-10     	; 0xd8c <__fixunssfsi+0x42>
 d96:	3e f4       	brtc	.+14     	; 0xda6 <__fixunssfsi+0x5c>
 d98:	90 95       	com	r25
 d9a:	80 95       	com	r24
 d9c:	70 95       	com	r23
 d9e:	61 95       	neg	r22
 da0:	7f 4f       	sbci	r23, 0xFF	; 255
 da2:	8f 4f       	sbci	r24, 0xFF	; 255
 da4:	9f 4f       	sbci	r25, 0xFF	; 255
 da6:	08 95       	ret

00000da8 <__floatunsisf>:
 da8:	e8 94       	clt
 daa:	09 c0       	rjmp	.+18     	; 0xdbe <__floatsisf+0x12>

00000dac <__floatsisf>:
 dac:	97 fb       	bst	r25, 7
 dae:	3e f4       	brtc	.+14     	; 0xdbe <__floatsisf+0x12>
 db0:	90 95       	com	r25
 db2:	80 95       	com	r24
 db4:	70 95       	com	r23
 db6:	61 95       	neg	r22
 db8:	7f 4f       	sbci	r23, 0xFF	; 255
 dba:	8f 4f       	sbci	r24, 0xFF	; 255
 dbc:	9f 4f       	sbci	r25, 0xFF	; 255
 dbe:	99 23       	and	r25, r25
 dc0:	a9 f0       	breq	.+42     	; 0xdec <__floatsisf+0x40>
 dc2:	f9 2f       	mov	r31, r25
 dc4:	96 e9       	ldi	r25, 0x96	; 150
 dc6:	bb 27       	eor	r27, r27
 dc8:	93 95       	inc	r25
 dca:	f6 95       	lsr	r31
 dcc:	87 95       	ror	r24
 dce:	77 95       	ror	r23
 dd0:	67 95       	ror	r22
 dd2:	b7 95       	ror	r27
 dd4:	f1 11       	cpse	r31, r1
 dd6:	f8 cf       	rjmp	.-16     	; 0xdc8 <__floatsisf+0x1c>
 dd8:	fa f4       	brpl	.+62     	; 0xe18 <__floatsisf+0x6c>
 dda:	bb 0f       	add	r27, r27
 ddc:	11 f4       	brne	.+4      	; 0xde2 <__floatsisf+0x36>
 dde:	60 ff       	sbrs	r22, 0
 de0:	1b c0       	rjmp	.+54     	; 0xe18 <__floatsisf+0x6c>
 de2:	6f 5f       	subi	r22, 0xFF	; 255
 de4:	7f 4f       	sbci	r23, 0xFF	; 255
 de6:	8f 4f       	sbci	r24, 0xFF	; 255
 de8:	9f 4f       	sbci	r25, 0xFF	; 255
 dea:	16 c0       	rjmp	.+44     	; 0xe18 <__floatsisf+0x6c>
 dec:	88 23       	and	r24, r24
 dee:	11 f0       	breq	.+4      	; 0xdf4 <__floatsisf+0x48>
 df0:	96 e9       	ldi	r25, 0x96	; 150
 df2:	11 c0       	rjmp	.+34     	; 0xe16 <__floatsisf+0x6a>
 df4:	77 23       	and	r23, r23
 df6:	21 f0       	breq	.+8      	; 0xe00 <__floatsisf+0x54>
 df8:	9e e8       	ldi	r25, 0x8E	; 142
 dfa:	87 2f       	mov	r24, r23
 dfc:	76 2f       	mov	r23, r22
 dfe:	05 c0       	rjmp	.+10     	; 0xe0a <__floatsisf+0x5e>
 e00:	66 23       	and	r22, r22
 e02:	71 f0       	breq	.+28     	; 0xe20 <__floatsisf+0x74>
 e04:	96 e8       	ldi	r25, 0x86	; 134
 e06:	86 2f       	mov	r24, r22
 e08:	70 e0       	ldi	r23, 0x00	; 0
 e0a:	60 e0       	ldi	r22, 0x00	; 0
 e0c:	2a f0       	brmi	.+10     	; 0xe18 <__floatsisf+0x6c>
 e0e:	9a 95       	dec	r25
 e10:	66 0f       	add	r22, r22
 e12:	77 1f       	adc	r23, r23
 e14:	88 1f       	adc	r24, r24
 e16:	da f7       	brpl	.-10     	; 0xe0e <__floatsisf+0x62>
 e18:	88 0f       	add	r24, r24
 e1a:	96 95       	lsr	r25
 e1c:	87 95       	ror	r24
 e1e:	97 f9       	bld	r25, 7
 e20:	08 95       	ret

00000e22 <__fp_inf>:
 e22:	97 f9       	bld	r25, 7
 e24:	9f 67       	ori	r25, 0x7F	; 127
 e26:	80 e8       	ldi	r24, 0x80	; 128
 e28:	70 e0       	ldi	r23, 0x00	; 0
 e2a:	60 e0       	ldi	r22, 0x00	; 0
 e2c:	08 95       	ret

00000e2e <__fp_nan>:
 e2e:	9f ef       	ldi	r25, 0xFF	; 255
 e30:	80 ec       	ldi	r24, 0xC0	; 192
 e32:	08 95       	ret

00000e34 <__fp_pscA>:
 e34:	00 24       	eor	r0, r0
 e36:	0a 94       	dec	r0
 e38:	16 16       	cp	r1, r22
 e3a:	17 06       	cpc	r1, r23
 e3c:	18 06       	cpc	r1, r24
 e3e:	09 06       	cpc	r0, r25
 e40:	08 95       	ret

00000e42 <__fp_pscB>:
 e42:	00 24       	eor	r0, r0
 e44:	0a 94       	dec	r0
 e46:	12 16       	cp	r1, r18
 e48:	13 06       	cpc	r1, r19
 e4a:	14 06       	cpc	r1, r20
 e4c:	05 06       	cpc	r0, r21
 e4e:	08 95       	ret

00000e50 <__fp_round>:
 e50:	09 2e       	mov	r0, r25
 e52:	03 94       	inc	r0
 e54:	00 0c       	add	r0, r0
 e56:	11 f4       	brne	.+4      	; 0xe5c <__fp_round+0xc>
 e58:	88 23       	and	r24, r24
 e5a:	52 f0       	brmi	.+20     	; 0xe70 <__fp_round+0x20>
 e5c:	bb 0f       	add	r27, r27
 e5e:	40 f4       	brcc	.+16     	; 0xe70 <__fp_round+0x20>
 e60:	bf 2b       	or	r27, r31
 e62:	11 f4       	brne	.+4      	; 0xe68 <__fp_round+0x18>
 e64:	60 ff       	sbrs	r22, 0
 e66:	04 c0       	rjmp	.+8      	; 0xe70 <__fp_round+0x20>
 e68:	6f 5f       	subi	r22, 0xFF	; 255
 e6a:	7f 4f       	sbci	r23, 0xFF	; 255
 e6c:	8f 4f       	sbci	r24, 0xFF	; 255
 e6e:	9f 4f       	sbci	r25, 0xFF	; 255
 e70:	08 95       	ret

00000e72 <__fp_split3>:
 e72:	57 fd       	sbrc	r21, 7
 e74:	90 58       	subi	r25, 0x80	; 128
 e76:	44 0f       	add	r20, r20
 e78:	55 1f       	adc	r21, r21
 e7a:	59 f0       	breq	.+22     	; 0xe92 <__fp_splitA+0x10>
 e7c:	5f 3f       	cpi	r21, 0xFF	; 255
 e7e:	71 f0       	breq	.+28     	; 0xe9c <__fp_splitA+0x1a>
 e80:	47 95       	ror	r20

00000e82 <__fp_splitA>:
 e82:	88 0f       	add	r24, r24
 e84:	97 fb       	bst	r25, 7
 e86:	99 1f       	adc	r25, r25
 e88:	61 f0       	breq	.+24     	; 0xea2 <__fp_splitA+0x20>
 e8a:	9f 3f       	cpi	r25, 0xFF	; 255
 e8c:	79 f0       	breq	.+30     	; 0xeac <__fp_splitA+0x2a>
 e8e:	87 95       	ror	r24
 e90:	08 95       	ret
 e92:	12 16       	cp	r1, r18
 e94:	13 06       	cpc	r1, r19
 e96:	14 06       	cpc	r1, r20
 e98:	55 1f       	adc	r21, r21
 e9a:	f2 cf       	rjmp	.-28     	; 0xe80 <__fp_split3+0xe>
 e9c:	46 95       	lsr	r20
 e9e:	f1 df       	rcall	.-30     	; 0xe82 <__fp_splitA>
 ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <__fp_splitA+0x30>
 ea2:	16 16       	cp	r1, r22
 ea4:	17 06       	cpc	r1, r23
 ea6:	18 06       	cpc	r1, r24
 ea8:	99 1f       	adc	r25, r25
 eaa:	f1 cf       	rjmp	.-30     	; 0xe8e <__fp_splitA+0xc>
 eac:	86 95       	lsr	r24
 eae:	71 05       	cpc	r23, r1
 eb0:	61 05       	cpc	r22, r1
 eb2:	08 94       	sec
 eb4:	08 95       	ret

00000eb6 <__fp_zero>:
 eb6:	e8 94       	clt

00000eb8 <__fp_szero>:
 eb8:	bb 27       	eor	r27, r27
 eba:	66 27       	eor	r22, r22
 ebc:	77 27       	eor	r23, r23
 ebe:	cb 01       	movw	r24, r22
 ec0:	97 f9       	bld	r25, 7
 ec2:	08 95       	ret

00000ec4 <__mulsf3>:
 ec4:	0e 94 75 07 	call	0xeea	; 0xeea <__mulsf3x>
 ec8:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__fp_round>
 ecc:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fp_pscA>
 ed0:	38 f0       	brcs	.+14     	; 0xee0 <__mulsf3+0x1c>
 ed2:	0e 94 21 07 	call	0xe42	; 0xe42 <__fp_pscB>
 ed6:	20 f0       	brcs	.+8      	; 0xee0 <__mulsf3+0x1c>
 ed8:	95 23       	and	r25, r21
 eda:	11 f0       	breq	.+4      	; 0xee0 <__mulsf3+0x1c>
 edc:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>
 ee0:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_nan>
 ee4:	11 24       	eor	r1, r1
 ee6:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_szero>

00000eea <__mulsf3x>:
 eea:	0e 94 39 07 	call	0xe72	; 0xe72 <__fp_split3>
 eee:	70 f3       	brcs	.-36     	; 0xecc <__mulsf3+0x8>

00000ef0 <__mulsf3_pse>:
 ef0:	95 9f       	mul	r25, r21
 ef2:	c1 f3       	breq	.-16     	; 0xee4 <__mulsf3+0x20>
 ef4:	95 0f       	add	r25, r21
 ef6:	50 e0       	ldi	r21, 0x00	; 0
 ef8:	55 1f       	adc	r21, r21
 efa:	62 9f       	mul	r22, r18
 efc:	f0 01       	movw	r30, r0
 efe:	72 9f       	mul	r23, r18
 f00:	bb 27       	eor	r27, r27
 f02:	f0 0d       	add	r31, r0
 f04:	b1 1d       	adc	r27, r1
 f06:	63 9f       	mul	r22, r19
 f08:	aa 27       	eor	r26, r26
 f0a:	f0 0d       	add	r31, r0
 f0c:	b1 1d       	adc	r27, r1
 f0e:	aa 1f       	adc	r26, r26
 f10:	64 9f       	mul	r22, r20
 f12:	66 27       	eor	r22, r22
 f14:	b0 0d       	add	r27, r0
 f16:	a1 1d       	adc	r26, r1
 f18:	66 1f       	adc	r22, r22
 f1a:	82 9f       	mul	r24, r18
 f1c:	22 27       	eor	r18, r18
 f1e:	b0 0d       	add	r27, r0
 f20:	a1 1d       	adc	r26, r1
 f22:	62 1f       	adc	r22, r18
 f24:	73 9f       	mul	r23, r19
 f26:	b0 0d       	add	r27, r0
 f28:	a1 1d       	adc	r26, r1
 f2a:	62 1f       	adc	r22, r18
 f2c:	83 9f       	mul	r24, r19
 f2e:	a0 0d       	add	r26, r0
 f30:	61 1d       	adc	r22, r1
 f32:	22 1f       	adc	r18, r18
 f34:	74 9f       	mul	r23, r20
 f36:	33 27       	eor	r19, r19
 f38:	a0 0d       	add	r26, r0
 f3a:	61 1d       	adc	r22, r1
 f3c:	23 1f       	adc	r18, r19
 f3e:	84 9f       	mul	r24, r20
 f40:	60 0d       	add	r22, r0
 f42:	21 1d       	adc	r18, r1
 f44:	82 2f       	mov	r24, r18
 f46:	76 2f       	mov	r23, r22
 f48:	6a 2f       	mov	r22, r26
 f4a:	11 24       	eor	r1, r1
 f4c:	9f 57       	subi	r25, 0x7F	; 127
 f4e:	50 40       	sbci	r21, 0x00	; 0
 f50:	9a f0       	brmi	.+38     	; 0xf78 <__mulsf3_pse+0x88>
 f52:	f1 f0       	breq	.+60     	; 0xf90 <__mulsf3_pse+0xa0>
 f54:	88 23       	and	r24, r24
 f56:	4a f0       	brmi	.+18     	; 0xf6a <__mulsf3_pse+0x7a>
 f58:	ee 0f       	add	r30, r30
 f5a:	ff 1f       	adc	r31, r31
 f5c:	bb 1f       	adc	r27, r27
 f5e:	66 1f       	adc	r22, r22
 f60:	77 1f       	adc	r23, r23
 f62:	88 1f       	adc	r24, r24
 f64:	91 50       	subi	r25, 0x01	; 1
 f66:	50 40       	sbci	r21, 0x00	; 0
 f68:	a9 f7       	brne	.-22     	; 0xf54 <__mulsf3_pse+0x64>
 f6a:	9e 3f       	cpi	r25, 0xFE	; 254
 f6c:	51 05       	cpc	r21, r1
 f6e:	80 f0       	brcs	.+32     	; 0xf90 <__mulsf3_pse+0xa0>
 f70:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_inf>
 f74:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__fp_szero>
 f78:	5f 3f       	cpi	r21, 0xFF	; 255
 f7a:	e4 f3       	brlt	.-8      	; 0xf74 <__mulsf3_pse+0x84>
 f7c:	98 3e       	cpi	r25, 0xE8	; 232
 f7e:	d4 f3       	brlt	.-12     	; 0xf74 <__mulsf3_pse+0x84>
 f80:	86 95       	lsr	r24
 f82:	77 95       	ror	r23
 f84:	67 95       	ror	r22
 f86:	b7 95       	ror	r27
 f88:	f7 95       	ror	r31
 f8a:	e7 95       	ror	r30
 f8c:	9f 5f       	subi	r25, 0xFF	; 255
 f8e:	c1 f7       	brne	.-16     	; 0xf80 <__mulsf3_pse+0x90>
 f90:	fe 2b       	or	r31, r30
 f92:	88 0f       	add	r24, r24
 f94:	91 1d       	adc	r25, r1
 f96:	96 95       	lsr	r25
 f98:	87 95       	ror	r24
 f9a:	97 f9       	bld	r25, 7
 f9c:	08 95       	ret

00000f9e <__umulhisi3>:
 f9e:	a2 9f       	mul	r26, r18
 fa0:	b0 01       	movw	r22, r0
 fa2:	b3 9f       	mul	r27, r19
 fa4:	c0 01       	movw	r24, r0
 fa6:	a3 9f       	mul	r26, r19
 fa8:	70 0d       	add	r23, r0
 faa:	81 1d       	adc	r24, r1
 fac:	11 24       	eor	r1, r1
 fae:	91 1d       	adc	r25, r1
 fb0:	b2 9f       	mul	r27, r18
 fb2:	70 0d       	add	r23, r0
 fb4:	81 1d       	adc	r24, r1
 fb6:	11 24       	eor	r1, r1
 fb8:	91 1d       	adc	r25, r1
 fba:	08 95       	ret

00000fbc <_exit>:
 fbc:	f8 94       	cli

00000fbe <__stop_program>:
 fbe:	ff cf       	rjmp	.-2      	; 0xfbe <__stop_program>
