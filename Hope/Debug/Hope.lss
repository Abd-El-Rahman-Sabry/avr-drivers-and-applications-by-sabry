
Hope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001008  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001008  0000109c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800090  00800090  000010cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c67  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db3  00000000  00000000  00004117  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001704  00000000  00000000  00004eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000914  00000000  00000000  000065d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018e8  00000000  00000000  00006ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018b8  00000000  00000000  000087cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_1>
       8:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__vector_2>
       c:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__vector_6>
      1c:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__vector_7>
      20:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_8>
      24:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_9>
      28:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 00 04 	jmp	0x800	; 0x800 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a6 02 	call	0x54c	; 0x54c <main>
      8a:	0c 94 02 08 	jmp	0x1004	; 0x1004 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_write_data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
      96:	40 e0       	ldi	r20, 0x00	; 0
      98:	65 e0       	ldi	r22, 0x05	; 5
      9a:	82 e0       	ldi	r24, 0x02	; 2
      9c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
      a0:	41 e0       	ldi	r20, 0x01	; 1
      a2:	64 e0       	ldi	r22, 0x04	; 4
      a4:	82 e0       	ldi	r24, 0x02	; 2
      a6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
      aa:	4c 2f       	mov	r20, r28
      ac:	40 71       	andi	r20, 0x10	; 16
      ae:	50 e0       	ldi	r21, 0x00	; 0
      b0:	55 95       	asr	r21
      b2:	47 95       	ror	r20
      b4:	55 95       	asr	r21
      b6:	47 95       	ror	r20
      b8:	55 95       	asr	r21
      ba:	47 95       	ror	r20
      bc:	55 95       	asr	r21
      be:	47 95       	ror	r20
      c0:	60 e0       	ldi	r22, 0x00	; 0
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
      c8:	4c 2f       	mov	r20, r28
      ca:	40 72       	andi	r20, 0x20	; 32
      cc:	50 e0       	ldi	r21, 0x00	; 0
      ce:	55 95       	asr	r21
      d0:	47 95       	ror	r20
      d2:	55 95       	asr	r21
      d4:	47 95       	ror	r20
      d6:	55 95       	asr	r21
      d8:	47 95       	ror	r20
      da:	55 95       	asr	r21
      dc:	47 95       	ror	r20
      de:	55 95       	asr	r21
      e0:	47 95       	ror	r20
      e2:	61 e0       	ldi	r22, 0x01	; 1
      e4:	82 e0       	ldi	r24, 0x02	; 2
      e6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
      ea:	4c 2f       	mov	r20, r28
      ec:	40 74       	andi	r20, 0x40	; 64
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	04 2e       	mov	r0, r20
      f2:	45 2f       	mov	r20, r21
      f4:	00 0c       	add	r0, r0
      f6:	44 1f       	adc	r20, r20
      f8:	55 0b       	sbc	r21, r21
      fa:	00 0c       	add	r0, r0
      fc:	44 1f       	adc	r20, r20
      fe:	55 1f       	adc	r21, r21
     100:	62 e0       	ldi	r22, 0x02	; 2
     102:	82 e0       	ldi	r24, 0x02	; 2
     104:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     108:	4c 2f       	mov	r20, r28
     10a:	44 1f       	adc	r20, r20
     10c:	44 27       	eor	r20, r20
     10e:	44 1f       	adc	r20, r20
     110:	63 e0       	ldi	r22, 0x03	; 3
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     118:	41 e0       	ldi	r20, 0x01	; 1
     11a:	66 e0       	ldi	r22, 0x06	; 6
     11c:	82 e0       	ldi	r24, 0x02	; 2
     11e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     122:	83 ef       	ldi	r24, 0xF3	; 243
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	f1 f7       	brne	.-4      	; 0x126 <lcd_write_data+0x94>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_write_data+0x9a>
     12c:	00 00       	nop
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	66 e0       	ldi	r22, 0x06	; 6
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     138:	83 ef       	ldi	r24, 0xF3	; 243
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_write_data+0xaa>
     140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_write_data+0xb0>
     142:	00 00       	nop
     144:	4c 2f       	mov	r20, r28
     146:	41 70       	andi	r20, 0x01	; 1
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     150:	4c 2f       	mov	r20, r28
     152:	42 70       	andi	r20, 0x02	; 2
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	55 95       	asr	r21
     158:	47 95       	ror	r20
     15a:	61 e0       	ldi	r22, 0x01	; 1
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     162:	4c 2f       	mov	r20, r28
     164:	44 70       	andi	r20, 0x04	; 4
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	55 95       	asr	r21
     16a:	47 95       	ror	r20
     16c:	55 95       	asr	r21
     16e:	47 95       	ror	r20
     170:	62 e0       	ldi	r22, 0x02	; 2
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     178:	c8 70       	andi	r28, 0x08	; 8
     17a:	4c 2f       	mov	r20, r28
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	55 95       	asr	r21
     180:	47 95       	ror	r20
     182:	55 95       	asr	r21
     184:	47 95       	ror	r20
     186:	55 95       	asr	r21
     188:	47 95       	ror	r20
     18a:	63 e0       	ldi	r22, 0x03	; 3
     18c:	82 e0       	ldi	r24, 0x02	; 2
     18e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     192:	41 e0       	ldi	r20, 0x01	; 1
     194:	66 e0       	ldi	r22, 0x06	; 6
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     19c:	83 ef       	ldi	r24, 0xF3	; 243
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_write_data+0x10e>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_write_data+0x114>
     1a6:	00 00       	nop
     1a8:	40 e0       	ldi	r20, 0x00	; 0
     1aa:	66 e0       	ldi	r22, 0x06	; 6
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     1b2:	83 ef       	ldi	r24, 0xF3	; 243
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_write_data+0x124>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_write_data+0x12a>
     1bc:	00 00       	nop
     1be:	cf 91       	pop	r28
     1c0:	08 95       	ret

000001c2 <lcd_write_command>:
     1c2:	cf 93       	push	r28
     1c4:	c8 2f       	mov	r28, r24
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	65 e0       	ldi	r22, 0x05	; 5
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	64 e0       	ldi	r22, 0x04	; 4
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     1da:	4c 2f       	mov	r20, r28
     1dc:	40 71       	andi	r20, 0x10	; 16
     1de:	50 e0       	ldi	r21, 0x00	; 0
     1e0:	55 95       	asr	r21
     1e2:	47 95       	ror	r20
     1e4:	55 95       	asr	r21
     1e6:	47 95       	ror	r20
     1e8:	55 95       	asr	r21
     1ea:	47 95       	ror	r20
     1ec:	55 95       	asr	r21
     1ee:	47 95       	ror	r20
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     1f8:	4c 2f       	mov	r20, r28
     1fa:	40 72       	andi	r20, 0x20	; 32
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	55 95       	asr	r21
     200:	47 95       	ror	r20
     202:	55 95       	asr	r21
     204:	47 95       	ror	r20
     206:	55 95       	asr	r21
     208:	47 95       	ror	r20
     20a:	55 95       	asr	r21
     20c:	47 95       	ror	r20
     20e:	55 95       	asr	r21
     210:	47 95       	ror	r20
     212:	61 e0       	ldi	r22, 0x01	; 1
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     21a:	4c 2f       	mov	r20, r28
     21c:	40 74       	andi	r20, 0x40	; 64
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	04 2e       	mov	r0, r20
     222:	45 2f       	mov	r20, r21
     224:	00 0c       	add	r0, r0
     226:	44 1f       	adc	r20, r20
     228:	55 0b       	sbc	r21, r21
     22a:	00 0c       	add	r0, r0
     22c:	44 1f       	adc	r20, r20
     22e:	55 1f       	adc	r21, r21
     230:	62 e0       	ldi	r22, 0x02	; 2
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     238:	4c 2f       	mov	r20, r28
     23a:	44 1f       	adc	r20, r20
     23c:	44 27       	eor	r20, r20
     23e:	44 1f       	adc	r20, r20
     240:	63 e0       	ldi	r22, 0x03	; 3
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     248:	41 e0       	ldi	r20, 0x01	; 1
     24a:	66 e0       	ldi	r22, 0x06	; 6
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     252:	83 ef       	ldi	r24, 0xF3	; 243
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <lcd_write_command+0x94>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_write_command+0x9a>
     25c:	00 00       	nop
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	66 e0       	ldi	r22, 0x06	; 6
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     268:	83 ef       	ldi	r24, 0xF3	; 243
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_write_command+0xaa>
     270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_write_command+0xb0>
     272:	00 00       	nop
     274:	4c 2f       	mov	r20, r28
     276:	41 70       	andi	r20, 0x01	; 1
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     280:	4c 2f       	mov	r20, r28
     282:	42 70       	andi	r20, 0x02	; 2
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	55 95       	asr	r21
     288:	47 95       	ror	r20
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     292:	4c 2f       	mov	r20, r28
     294:	44 70       	andi	r20, 0x04	; 4
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	55 95       	asr	r21
     29a:	47 95       	ror	r20
     29c:	55 95       	asr	r21
     29e:	47 95       	ror	r20
     2a0:	62 e0       	ldi	r22, 0x02	; 2
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     2a8:	c8 70       	andi	r28, 0x08	; 8
     2aa:	4c 2f       	mov	r20, r28
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	55 95       	asr	r21
     2b0:	47 95       	ror	r20
     2b2:	55 95       	asr	r21
     2b4:	47 95       	ror	r20
     2b6:	55 95       	asr	r21
     2b8:	47 95       	ror	r20
     2ba:	63 e0       	ldi	r22, 0x03	; 3
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     2c2:	41 e0       	ldi	r20, 0x01	; 1
     2c4:	66 e0       	ldi	r22, 0x06	; 6
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     2cc:	83 ef       	ldi	r24, 0xF3	; 243
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_write_command+0x10e>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_write_command+0x114>
     2d6:	00 00       	nop
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	66 e0       	ldi	r22, 0x06	; 6
     2dc:	82 e0       	ldi	r24, 0x02	; 2
     2de:	0e 94 62 04 	call	0x8c4	; 0x8c4 <GPIO_write_pin>
     2e2:	83 ef       	ldi	r24, 0xF3	; 243
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_write_command+0x124>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <lcd_write_command+0x12a>
     2ec:	00 00       	nop
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <LCD_Init>:
     2f2:	41 e0       	ldi	r20, 0x01	; 1
     2f4:	64 e0       	ldi	r22, 0x04	; 4
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	0e 94 29 04 	call	0x852	; 0x852 <GPIO_init_pin>
     2fc:	41 e0       	ldi	r20, 0x01	; 1
     2fe:	66 e0       	ldi	r22, 0x06	; 6
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	0e 94 29 04 	call	0x852	; 0x852 <GPIO_init_pin>
     306:	41 e0       	ldi	r20, 0x01	; 1
     308:	65 e0       	ldi	r22, 0x05	; 5
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	0e 94 29 04 	call	0x852	; 0x852 <GPIO_init_pin>
     310:	41 e0       	ldi	r20, 0x01	; 1
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	0e 94 29 04 	call	0x852	; 0x852 <GPIO_init_pin>
     31a:	41 e0       	ldi	r20, 0x01	; 1
     31c:	61 e0       	ldi	r22, 0x01	; 1
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	0e 94 29 04 	call	0x852	; 0x852 <GPIO_init_pin>
     324:	41 e0       	ldi	r20, 0x01	; 1
     326:	62 e0       	ldi	r22, 0x02	; 2
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	0e 94 29 04 	call	0x852	; 0x852 <GPIO_init_pin>
     32e:	41 e0       	ldi	r20, 0x01	; 1
     330:	63 e0       	ldi	r22, 0x03	; 3
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	0e 94 29 04 	call	0x852	; 0x852 <GPIO_init_pin>
     338:	85 ea       	ldi	r24, 0xA5	; 165
     33a:	9e e0       	ldi	r25, 0x0E	; 14
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_Init+0x4a>
     340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_Init+0x50>
     342:	00 00       	nop
     344:	83 e3       	ldi	r24, 0x33	; 51
     346:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
     34a:	91 e2       	ldi	r25, 0x21	; 33
     34c:	9a 95       	dec	r25
     34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_Init+0x5a>
     350:	00 00       	nop
     352:	82 e3       	ldi	r24, 0x32	; 50
     354:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
     358:	81 e2       	ldi	r24, 0x21	; 33
     35a:	8a 95       	dec	r24
     35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_Init+0x68>
     35e:	00 00       	nop
     360:	88 e2       	ldi	r24, 0x28	; 40
     362:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
     366:	91 e2       	ldi	r25, 0x21	; 33
     368:	9a 95       	dec	r25
     36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_Init+0x76>
     36c:	00 00       	nop
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
     374:	83 ef       	ldi	r24, 0xF3	; 243
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <LCD_Init+0x86>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_Init+0x8c>
     37e:	00 00       	nop
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
     386:	83 ef       	ldi	r24, 0xF3	; 243
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_Init+0x98>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_Init+0x9e>
     390:	00 00       	nop
     392:	8c e0       	ldi	r24, 0x0C	; 12
     394:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
     398:	91 e2       	ldi	r25, 0x21	; 33
     39a:	9a 95       	dec	r25
     39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_Init+0xa8>
     39e:	00 00       	nop
     3a0:	08 95       	ret

000003a2 <LCD_write_char>:
     3a2:	18 16       	cp	r1, r24
     3a4:	14 f4       	brge	.+4      	; 0x3aa <LCD_write_char+0x8>
     3a6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_data>
     3aa:	08 95       	ret

000003ac <LCD_write_string>:
{
	lcd_write_command(0x01);
	_delay_ms(2);
}
void LCD_write_string(sint8 *str)
{
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	8c 01       	movw	r16, r24
	uint8 c = 0;
     3b4:	c0 e0       	ldi	r28, 0x00	; 0
	while ( str[c] )
     3b6:	03 c0       	rjmp	.+6      	; 0x3be <LCD_write_string+0x12>
	{
		LCD_write_char(str[c++]);
     3b8:	cf 5f       	subi	r28, 0xFF	; 255
     3ba:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_write_char>
	_delay_ms(2);
}
void LCD_write_string(sint8 *str)
{
	uint8 c = 0;
	while ( str[c] )
     3be:	f8 01       	movw	r30, r16
     3c0:	ec 0f       	add	r30, r28
     3c2:	f1 1d       	adc	r31, r1
     3c4:	80 81       	ld	r24, Z
     3c6:	81 11       	cpse	r24, r1
     3c8:	f7 cf       	rjmp	.-18     	; 0x3b8 <LCD_write_string+0xc>
	{
		LCD_write_char(str[c++]);
	}
}
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	08 95       	ret

000003d2 <LCD_go_to>:

void LCD_go_to(uint8 row , uint8 col)
{
	if(row == 1)
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	39 f4       	brne	.+14     	; 0x3e4 <LCD_go_to+0x12>
	{
		if(col < MAX_COL)
     3d6:	60 31       	cpi	r22, 0x10	; 16
     3d8:	68 f4       	brcc	.+26     	; 0x3f4 <LCD_go_to+0x22>
		{
			lcd_write_command((0x80+col));
     3da:	80 e8       	ldi	r24, 0x80	; 128
     3dc:	86 0f       	add	r24, r22
     3de:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
     3e2:	08 95       	ret
		}
	}
	else if(row == 2)
     3e4:	82 30       	cpi	r24, 0x02	; 2
     3e6:	31 f4       	brne	.+12     	; 0x3f4 <LCD_go_to+0x22>
	{
		if(col < MAX_COL)
     3e8:	60 31       	cpi	r22, 0x10	; 16
     3ea:	20 f4       	brcc	.+8      	; 0x3f4 <LCD_go_to+0x22>
		{
			lcd_write_command((0xC0+col));
     3ec:	80 ec       	ldi	r24, 0xC0	; 192
     3ee:	86 0f       	add	r24, r22
     3f0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
     3f4:	08 95       	ret

000003f6 <LCD_write_number>:
		}
	}
}
void LCD_write_number(uint32 n)
{
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	2a 97       	sbiw	r28, 0x0a	; 10
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	ac 01       	movw	r20, r24
	uint8 i = 0 , j , digits[10];
	if(n == 0)
     40e:	89 2b       	or	r24, r25
     410:	91 f5       	brne	.+100    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
		lcd_write_data('0');
     412:	80 e3       	ldi	r24, 0x30	; 48
     414:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_data>
     418:	42 c0       	rjmp	.+132    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
	else {
		while(n)
		{
			digits[i] = (uint8)(n%10 + '0');
     41a:	9a 01       	movw	r18, r20
     41c:	ad ec       	ldi	r26, 0xCD	; 205
     41e:	bc ec       	ldi	r27, 0xCC	; 204
     420:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__umulhisi3>
     424:	96 95       	lsr	r25
     426:	87 95       	ror	r24
     428:	96 95       	lsr	r25
     42a:	87 95       	ror	r24
     42c:	96 95       	lsr	r25
     42e:	87 95       	ror	r24
     430:	9c 01       	movw	r18, r24
     432:	22 0f       	add	r18, r18
     434:	33 1f       	adc	r19, r19
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	88 0f       	add	r24, r24
     43c:	99 1f       	adc	r25, r25
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	82 0f       	add	r24, r18
     444:	93 1f       	adc	r25, r19
     446:	9a 01       	movw	r18, r20
     448:	28 1b       	sub	r18, r24
     44a:	39 0b       	sbc	r19, r25
     44c:	c9 01       	movw	r24, r18
     44e:	80 5d       	subi	r24, 0xD0	; 208
     450:	e1 e0       	ldi	r30, 0x01	; 1
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	ec 0f       	add	r30, r28
     456:	fd 1f       	adc	r31, r29
     458:	e1 0f       	add	r30, r17
     45a:	f1 1d       	adc	r31, r1
     45c:	80 83       	st	Z, r24
			n = n / 10;
     45e:	9a 01       	movw	r18, r20
     460:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__umulhisi3>
     464:	ac 01       	movw	r20, r24
     466:	56 95       	lsr	r21
     468:	47 95       	ror	r20
     46a:	56 95       	lsr	r21
     46c:	47 95       	ror	r20
     46e:	56 95       	lsr	r21
     470:	47 95       	ror	r20
			i++;
     472:	1f 5f       	subi	r17, 0xFF	; 255
     474:	01 c0       	rjmp	.+2      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     476:	10 e0       	ldi	r17, 0x00	; 0
{
	uint8 i = 0 , j , digits[10];
	if(n == 0)
		lcd_write_data('0');
	else {
		while(n)
     478:	41 15       	cp	r20, r1
     47a:	51 05       	cpc	r21, r1
     47c:	71 f6       	brne	.-100    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     47e:	0d c0       	rjmp	.+26     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
		{
			lcd_write_data(digits[j-1]);
     480:	e1 2f       	mov	r30, r17
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	31 97       	sbiw	r30, 0x01	; 1
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	8c 0f       	add	r24, r28
     48c:	9d 1f       	adc	r25, r29
     48e:	e8 0f       	add	r30, r24
     490:	f9 1f       	adc	r31, r25
     492:	80 81       	ld	r24, Z
     494:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_data>
		{
			digits[i] = (uint8)(n%10 + '0');
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
     498:	11 50       	subi	r17, 0x01	; 1
     49a:	11 11       	cpse	r17, r1
     49c:	f1 cf       	rjmp	.-30     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
		{
			lcd_write_data(digits[j-1]);
		}
	}
}
     49e:	2a 96       	adiw	r28, 0x0a	; 10
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	08 95       	ret

000004b2 <LCD_clear_next_chars>:
void LCD_clear_next_chars(uint8 n)
{
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	d8 2f       	mov	r29, r24
	for(uint8 i = 0 ; i < n ; i++)
     4b8:	c0 e0       	ldi	r28, 0x00	; 0
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <LCD_clear_next_chars+0x12>
		LCD_write_char(' ');
     4bc:	80 e2       	ldi	r24, 0x20	; 32
     4be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_write_char>
		}
	}
}
void LCD_clear_next_chars(uint8 n)
{
	for(uint8 i = 0 ; i < n ; i++)
     4c2:	cf 5f       	subi	r28, 0xFF	; 255
     4c4:	cd 17       	cp	r28, r29
     4c6:	d0 f3       	brcs	.-12     	; 0x4bc <LCD_clear_next_chars+0xa>
		LCD_write_char(' ');
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	08 95       	ret

000004ce <LM53_Temp_Sensor_Init>:
#include "LM35.h"
static ADC_channel_t lm_channel = -1;

void LM53_Temp_Sensor_Init(ADC_channel_t channel)
{
	lm_channel = channel;
     4ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     4d2:	08 95       	ret

000004d4 <LM35_Get_Temperature>:
}
uint16 LM35_Get_Temperature()
{
     4d4:	cf 93       	push	r28
	if(lm_channel == -1)
		return -1;
	
	
	ADC_voltage_reference_t vr = ADC_get_current_vref();
     4d6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <ADC_get_current_vref>
     4da:	c8 2f       	mov	r28, r24
	
	uint16 data = ADC_read(lm_channel);
     4dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4e0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <ADC_read>
	
	if(vr == AVCC_pin_External_Cap_At_AREF_pin)
     4e4:	c1 30       	cpi	r28, 0x01	; 1
     4e6:	b1 f4       	brne	.+44     	; 0x514 <LM35_Get_Temperature+0x40>
	{
		return (data*4.88/10);
     4e8:	bc 01       	movw	r22, r24
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__floatunsisf>
     4f2:	26 ef       	ldi	r18, 0xF6	; 246
     4f4:	38 e2       	ldi	r19, 0x28	; 40
     4f6:	4c e9       	ldi	r20, 0x9C	; 156
     4f8:	50 e4       	ldi	r21, 0x40	; 64
     4fa:	0e 94 86 07 	call	0xf0c	; 0xf0c <__mulsf3>
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e2       	ldi	r20, 0x20	; 32
     504:	51 e4       	ldi	r21, 0x41	; 65
     506:	0e 94 57 06 	call	0xcae	; 0xcae <__divsf3>
     50a:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fixunssfsi>
     50e:	26 2f       	mov	r18, r22
     510:	97 2f       	mov	r25, r23
     512:	19 c0       	rjmp	.+50     	; 0x546 <LM35_Get_Temperature+0x72>
	}
	else if(vr == Internal_2560mV)
     514:	c3 30       	cpi	r28, 0x03	; 3
     516:	b1 f4       	brne	.+44     	; 0x544 <LM35_Get_Temperature+0x70>
	{
		return (data*2.5/10);
     518:	bc 01       	movw	r22, r24
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__floatunsisf>
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 e2       	ldi	r20, 0x20	; 32
     528:	50 e4       	ldi	r21, 0x40	; 64
     52a:	0e 94 86 07 	call	0xf0c	; 0xf0c <__mulsf3>
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e2       	ldi	r20, 0x20	; 32
     534:	51 e4       	ldi	r21, 0x41	; 65
     536:	0e 94 57 06 	call	0xcae	; 0xcae <__divsf3>
     53a:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fixunssfsi>
     53e:	26 2f       	mov	r18, r22
     540:	97 2f       	mov	r25, r23
     542:	01 c0       	rjmp	.+2      	; 0x546 <LM35_Get_Temperature+0x72>
	}
     544:	01 c0       	rjmp	.+2      	; 0x548 <LM35_Get_Temperature+0x74>
     546:	82 2f       	mov	r24, r18
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <main>:


int main(void)
{
	//Initialize LCD for debugging
	LCD_Init();
     54c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Init>
	//Set input for the push button
	GPIO_init_pin(GPIO_B , PIN_1 , GPIO_PIN_INPUT);
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	0e 94 29 04 	call	0x852	; 0x852 <GPIO_init_pin>
	//set output for the LEDs and the buzzer 
	GPIO_init_port_set_mask(GPIO_D,0xf0);
     55a:	60 ef       	ldi	r22, 0xF0	; 240
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <GPIO_init_port_set_mask>
	
	//Initialize the ADC
	ADC_init(Channel_2_ADC2,ADC_prescaler_128,Internal_2560mV);
     562:	43 e0       	ldi	r20, 0x03	; 3
     564:	67 e0       	ldi	r22, 0x07	; 7
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	0e 94 30 03 	call	0x660	; 0x660 <ADC_init>
	ADC_set_auto_triggering(Free_Running_Mode);
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	0e 94 b3 03 	call	0x766	; 0x766 <ADC_set_auto_triggering>
	
	//Initialize the sensor
	LM53_Temp_Sensor_Init(Channel_6_ADC6);
     572:	86 e0       	ldi	r24, 0x06	; 6
     574:	0e 94 67 02 	call	0x4ce	; 0x4ce <LM53_Temp_Sensor_Init>
	
	
	
	LCD_write_string("Lm35 test :");
     578:	89 e7       	ldi	r24, 0x79	; 121
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_write_string>
	//Initialize the timer to be used with PWM mode
	TIMER0_init(TIMER0_PHASE_CORRECTION_PWM,TIMER0_PRESCALER_1024,TIMER0_OCO_NON_INVERTING);
     580:	42 e0       	ldi	r20, 0x02	; 2
     582:	65 e0       	ldi	r22, 0x05	; 5
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	0e 94 2f 05 	call	0xa5e	; 0xa5e <TIMER0_init>

    while (1) 
    {
		
		LCD_go_to(2 , 0);
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_go_to>
		LCD_write_string("temp : ");
     592:	85 e8       	ldi	r24, 0x85	; 133
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_write_string>
		//Read Temperature
		temp = LM35_Get_Temperature();
     59a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LM35_Get_Temperature>
     59e:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <temp+0x1>
     5a2:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <temp>
		
		
		LCD_write_number(temp);
     5a6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_write_number>
		LCD_write_string("oC");
     5aa:	8d e8       	ldi	r24, 0x8D	; 141
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_write_string>
		LCD_clear_next_chars(1);
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_clear_next_chars>
		
		if(!critical_flag)
     5b8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     5bc:	81 11       	cpse	r24, r1
     5be:	2e c0       	rjmp	.+92     	; 0x61c <main+0xd0>
			if(temp < 20)
     5c0:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <temp>
     5c4:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <temp+0x1>
     5c8:	84 31       	cpi	r24, 0x14	; 20
     5ca:	91 05       	cpc	r25, r1
     5cc:	40 f4       	brcc	.+16     	; 0x5de <main+0x92>
			{
				GPIO_write_port(GPIO_D , 1<<4);
     5ce:	60 e1       	ldi	r22, 0x10	; 16
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	0e 94 88 04 	call	0x910	; 0x910 <GPIO_write_port>
				TIMER0_compare_reload(0);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 88 05 	call	0xb10	; 0xb10 <TIMER0_compare_reload>
     5dc:	1f c0       	rjmp	.+62     	; 0x61c <main+0xd0>
			}
			else if(temp >= 20 && temp < 40)
     5de:	44 97       	sbiw	r24, 0x14	; 20
     5e0:	44 97       	sbiw	r24, 0x14	; 20
     5e2:	e0 f4       	brcc	.+56     	; 0x61c <main+0xd0>
			{
				GPIO_write_port(GPIO_D , 1<<5);
     5e4:	60 e2       	ldi	r22, 0x20	; 32
     5e6:	83 e0       	ldi	r24, 0x03	; 3
     5e8:	0e 94 88 04 	call	0x910	; 0x910 <GPIO_write_port>
				TIMER0_compare_reload((temp - 20)*255/20);
     5ec:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <temp>
     5f0:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <temp+0x1>
     5f4:	4f ef       	ldi	r20, 0xFF	; 255
     5f6:	48 9f       	mul	r20, r24
     5f8:	90 01       	movw	r18, r0
     5fa:	49 9f       	mul	r20, r25
     5fc:	30 0d       	add	r19, r0
     5fe:	11 24       	eor	r1, r1
     600:	2c 5e       	subi	r18, 0xEC	; 236
     602:	33 41       	sbci	r19, 0x13	; 19
     604:	ad ec       	ldi	r26, 0xCD	; 205
     606:	bc ec       	ldi	r27, 0xCC	; 204
     608:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__umulhisi3>
     60c:	92 95       	swap	r25
     60e:	82 95       	swap	r24
     610:	8f 70       	andi	r24, 0x0F	; 15
     612:	89 27       	eor	r24, r25
     614:	9f 70       	andi	r25, 0x0F	; 15
     616:	89 27       	eor	r24, r25
     618:	0e 94 88 05 	call	0xb10	; 0xb10 <TIMER0_compare_reload>
			}
		
		
		
		if( temp >= 40 || critical_flag)
     61c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <temp>
     620:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <temp+0x1>
     624:	88 97       	sbiw	r24, 0x28	; 40
     626:	20 f4       	brcc	.+8      	; 0x630 <main+0xe4>
     628:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     62c:	88 23       	and	r24, r24
     62e:	39 f0       	breq	.+14     	; 0x63e <main+0xf2>
		{
			critical_flag = HIGH;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
			3<<6
			00000011  
			<<<   
			11000000 
			*/
			GPIO_write_port(GPIO_D , 3<<6);	
     636:	60 ec       	ldi	r22, 0xC0	; 192
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	0e 94 88 04 	call	0x910	; 0x910 <GPIO_write_port>
		}
		
		//
		if(GPIO_read_pin(GPIO_B , PIN_1) && temp < 40 )
     63e:	61 e0       	ldi	r22, 0x01	; 1
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 95 04 	call	0x92a	; 0x92a <GPIO_read_pin>
     646:	88 23       	and	r24, r24
     648:	09 f4       	brne	.+2      	; 0x64c <main+0x100>
     64a:	9f cf       	rjmp	.-194    	; 0x58a <main+0x3e>
     64c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <temp>
     650:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <temp+0x1>
     654:	88 97       	sbiw	r24, 0x28	; 40
     656:	08 f0       	brcs	.+2      	; 0x65a <main+0x10e>
     658:	98 cf       	rjmp	.-208    	; 0x58a <main+0x3e>
		{
			critical_flag = LOW;
     65a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__data_end>
     65e:	95 cf       	rjmp	.-214    	; 0x58a <main+0x3e>

00000660 <ADC_init>:
{
	SET_BIT(ADCSRA , ADIE);
}
void ADC_clear_interrupt()
{
	CLEAR_BIT(ADCSRA , ADIE);
     660:	80 31       	cpi	r24, 0x10	; 16
     662:	08 f0       	brcs	.+2      	; 0x666 <ADC_init+0x6>
     664:	5f c0       	rjmp	.+190    	; 0x724 <ADC_init+0xc4>
     666:	68 30       	cpi	r22, 0x08	; 8
     668:	08 f0       	brcs	.+2      	; 0x66c <ADC_init+0xc>
     66a:	5c c0       	rjmp	.+184    	; 0x724 <ADC_init+0xc4>
     66c:	44 30       	cpi	r20, 0x04	; 4
     66e:	08 f0       	brcs	.+2      	; 0x672 <ADC_init+0x12>
     670:	59 c0       	rjmp	.+178    	; 0x724 <ADC_init+0xc4>
     672:	42 30       	cpi	r20, 0x02	; 2
     674:	09 f4       	brne	.+2      	; 0x678 <ADC_init+0x18>
     676:	56 c0       	rjmp	.+172    	; 0x724 <ADC_init+0xc4>
     678:	96 b1       	in	r25, 0x06	; 6
     67a:	90 68       	ori	r25, 0x80	; 128
     67c:	96 b9       	out	0x06, r25	; 6
     67e:	97 b1       	in	r25, 0x07	; 7
     680:	9e 7f       	andi	r25, 0xFE	; 254
     682:	58 2f       	mov	r21, r24
     684:	51 70       	andi	r21, 0x01	; 1
     686:	95 2b       	or	r25, r21
     688:	97 b9       	out	0x07, r25	; 7
     68a:	97 b1       	in	r25, 0x07	; 7
     68c:	9d 7f       	andi	r25, 0xFD	; 253
     68e:	58 2f       	mov	r21, r24
     690:	52 70       	andi	r21, 0x02	; 2
     692:	95 2b       	or	r25, r21
     694:	97 b9       	out	0x07, r25	; 7
     696:	97 b1       	in	r25, 0x07	; 7
     698:	9b 7f       	andi	r25, 0xFB	; 251
     69a:	58 2f       	mov	r21, r24
     69c:	54 70       	andi	r21, 0x04	; 4
     69e:	95 2b       	or	r25, r21
     6a0:	97 b9       	out	0x07, r25	; 7
     6a2:	97 b1       	in	r25, 0x07	; 7
     6a4:	97 7f       	andi	r25, 0xF7	; 247
     6a6:	58 2f       	mov	r21, r24
     6a8:	58 70       	andi	r21, 0x08	; 8
     6aa:	95 2b       	or	r25, r21
     6ac:	97 b9       	out	0x07, r25	; 7
     6ae:	97 b1       	in	r25, 0x07	; 7
     6b0:	9f 7e       	andi	r25, 0xEF	; 239
     6b2:	80 71       	andi	r24, 0x10	; 16
     6b4:	89 2b       	or	r24, r25
     6b6:	87 b9       	out	0x07, r24	; 7
     6b8:	87 b1       	in	r24, 0x07	; 7
     6ba:	8f 7d       	andi	r24, 0xDF	; 223
     6bc:	87 b9       	out	0x07, r24	; 7
     6be:	87 b1       	in	r24, 0x07	; 7
     6c0:	24 2f       	mov	r18, r20
     6c2:	21 70       	andi	r18, 0x01	; 1
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	00 24       	eor	r0, r0
     6c8:	36 95       	lsr	r19
     6ca:	27 95       	ror	r18
     6cc:	07 94       	ror	r0
     6ce:	36 95       	lsr	r19
     6d0:	27 95       	ror	r18
     6d2:	07 94       	ror	r0
     6d4:	32 2f       	mov	r19, r18
     6d6:	20 2d       	mov	r18, r0
     6d8:	8f 7b       	andi	r24, 0xBF	; 191
     6da:	28 2b       	or	r18, r24
     6dc:	27 b9       	out	0x07, r18	; 7
     6de:	27 b1       	in	r18, 0x07	; 7
     6e0:	94 2f       	mov	r25, r20
     6e2:	92 70       	andi	r25, 0x02	; 2
     6e4:	89 2f       	mov	r24, r25
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	95 95       	asr	r25
     6ea:	87 95       	ror	r24
     6ec:	96 95       	lsr	r25
     6ee:	98 2f       	mov	r25, r24
     6f0:	88 27       	eor	r24, r24
     6f2:	97 95       	ror	r25
     6f4:	87 95       	ror	r24
     6f6:	92 2f       	mov	r25, r18
     6f8:	9f 77       	andi	r25, 0x7F	; 127
     6fa:	89 2b       	or	r24, r25
     6fc:	87 b9       	out	0x07, r24	; 7
     6fe:	40 93 91 00 	sts	0x0091, r20	; 0x800091 <Vref>
     702:	86 b1       	in	r24, 0x06	; 6
     704:	8e 7f       	andi	r24, 0xFE	; 254
     706:	96 2f       	mov	r25, r22
     708:	91 70       	andi	r25, 0x01	; 1
     70a:	89 2b       	or	r24, r25
     70c:	86 b9       	out	0x06, r24	; 6
     70e:	86 b1       	in	r24, 0x06	; 6
     710:	8d 7f       	andi	r24, 0xFD	; 253
     712:	96 2f       	mov	r25, r22
     714:	92 70       	andi	r25, 0x02	; 2
     716:	89 2b       	or	r24, r25
     718:	86 b9       	out	0x06, r24	; 6
     71a:	86 b1       	in	r24, 0x06	; 6
     71c:	8b 7f       	andi	r24, 0xFB	; 251
     71e:	64 70       	andi	r22, 0x04	; 4
     720:	68 2b       	or	r22, r24
     722:	66 b9       	out	0x06, r22	; 6
     724:	08 95       	ret

00000726 <ADC_set_channel>:
     726:	80 31       	cpi	r24, 0x10	; 16
     728:	e8 f4       	brcc	.+58     	; 0x764 <ADC_set_channel+0x3e>
     72a:	97 b1       	in	r25, 0x07	; 7
     72c:	9e 7f       	andi	r25, 0xFE	; 254
     72e:	28 2f       	mov	r18, r24
     730:	21 70       	andi	r18, 0x01	; 1
     732:	92 2b       	or	r25, r18
     734:	97 b9       	out	0x07, r25	; 7
     736:	97 b1       	in	r25, 0x07	; 7
     738:	9d 7f       	andi	r25, 0xFD	; 253
     73a:	28 2f       	mov	r18, r24
     73c:	22 70       	andi	r18, 0x02	; 2
     73e:	92 2b       	or	r25, r18
     740:	97 b9       	out	0x07, r25	; 7
     742:	97 b1       	in	r25, 0x07	; 7
     744:	9b 7f       	andi	r25, 0xFB	; 251
     746:	28 2f       	mov	r18, r24
     748:	24 70       	andi	r18, 0x04	; 4
     74a:	92 2b       	or	r25, r18
     74c:	97 b9       	out	0x07, r25	; 7
     74e:	97 b1       	in	r25, 0x07	; 7
     750:	97 7f       	andi	r25, 0xF7	; 247
     752:	28 2f       	mov	r18, r24
     754:	28 70       	andi	r18, 0x08	; 8
     756:	92 2b       	or	r25, r18
     758:	97 b9       	out	0x07, r25	; 7
     75a:	97 b1       	in	r25, 0x07	; 7
     75c:	9f 7e       	andi	r25, 0xEF	; 239
     75e:	80 71       	andi	r24, 0x10	; 16
     760:	89 2b       	or	r24, r25
     762:	87 b9       	out	0x07, r24	; 7
     764:	08 95       	ret

00000766 <ADC_set_auto_triggering>:
     766:	81 11       	cpse	r24, r1
     768:	04 c0       	rjmp	.+8      	; 0x772 <ADC_set_auto_triggering+0xc>
     76a:	86 b1       	in	r24, 0x06	; 6
     76c:	8f 7d       	andi	r24, 0xDF	; 223
     76e:	86 b9       	out	0x06, r24	; 6
     770:	08 95       	ret
     772:	e0 b7       	in	r30, 0x30	; 48
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	bc 01       	movw	r22, r24
     77a:	61 70       	andi	r22, 0x01	; 1
     77c:	77 27       	eor	r23, r23
     77e:	66 0f       	add	r22, r22
     780:	77 1f       	adc	r23, r23
     782:	62 95       	swap	r22
     784:	72 95       	swap	r23
     786:	70 7f       	andi	r23, 0xF0	; 240
     788:	76 27       	eor	r23, r22
     78a:	60 7f       	andi	r22, 0xF0	; 240
     78c:	76 27       	eor	r23, r22
     78e:	9e 2f       	mov	r25, r30
     790:	9f 7d       	andi	r25, 0xDF	; 223
     792:	69 2b       	or	r22, r25
     794:	60 bf       	out	0x30, r22	; 48
     796:	90 b7       	in	r25, 0x30	; 48
     798:	81 fb       	bst	r24, 1
     79a:	44 27       	eor	r20, r20
     79c:	40 f9       	bld	r20, 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	00 24       	eor	r0, r0
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	07 94       	ror	r0
     7a8:	56 95       	lsr	r21
     7aa:	47 95       	ror	r20
     7ac:	07 94       	ror	r0
     7ae:	54 2f       	mov	r21, r20
     7b0:	40 2d       	mov	r20, r0
     7b2:	9f 7b       	andi	r25, 0xBF	; 191
     7b4:	49 2b       	or	r20, r25
     7b6:	40 bf       	out	0x30, r20	; 48
     7b8:	90 b7       	in	r25, 0x30	; 48
     7ba:	82 fb       	bst	r24, 2
     7bc:	22 27       	eor	r18, r18
     7be:	20 f9       	bld	r18, 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	36 95       	lsr	r19
     7c4:	32 2f       	mov	r19, r18
     7c6:	22 27       	eor	r18, r18
     7c8:	37 95       	ror	r19
     7ca:	27 95       	ror	r18
     7cc:	89 2f       	mov	r24, r25
     7ce:	8f 77       	andi	r24, 0x7F	; 127
     7d0:	28 2b       	or	r18, r24
     7d2:	20 bf       	out	0x30, r18	; 48
     7d4:	08 95       	ret

000007d6 <ADC_get_current_vref>:
     7d6:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <Vref>
     7da:	08 95       	ret

000007dc <ADC_start_conversion>:
     7dc:	86 b1       	in	r24, 0x06	; 6
     7de:	80 64       	ori	r24, 0x40	; 64
     7e0:	86 b9       	out	0x06, r24	; 6
     7e2:	08 95       	ret

000007e4 <ADC_read>:
}
uint16 ADC_read(ADC_channel_t channel)
{
	ADC_set_channel(channel);
     7e4:	0e 94 93 03 	call	0x726	; 0x726 <ADC_set_channel>
	
	ADC_start_conversion();
     7e8:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ADC_start_conversion>
	while(GET_BIT(ADCSRA , ADIF) == 0);
     7ec:	34 9b       	sbis	0x06, 4	; 6
     7ee:	fe cf       	rjmp	.-4      	; 0x7ec <ADC_read+0x8>
	
	return  (ADCL + ADCH*256);
     7f0:	24 b1       	in	r18, 0x04	; 4
     7f2:	85 b1       	in	r24, 0x05	; 5
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	98 2f       	mov	r25, r24
     7f8:	88 27       	eor	r24, r24
}
     7fa:	82 0f       	add	r24, r18
     7fc:	91 1d       	adc	r25, r1
     7fe:	08 95       	ret

00000800 <__vector_16>:

ISR(ADC_vect)
{
     800:	1f 92       	push	r1
     802:	0f 92       	push	r0
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	0f 92       	push	r0
     808:	11 24       	eor	r1, r1
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
	if(adc_isr != NULLPTR)
     822:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <adc_isr>
     826:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <adc_isr+0x1>
     82a:	30 97       	sbiw	r30, 0x00	; 0
     82c:	09 f0       	breq	.+2      	; 0x830 <__vector_16+0x30>
	{
		adc_isr();
     82e:	09 95       	icall
	}
     830:	ff 91       	pop	r31
     832:	ef 91       	pop	r30
     834:	bf 91       	pop	r27
     836:	af 91       	pop	r26
     838:	9f 91       	pop	r25
     83a:	8f 91       	pop	r24
     83c:	7f 91       	pop	r23
     83e:	6f 91       	pop	r22
     840:	5f 91       	pop	r21
     842:	4f 91       	pop	r20
     844:	3f 91       	pop	r19
     846:	2f 91       	pop	r18
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <GPIO_init_pin>:
		{
			return;
		}
		else
		{
			PORT_CLEAR_MASK((*(output_registers[reg])) , mask);
     852:	84 30       	cpi	r24, 0x04	; 4
     854:	10 f5       	brcc	.+68     	; 0x89a <__stack+0x3b>
     856:	68 30       	cpi	r22, 0x08	; 8
     858:	10 f5       	brcc	.+68     	; 0x89e <__stack+0x3f>
     85a:	42 30       	cpi	r20, 0x02	; 2
     85c:	10 f5       	brcc	.+68     	; 0x8a2 <__stack+0x43>
     85e:	e8 2f       	mov	r30, r24
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	ee 0f       	add	r30, r30
     864:	ff 1f       	adc	r31, r31
     866:	ef 58       	subi	r30, 0x8F	; 143
     868:	ff 4f       	sbci	r31, 0xFF	; 255
     86a:	01 90       	ld	r0, Z+
     86c:	f0 81       	ld	r31, Z
     86e:	e0 2d       	mov	r30, r0
     870:	20 81       	ld	r18, Z
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	06 2e       	mov	r0, r22
     878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	0a 94       	dec	r0
     880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
     886:	44 0f       	add	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	6a 95       	dec	r22
     88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
     88e:	80 95       	com	r24
     890:	82 23       	and	r24, r18
     892:	48 2b       	or	r20, r24
     894:	40 83       	st	Z, r20
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	08 95       	ret
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	08 95       	ret
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	08 95       	ret
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	08 95       	ret

000008a6 <GPIO_init_port_set_mask>:
     8a6:	84 30       	cpi	r24, 0x04	; 4
     8a8:	60 f4       	brcc	.+24     	; 0x8c2 <GPIO_init_port_set_mask+0x1c>
     8aa:	e8 2f       	mov	r30, r24
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	ef 58       	subi	r30, 0x8F	; 143
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	01 90       	ld	r0, Z+
     8b8:	f0 81       	ld	r31, Z
     8ba:	e0 2d       	mov	r30, r0
     8bc:	80 81       	ld	r24, Z
     8be:	68 2b       	or	r22, r24
     8c0:	60 83       	st	Z, r22
     8c2:	08 95       	ret

000008c4 <GPIO_write_pin>:
     8c4:	84 30       	cpi	r24, 0x04	; 4
     8c6:	00 f5       	brcc	.+64     	; 0x908 <GPIO_write_pin+0x44>
     8c8:	68 30       	cpi	r22, 0x08	; 8
     8ca:	00 f5       	brcc	.+64     	; 0x90c <GPIO_write_pin+0x48>
     8cc:	e8 2f       	mov	r30, r24
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	ef 59       	subi	r30, 0x9F	; 159
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	01 90       	ld	r0, Z+
     8da:	f0 81       	ld	r31, Z
     8dc:	e0 2d       	mov	r30, r0
     8de:	20 81       	ld	r18, Z
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	06 2e       	mov	r0, r22
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <GPIO_write_pin+0x28>
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	0a 94       	dec	r0
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <GPIO_write_pin+0x24>
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <GPIO_write_pin+0x34>
     8f4:	44 0f       	add	r20, r20
     8f6:	55 1f       	adc	r21, r21
     8f8:	6a 95       	dec	r22
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <GPIO_write_pin+0x30>
     8fc:	80 95       	com	r24
     8fe:	82 23       	and	r24, r18
     900:	48 2b       	or	r20, r24
     902:	40 83       	st	Z, r20
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	08 95       	ret
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	08 95       	ret
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	08 95       	ret

00000910 <GPIO_write_port>:
     910:	84 30       	cpi	r24, 0x04	; 4
     912:	50 f4       	brcc	.+20     	; 0x928 <GPIO_write_port+0x18>
     914:	e8 2f       	mov	r30, r24
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	ee 0f       	add	r30, r30
     91a:	ff 1f       	adc	r31, r31
     91c:	ef 59       	subi	r30, 0x9F	; 159
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	01 90       	ld	r0, Z+
     922:	f0 81       	ld	r31, Z
     924:	e0 2d       	mov	r30, r0
     926:	60 83       	st	Z, r22
     928:	08 95       	ret

0000092a <GPIO_read_pin>:
		}
}
//read functions

uint8 GPIO_read_pin(GPIO_port_name_t reg , uint8 pin){
	if( NOT_VALID_PORT(reg) || NOT_VALID_PIN (pin))
     92a:	84 30       	cpi	r24, 0x04	; 4
     92c:	f8 f4       	brcc	.+62     	; 0x96c <GPIO_read_pin+0x42>
     92e:	68 30       	cpi	r22, 0x08	; 8
     930:	f8 f4       	brcc	.+62     	; 0x970 <GPIO_read_pin+0x46>
	{
		return NOT_VALID_PIN_CODE;	
	}
	else 
	{
		return GET_BIT( (*(input_registers[reg])) , pin);
     932:	e8 2f       	mov	r30, r24
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	e7 59       	subi	r30, 0x97	; 151
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	01 90       	ld	r0, Z+
     940:	f0 81       	ld	r31, Z
     942:	e0 2d       	mov	r30, r0
     944:	40 81       	ld	r20, Z
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	9c 01       	movw	r18, r24
     94c:	06 2e       	mov	r0, r22
     94e:	02 c0       	rjmp	.+4      	; 0x954 <GPIO_read_pin+0x2a>
     950:	22 0f       	add	r18, r18
     952:	33 1f       	adc	r19, r19
     954:	0a 94       	dec	r0
     956:	e2 f7       	brpl	.-8      	; 0x950 <GPIO_read_pin+0x26>
     958:	84 2f       	mov	r24, r20
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 23       	and	r24, r18
     95e:	93 23       	and	r25, r19
     960:	02 c0       	rjmp	.+4      	; 0x966 <GPIO_read_pin+0x3c>
     962:	95 95       	asr	r25
     964:	87 95       	ror	r24
     966:	6a 95       	dec	r22
     968:	e2 f7       	brpl	.-8      	; 0x962 <GPIO_read_pin+0x38>
     96a:	08 95       	ret
//read functions

uint8 GPIO_read_pin(GPIO_port_name_t reg , uint8 pin){
	if( NOT_VALID_PORT(reg) || NOT_VALID_PIN (pin))
	{
		return NOT_VALID_PIN_CODE;	
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	08 95       	ret
     970:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else 
	{
		return GET_BIT( (*(input_registers[reg])) , pin);
	}
}
     972:	08 95       	ret

00000974 <__vector_1>:
	return EXT_SUCCESS;
}


ISR(INT0_vect)
{
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
	EXT_int0_isr();
     996:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <EXT_int0_isr>
     99a:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <EXT_int0_isr+0x1>
     99e:	09 95       	icall
}
     9a0:	ff 91       	pop	r31
     9a2:	ef 91       	pop	r30
     9a4:	bf 91       	pop	r27
     9a6:	af 91       	pop	r26
     9a8:	9f 91       	pop	r25
     9aa:	8f 91       	pop	r24
     9ac:	7f 91       	pop	r23
     9ae:	6f 91       	pop	r22
     9b0:	5f 91       	pop	r21
     9b2:	4f 91       	pop	r20
     9b4:	3f 91       	pop	r19
     9b6:	2f 91       	pop	r18
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0f 90       	pop	r0
     9be:	1f 90       	pop	r1
     9c0:	18 95       	reti

000009c2 <__vector_2>:
ISR(INT1_vect)
{
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	2f 93       	push	r18
     9ce:	3f 93       	push	r19
     9d0:	4f 93       	push	r20
     9d2:	5f 93       	push	r21
     9d4:	6f 93       	push	r22
     9d6:	7f 93       	push	r23
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	af 93       	push	r26
     9de:	bf 93       	push	r27
     9e0:	ef 93       	push	r30
     9e2:	ff 93       	push	r31
	EXT_int1_isr();
     9e4:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <EXT_int1_isr>
     9e8:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <EXT_int1_isr+0x1>
     9ec:	09 95       	icall
}
     9ee:	ff 91       	pop	r31
     9f0:	ef 91       	pop	r30
     9f2:	bf 91       	pop	r27
     9f4:	af 91       	pop	r26
     9f6:	9f 91       	pop	r25
     9f8:	8f 91       	pop	r24
     9fa:	7f 91       	pop	r23
     9fc:	6f 91       	pop	r22
     9fe:	5f 91       	pop	r21
     a00:	4f 91       	pop	r20
     a02:	3f 91       	pop	r19
     a04:	2f 91       	pop	r18
     a06:	0f 90       	pop	r0
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	0f 90       	pop	r0
     a0c:	1f 90       	pop	r1
     a0e:	18 95       	reti

00000a10 <__vector_3>:
ISR(INT2_vect)
{
     a10:	1f 92       	push	r1
     a12:	0f 92       	push	r0
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	0f 92       	push	r0
     a18:	11 24       	eor	r1, r1
     a1a:	2f 93       	push	r18
     a1c:	3f 93       	push	r19
     a1e:	4f 93       	push	r20
     a20:	5f 93       	push	r21
     a22:	6f 93       	push	r22
     a24:	7f 93       	push	r23
     a26:	8f 93       	push	r24
     a28:	9f 93       	push	r25
     a2a:	af 93       	push	r26
     a2c:	bf 93       	push	r27
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
	EXT_int2_isr();
     a32:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <EXT_int2_isr>
     a36:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <EXT_int2_isr+0x1>
     a3a:	09 95       	icall
     a3c:	ff 91       	pop	r31
     a3e:	ef 91       	pop	r30
     a40:	bf 91       	pop	r27
     a42:	af 91       	pop	r26
     a44:	9f 91       	pop	r25
     a46:	8f 91       	pop	r24
     a48:	7f 91       	pop	r23
     a4a:	6f 91       	pop	r22
     a4c:	5f 91       	pop	r21
     a4e:	4f 91       	pop	r20
     a50:	3f 91       	pop	r19
     a52:	2f 91       	pop	r18
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	0f 90       	pop	r0
     a5a:	1f 90       	pop	r1
     a5c:	18 95       	reti

00000a5e <TIMER0_init>:
}
void TIMER1_set_input_compare_callback(void (*isr)(void))
{
	if(isr != NULLPTR)
	{
		timer1_input_capture_isr = isr;
     a5e:	84 30       	cpi	r24, 0x04	; 4
     a60:	08 f0       	brcs	.+2      	; 0xa64 <TIMER0_init+0x6>
     a62:	55 c0       	rjmp	.+170    	; 0xb0e <TIMER0_init+0xb0>
     a64:	44 30       	cpi	r20, 0x04	; 4
     a66:	08 f0       	brcs	.+2      	; 0xa6a <TIMER0_init+0xc>
     a68:	52 c0       	rjmp	.+164    	; 0xb0e <TIMER0_init+0xb0>
     a6a:	68 30       	cpi	r22, 0x08	; 8
     a6c:	08 f0       	brcs	.+2      	; 0xa70 <TIMER0_init+0x12>
     a6e:	4f c0       	rjmp	.+158    	; 0xb0e <TIMER0_init+0xb0>
     a70:	93 b7       	in	r25, 0x33	; 51
     a72:	98 7f       	andi	r25, 0xF8	; 248
     a74:	96 2b       	or	r25, r22
     a76:	93 bf       	out	0x33, r25	; 51
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	70 93 a5 00 	sts	0x00A5, r23	; 0x8000a5 <scaler0+0x1>
     a7e:	60 93 a4 00 	sts	0x00A4, r22	; 0x8000a4 <scaler0>
     a82:	81 30       	cpi	r24, 0x01	; 1
     a84:	69 f0       	breq	.+26     	; 0xaa0 <TIMER0_init+0x42>
     a86:	28 f0       	brcs	.+10     	; 0xa92 <TIMER0_init+0x34>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	89 f0       	breq	.+34     	; 0xaae <TIMER0_init+0x50>
     a8c:	83 30       	cpi	r24, 0x03	; 3
     a8e:	b1 f0       	breq	.+44     	; 0xabc <TIMER0_init+0x5e>
     a90:	1b c0       	rjmp	.+54     	; 0xac8 <TIMER0_init+0x6a>
     a92:	83 b7       	in	r24, 0x33	; 51
     a94:	8f 7b       	andi	r24, 0xBF	; 191
     a96:	83 bf       	out	0x33, r24	; 51
     a98:	83 b7       	in	r24, 0x33	; 51
     a9a:	87 7f       	andi	r24, 0xF7	; 247
     a9c:	83 bf       	out	0x33, r24	; 51
     a9e:	14 c0       	rjmp	.+40     	; 0xac8 <TIMER0_init+0x6a>
     aa0:	83 b7       	in	r24, 0x33	; 51
     aa2:	80 64       	ori	r24, 0x40	; 64
     aa4:	83 bf       	out	0x33, r24	; 51
     aa6:	83 b7       	in	r24, 0x33	; 51
     aa8:	87 7f       	andi	r24, 0xF7	; 247
     aaa:	83 bf       	out	0x33, r24	; 51
     aac:	0d c0       	rjmp	.+26     	; 0xac8 <TIMER0_init+0x6a>
     aae:	83 b7       	in	r24, 0x33	; 51
     ab0:	8f 7b       	andi	r24, 0xBF	; 191
     ab2:	83 bf       	out	0x33, r24	; 51
     ab4:	83 b7       	in	r24, 0x33	; 51
     ab6:	88 60       	ori	r24, 0x08	; 8
     ab8:	83 bf       	out	0x33, r24	; 51
     aba:	06 c0       	rjmp	.+12     	; 0xac8 <TIMER0_init+0x6a>
     abc:	83 b7       	in	r24, 0x33	; 51
     abe:	80 64       	ori	r24, 0x40	; 64
     ac0:	83 bf       	out	0x33, r24	; 51
     ac2:	83 b7       	in	r24, 0x33	; 51
     ac4:	88 60       	ori	r24, 0x08	; 8
     ac6:	83 bf       	out	0x33, r24	; 51
     ac8:	41 30       	cpi	r20, 0x01	; 1
     aca:	69 f0       	breq	.+26     	; 0xae6 <TIMER0_init+0x88>
     acc:	28 f0       	brcs	.+10     	; 0xad8 <TIMER0_init+0x7a>
     ace:	42 30       	cpi	r20, 0x02	; 2
     ad0:	89 f0       	breq	.+34     	; 0xaf4 <TIMER0_init+0x96>
     ad2:	43 30       	cpi	r20, 0x03	; 3
     ad4:	b1 f0       	breq	.+44     	; 0xb02 <TIMER0_init+0xa4>
     ad6:	08 95       	ret
     ad8:	83 b7       	in	r24, 0x33	; 51
     ada:	8f 7e       	andi	r24, 0xEF	; 239
     adc:	83 bf       	out	0x33, r24	; 51
     ade:	83 b7       	in	r24, 0x33	; 51
     ae0:	8f 7d       	andi	r24, 0xDF	; 223
     ae2:	83 bf       	out	0x33, r24	; 51
     ae4:	08 95       	ret
     ae6:	83 b7       	in	r24, 0x33	; 51
     ae8:	80 61       	ori	r24, 0x10	; 16
     aea:	83 bf       	out	0x33, r24	; 51
     aec:	83 b7       	in	r24, 0x33	; 51
     aee:	8f 7d       	andi	r24, 0xDF	; 223
     af0:	83 bf       	out	0x33, r24	; 51
     af2:	08 95       	ret
     af4:	83 b7       	in	r24, 0x33	; 51
     af6:	8f 7e       	andi	r24, 0xEF	; 239
     af8:	83 bf       	out	0x33, r24	; 51
     afa:	83 b7       	in	r24, 0x33	; 51
     afc:	80 62       	ori	r24, 0x20	; 32
     afe:	83 bf       	out	0x33, r24	; 51
     b00:	08 95       	ret
     b02:	83 b7       	in	r24, 0x33	; 51
     b04:	80 61       	ori	r24, 0x10	; 16
     b06:	83 bf       	out	0x33, r24	; 51
     b08:	83 b7       	in	r24, 0x33	; 51
     b0a:	80 62       	ori	r24, 0x20	; 32
     b0c:	83 bf       	out	0x33, r24	; 51
     b0e:	08 95       	ret

00000b10 <TIMER0_compare_reload>:
     b10:	8c bf       	out	0x3c, r24	; 60
     b12:	08 95       	ret

00000b14 <__vector_10>:
	{	
		timer0_overflow_isr();
	}
}*/
ISR(TIMER0_COMP)
{
     b14:	1f 92       	push	r1
     b16:	0f 92       	push	r0
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	0f 92       	push	r0
     b1c:	11 24       	eor	r1, r1
     b1e:	2f 93       	push	r18
     b20:	3f 93       	push	r19
     b22:	4f 93       	push	r20
     b24:	5f 93       	push	r21
     b26:	6f 93       	push	r22
     b28:	7f 93       	push	r23
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	af 93       	push	r26
     b30:	bf 93       	push	r27
     b32:	ef 93       	push	r30
     b34:	ff 93       	push	r31
	if(timer0_compare_isr != NULLPTR)
     b36:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <timer0_compare_isr>
     b3a:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <timer0_compare_isr+0x1>
     b3e:	30 97       	sbiw	r30, 0x00	; 0
     b40:	09 f0       	breq	.+2      	; 0xb44 <__vector_10+0x30>
	{
		timer0_compare_isr();
     b42:	09 95       	icall
	}
}
     b44:	ff 91       	pop	r31
     b46:	ef 91       	pop	r30
     b48:	bf 91       	pop	r27
     b4a:	af 91       	pop	r26
     b4c:	9f 91       	pop	r25
     b4e:	8f 91       	pop	r24
     b50:	7f 91       	pop	r23
     b52:	6f 91       	pop	r22
     b54:	5f 91       	pop	r21
     b56:	4f 91       	pop	r20
     b58:	3f 91       	pop	r19
     b5a:	2f 91       	pop	r18
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <__vector_9>:


ISR(TIMER1_OVF)
{
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	2f 93       	push	r18
     b72:	3f 93       	push	r19
     b74:	4f 93       	push	r20
     b76:	5f 93       	push	r21
     b78:	6f 93       	push	r22
     b7a:	7f 93       	push	r23
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
     b80:	af 93       	push	r26
     b82:	bf 93       	push	r27
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
	if(timer1_overflow_isr != NULLPTR)
     b88:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <timer1_overflow_isr>
     b8c:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <timer1_overflow_isr+0x1>
     b90:	30 97       	sbiw	r30, 0x00	; 0
     b92:	09 f0       	breq	.+2      	; 0xb96 <__vector_9+0x30>
	{
		timer1_overflow_isr();
     b94:	09 95       	icall
	}
}
     b96:	ff 91       	pop	r31
     b98:	ef 91       	pop	r30
     b9a:	bf 91       	pop	r27
     b9c:	af 91       	pop	r26
     b9e:	9f 91       	pop	r25
     ba0:	8f 91       	pop	r24
     ba2:	7f 91       	pop	r23
     ba4:	6f 91       	pop	r22
     ba6:	5f 91       	pop	r21
     ba8:	4f 91       	pop	r20
     baa:	3f 91       	pop	r19
     bac:	2f 91       	pop	r18
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	0f 90       	pop	r0
     bb4:	1f 90       	pop	r1
     bb6:	18 95       	reti

00000bb8 <__vector_7>:

ISR(TIMER1_COMPA)
{
     bb8:	1f 92       	push	r1
     bba:	0f 92       	push	r0
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	0f 92       	push	r0
     bc0:	11 24       	eor	r1, r1
     bc2:	2f 93       	push	r18
     bc4:	3f 93       	push	r19
     bc6:	4f 93       	push	r20
     bc8:	5f 93       	push	r21
     bca:	6f 93       	push	r22
     bcc:	7f 93       	push	r23
     bce:	8f 93       	push	r24
     bd0:	9f 93       	push	r25
     bd2:	af 93       	push	r26
     bd4:	bf 93       	push	r27
     bd6:	ef 93       	push	r30
     bd8:	ff 93       	push	r31
	if(timer1_compare_a_isr != NULLPTR)
     bda:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <timer1_compare_a_isr>
     bde:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <timer1_compare_a_isr+0x1>
     be2:	30 97       	sbiw	r30, 0x00	; 0
     be4:	09 f0       	breq	.+2      	; 0xbe8 <__vector_7+0x30>
	{
		timer1_compare_a_isr();
     be6:	09 95       	icall
	}
}
     be8:	ff 91       	pop	r31
     bea:	ef 91       	pop	r30
     bec:	bf 91       	pop	r27
     bee:	af 91       	pop	r26
     bf0:	9f 91       	pop	r25
     bf2:	8f 91       	pop	r24
     bf4:	7f 91       	pop	r23
     bf6:	6f 91       	pop	r22
     bf8:	5f 91       	pop	r21
     bfa:	4f 91       	pop	r20
     bfc:	3f 91       	pop	r19
     bfe:	2f 91       	pop	r18
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	0f 90       	pop	r0
     c06:	1f 90       	pop	r1
     c08:	18 95       	reti

00000c0a <__vector_8>:

ISR(TIMER1_COMPB)
{
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	11 24       	eor	r1, r1
     c14:	2f 93       	push	r18
     c16:	3f 93       	push	r19
     c18:	4f 93       	push	r20
     c1a:	5f 93       	push	r21
     c1c:	6f 93       	push	r22
     c1e:	7f 93       	push	r23
     c20:	8f 93       	push	r24
     c22:	9f 93       	push	r25
     c24:	af 93       	push	r26
     c26:	bf 93       	push	r27
     c28:	ef 93       	push	r30
     c2a:	ff 93       	push	r31
	if(timer1_compare_b_isr != NULLPTR)
     c2c:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <timer1_compare_b_isr>
     c30:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <timer1_compare_b_isr+0x1>
     c34:	30 97       	sbiw	r30, 0x00	; 0
     c36:	09 f0       	breq	.+2      	; 0xc3a <__vector_8+0x30>
	{
		timer1_compare_b_isr();
     c38:	09 95       	icall
	}
}
     c3a:	ff 91       	pop	r31
     c3c:	ef 91       	pop	r30
     c3e:	bf 91       	pop	r27
     c40:	af 91       	pop	r26
     c42:	9f 91       	pop	r25
     c44:	8f 91       	pop	r24
     c46:	7f 91       	pop	r23
     c48:	6f 91       	pop	r22
     c4a:	5f 91       	pop	r21
     c4c:	4f 91       	pop	r20
     c4e:	3f 91       	pop	r19
     c50:	2f 91       	pop	r18
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__vector_6>:

ISR(TIMER1_CAPT)
{
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	2f 93       	push	r18
     c68:	3f 93       	push	r19
     c6a:	4f 93       	push	r20
     c6c:	5f 93       	push	r21
     c6e:	6f 93       	push	r22
     c70:	7f 93       	push	r23
     c72:	8f 93       	push	r24
     c74:	9f 93       	push	r25
     c76:	af 93       	push	r26
     c78:	bf 93       	push	r27
     c7a:	ef 93       	push	r30
     c7c:	ff 93       	push	r31
	if(timer1_input_capture_isr != NULLPTR)
     c7e:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <timer1_input_capture_isr>
     c82:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <timer1_input_capture_isr+0x1>
     c86:	30 97       	sbiw	r30, 0x00	; 0
     c88:	09 f0       	breq	.+2      	; 0xc8c <__vector_6+0x30>
	{
		timer1_input_capture_isr();
     c8a:	09 95       	icall
	}
}
     c8c:	ff 91       	pop	r31
     c8e:	ef 91       	pop	r30
     c90:	bf 91       	pop	r27
     c92:	af 91       	pop	r26
     c94:	9f 91       	pop	r25
     c96:	8f 91       	pop	r24
     c98:	7f 91       	pop	r23
     c9a:	6f 91       	pop	r22
     c9c:	5f 91       	pop	r21
     c9e:	4f 91       	pop	r20
     ca0:	3f 91       	pop	r19
     ca2:	2f 91       	pop	r18
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	0f 90       	pop	r0
     caa:	1f 90       	pop	r1
     cac:	18 95       	reti

00000cae <__divsf3>:
     cae:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__divsf3x>
     cb2:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__fp_round>
     cb6:	0e 94 45 07 	call	0xe8a	; 0xe8a <__fp_pscB>
     cba:	58 f0       	brcs	.+22     	; 0xcd2 <__divsf3+0x24>
     cbc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fp_pscA>
     cc0:	40 f0       	brcs	.+16     	; 0xcd2 <__divsf3+0x24>
     cc2:	29 f4       	brne	.+10     	; 0xcce <__divsf3+0x20>
     cc4:	5f 3f       	cpi	r21, 0xFF	; 255
     cc6:	29 f0       	breq	.+10     	; 0xcd2 <__divsf3+0x24>
     cc8:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_inf>
     ccc:	51 11       	cpse	r21, r1
     cce:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_szero>
     cd2:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_nan>

00000cd6 <__divsf3x>:
     cd6:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_split3>
     cda:	68 f3       	brcs	.-38     	; 0xcb6 <__divsf3+0x8>

00000cdc <__divsf3_pse>:
     cdc:	99 23       	and	r25, r25
     cde:	b1 f3       	breq	.-20     	; 0xccc <__divsf3+0x1e>
     ce0:	55 23       	and	r21, r21
     ce2:	91 f3       	breq	.-28     	; 0xcc8 <__divsf3+0x1a>
     ce4:	95 1b       	sub	r25, r21
     ce6:	55 0b       	sbc	r21, r21
     ce8:	bb 27       	eor	r27, r27
     cea:	aa 27       	eor	r26, r26
     cec:	62 17       	cp	r22, r18
     cee:	73 07       	cpc	r23, r19
     cf0:	84 07       	cpc	r24, r20
     cf2:	38 f0       	brcs	.+14     	; 0xd02 <__divsf3_pse+0x26>
     cf4:	9f 5f       	subi	r25, 0xFF	; 255
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	44 1f       	adc	r20, r20
     cfe:	aa 1f       	adc	r26, r26
     d00:	a9 f3       	breq	.-22     	; 0xcec <__divsf3_pse+0x10>
     d02:	35 d0       	rcall	.+106    	; 0xd6e <__divsf3_pse+0x92>
     d04:	0e 2e       	mov	r0, r30
     d06:	3a f0       	brmi	.+14     	; 0xd16 <__divsf3_pse+0x3a>
     d08:	e0 e8       	ldi	r30, 0x80	; 128
     d0a:	32 d0       	rcall	.+100    	; 0xd70 <__divsf3_pse+0x94>
     d0c:	91 50       	subi	r25, 0x01	; 1
     d0e:	50 40       	sbci	r21, 0x00	; 0
     d10:	e6 95       	lsr	r30
     d12:	00 1c       	adc	r0, r0
     d14:	ca f7       	brpl	.-14     	; 0xd08 <__divsf3_pse+0x2c>
     d16:	2b d0       	rcall	.+86     	; 0xd6e <__divsf3_pse+0x92>
     d18:	fe 2f       	mov	r31, r30
     d1a:	29 d0       	rcall	.+82     	; 0xd6e <__divsf3_pse+0x92>
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	88 1f       	adc	r24, r24
     d22:	bb 1f       	adc	r27, r27
     d24:	26 17       	cp	r18, r22
     d26:	37 07       	cpc	r19, r23
     d28:	48 07       	cpc	r20, r24
     d2a:	ab 07       	cpc	r26, r27
     d2c:	b0 e8       	ldi	r27, 0x80	; 128
     d2e:	09 f0       	breq	.+2      	; 0xd32 <__divsf3_pse+0x56>
     d30:	bb 0b       	sbc	r27, r27
     d32:	80 2d       	mov	r24, r0
     d34:	bf 01       	movw	r22, r30
     d36:	ff 27       	eor	r31, r31
     d38:	93 58       	subi	r25, 0x83	; 131
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	3a f0       	brmi	.+14     	; 0xd4c <__divsf3_pse+0x70>
     d3e:	9e 3f       	cpi	r25, 0xFE	; 254
     d40:	51 05       	cpc	r21, r1
     d42:	78 f0       	brcs	.+30     	; 0xd62 <__divsf3_pse+0x86>
     d44:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_inf>
     d48:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_szero>
     d4c:	5f 3f       	cpi	r21, 0xFF	; 255
     d4e:	e4 f3       	brlt	.-8      	; 0xd48 <__divsf3_pse+0x6c>
     d50:	98 3e       	cpi	r25, 0xE8	; 232
     d52:	d4 f3       	brlt	.-12     	; 0xd48 <__divsf3_pse+0x6c>
     d54:	86 95       	lsr	r24
     d56:	77 95       	ror	r23
     d58:	67 95       	ror	r22
     d5a:	b7 95       	ror	r27
     d5c:	f7 95       	ror	r31
     d5e:	9f 5f       	subi	r25, 0xFF	; 255
     d60:	c9 f7       	brne	.-14     	; 0xd54 <__divsf3_pse+0x78>
     d62:	88 0f       	add	r24, r24
     d64:	91 1d       	adc	r25, r1
     d66:	96 95       	lsr	r25
     d68:	87 95       	ror	r24
     d6a:	97 f9       	bld	r25, 7
     d6c:	08 95       	ret
     d6e:	e1 e0       	ldi	r30, 0x01	; 1
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	88 1f       	adc	r24, r24
     d76:	bb 1f       	adc	r27, r27
     d78:	62 17       	cp	r22, r18
     d7a:	73 07       	cpc	r23, r19
     d7c:	84 07       	cpc	r24, r20
     d7e:	ba 07       	cpc	r27, r26
     d80:	20 f0       	brcs	.+8      	; 0xd8a <__divsf3_pse+0xae>
     d82:	62 1b       	sub	r22, r18
     d84:	73 0b       	sbc	r23, r19
     d86:	84 0b       	sbc	r24, r20
     d88:	ba 0b       	sbc	r27, r26
     d8a:	ee 1f       	adc	r30, r30
     d8c:	88 f7       	brcc	.-30     	; 0xd70 <__divsf3_pse+0x94>
     d8e:	e0 95       	com	r30
     d90:	08 95       	ret

00000d92 <__fixunssfsi>:
     d92:	0e 94 65 07 	call	0xeca	; 0xeca <__fp_splitA>
     d96:	88 f0       	brcs	.+34     	; 0xdba <__fixunssfsi+0x28>
     d98:	9f 57       	subi	r25, 0x7F	; 127
     d9a:	98 f0       	brcs	.+38     	; 0xdc2 <__fixunssfsi+0x30>
     d9c:	b9 2f       	mov	r27, r25
     d9e:	99 27       	eor	r25, r25
     da0:	b7 51       	subi	r27, 0x17	; 23
     da2:	b0 f0       	brcs	.+44     	; 0xdd0 <__fixunssfsi+0x3e>
     da4:	e1 f0       	breq	.+56     	; 0xdde <__fixunssfsi+0x4c>
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	88 1f       	adc	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	1a f0       	brmi	.+6      	; 0xdb6 <__fixunssfsi+0x24>
     db0:	ba 95       	dec	r27
     db2:	c9 f7       	brne	.-14     	; 0xda6 <__fixunssfsi+0x14>
     db4:	14 c0       	rjmp	.+40     	; 0xdde <__fixunssfsi+0x4c>
     db6:	b1 30       	cpi	r27, 0x01	; 1
     db8:	91 f0       	breq	.+36     	; 0xdde <__fixunssfsi+0x4c>
     dba:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_zero>
     dbe:	b1 e0       	ldi	r27, 0x01	; 1
     dc0:	08 95       	ret
     dc2:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__fp_zero>
     dc6:	67 2f       	mov	r22, r23
     dc8:	78 2f       	mov	r23, r24
     dca:	88 27       	eor	r24, r24
     dcc:	b8 5f       	subi	r27, 0xF8	; 248
     dce:	39 f0       	breq	.+14     	; 0xdde <__fixunssfsi+0x4c>
     dd0:	b9 3f       	cpi	r27, 0xF9	; 249
     dd2:	cc f3       	brlt	.-14     	; 0xdc6 <__fixunssfsi+0x34>
     dd4:	86 95       	lsr	r24
     dd6:	77 95       	ror	r23
     dd8:	67 95       	ror	r22
     dda:	b3 95       	inc	r27
     ddc:	d9 f7       	brne	.-10     	; 0xdd4 <__fixunssfsi+0x42>
     dde:	3e f4       	brtc	.+14     	; 0xdee <__fixunssfsi+0x5c>
     de0:	90 95       	com	r25
     de2:	80 95       	com	r24
     de4:	70 95       	com	r23
     de6:	61 95       	neg	r22
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	8f 4f       	sbci	r24, 0xFF	; 255
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	08 95       	ret

00000df0 <__floatunsisf>:
     df0:	e8 94       	clt
     df2:	09 c0       	rjmp	.+18     	; 0xe06 <__floatsisf+0x12>

00000df4 <__floatsisf>:
     df4:	97 fb       	bst	r25, 7
     df6:	3e f4       	brtc	.+14     	; 0xe06 <__floatsisf+0x12>
     df8:	90 95       	com	r25
     dfa:	80 95       	com	r24
     dfc:	70 95       	com	r23
     dfe:	61 95       	neg	r22
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	8f 4f       	sbci	r24, 0xFF	; 255
     e04:	9f 4f       	sbci	r25, 0xFF	; 255
     e06:	99 23       	and	r25, r25
     e08:	a9 f0       	breq	.+42     	; 0xe34 <__floatsisf+0x40>
     e0a:	f9 2f       	mov	r31, r25
     e0c:	96 e9       	ldi	r25, 0x96	; 150
     e0e:	bb 27       	eor	r27, r27
     e10:	93 95       	inc	r25
     e12:	f6 95       	lsr	r31
     e14:	87 95       	ror	r24
     e16:	77 95       	ror	r23
     e18:	67 95       	ror	r22
     e1a:	b7 95       	ror	r27
     e1c:	f1 11       	cpse	r31, r1
     e1e:	f8 cf       	rjmp	.-16     	; 0xe10 <__floatsisf+0x1c>
     e20:	fa f4       	brpl	.+62     	; 0xe60 <__floatsisf+0x6c>
     e22:	bb 0f       	add	r27, r27
     e24:	11 f4       	brne	.+4      	; 0xe2a <__floatsisf+0x36>
     e26:	60 ff       	sbrs	r22, 0
     e28:	1b c0       	rjmp	.+54     	; 0xe60 <__floatsisf+0x6c>
     e2a:	6f 5f       	subi	r22, 0xFF	; 255
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	16 c0       	rjmp	.+44     	; 0xe60 <__floatsisf+0x6c>
     e34:	88 23       	and	r24, r24
     e36:	11 f0       	breq	.+4      	; 0xe3c <__floatsisf+0x48>
     e38:	96 e9       	ldi	r25, 0x96	; 150
     e3a:	11 c0       	rjmp	.+34     	; 0xe5e <__floatsisf+0x6a>
     e3c:	77 23       	and	r23, r23
     e3e:	21 f0       	breq	.+8      	; 0xe48 <__floatsisf+0x54>
     e40:	9e e8       	ldi	r25, 0x8E	; 142
     e42:	87 2f       	mov	r24, r23
     e44:	76 2f       	mov	r23, r22
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__floatsisf+0x5e>
     e48:	66 23       	and	r22, r22
     e4a:	71 f0       	breq	.+28     	; 0xe68 <__floatsisf+0x74>
     e4c:	96 e8       	ldi	r25, 0x86	; 134
     e4e:	86 2f       	mov	r24, r22
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	2a f0       	brmi	.+10     	; 0xe60 <__floatsisf+0x6c>
     e56:	9a 95       	dec	r25
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	da f7       	brpl	.-10     	; 0xe56 <__floatsisf+0x62>
     e60:	88 0f       	add	r24, r24
     e62:	96 95       	lsr	r25
     e64:	87 95       	ror	r24
     e66:	97 f9       	bld	r25, 7
     e68:	08 95       	ret

00000e6a <__fp_inf>:
     e6a:	97 f9       	bld	r25, 7
     e6c:	9f 67       	ori	r25, 0x7F	; 127
     e6e:	80 e8       	ldi	r24, 0x80	; 128
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	08 95       	ret

00000e76 <__fp_nan>:
     e76:	9f ef       	ldi	r25, 0xFF	; 255
     e78:	80 ec       	ldi	r24, 0xC0	; 192
     e7a:	08 95       	ret

00000e7c <__fp_pscA>:
     e7c:	00 24       	eor	r0, r0
     e7e:	0a 94       	dec	r0
     e80:	16 16       	cp	r1, r22
     e82:	17 06       	cpc	r1, r23
     e84:	18 06       	cpc	r1, r24
     e86:	09 06       	cpc	r0, r25
     e88:	08 95       	ret

00000e8a <__fp_pscB>:
     e8a:	00 24       	eor	r0, r0
     e8c:	0a 94       	dec	r0
     e8e:	12 16       	cp	r1, r18
     e90:	13 06       	cpc	r1, r19
     e92:	14 06       	cpc	r1, r20
     e94:	05 06       	cpc	r0, r21
     e96:	08 95       	ret

00000e98 <__fp_round>:
     e98:	09 2e       	mov	r0, r25
     e9a:	03 94       	inc	r0
     e9c:	00 0c       	add	r0, r0
     e9e:	11 f4       	brne	.+4      	; 0xea4 <__fp_round+0xc>
     ea0:	88 23       	and	r24, r24
     ea2:	52 f0       	brmi	.+20     	; 0xeb8 <__fp_round+0x20>
     ea4:	bb 0f       	add	r27, r27
     ea6:	40 f4       	brcc	.+16     	; 0xeb8 <__fp_round+0x20>
     ea8:	bf 2b       	or	r27, r31
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <__fp_round+0x18>
     eac:	60 ff       	sbrs	r22, 0
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <__fp_round+0x20>
     eb0:	6f 5f       	subi	r22, 0xFF	; 255
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	8f 4f       	sbci	r24, 0xFF	; 255
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	08 95       	ret

00000eba <__fp_split3>:
     eba:	57 fd       	sbrc	r21, 7
     ebc:	90 58       	subi	r25, 0x80	; 128
     ebe:	44 0f       	add	r20, r20
     ec0:	55 1f       	adc	r21, r21
     ec2:	59 f0       	breq	.+22     	; 0xeda <__fp_splitA+0x10>
     ec4:	5f 3f       	cpi	r21, 0xFF	; 255
     ec6:	71 f0       	breq	.+28     	; 0xee4 <__fp_splitA+0x1a>
     ec8:	47 95       	ror	r20

00000eca <__fp_splitA>:
     eca:	88 0f       	add	r24, r24
     ecc:	97 fb       	bst	r25, 7
     ece:	99 1f       	adc	r25, r25
     ed0:	61 f0       	breq	.+24     	; 0xeea <__fp_splitA+0x20>
     ed2:	9f 3f       	cpi	r25, 0xFF	; 255
     ed4:	79 f0       	breq	.+30     	; 0xef4 <__fp_splitA+0x2a>
     ed6:	87 95       	ror	r24
     ed8:	08 95       	ret
     eda:	12 16       	cp	r1, r18
     edc:	13 06       	cpc	r1, r19
     ede:	14 06       	cpc	r1, r20
     ee0:	55 1f       	adc	r21, r21
     ee2:	f2 cf       	rjmp	.-28     	; 0xec8 <__fp_split3+0xe>
     ee4:	46 95       	lsr	r20
     ee6:	f1 df       	rcall	.-30     	; 0xeca <__fp_splitA>
     ee8:	08 c0       	rjmp	.+16     	; 0xefa <__fp_splitA+0x30>
     eea:	16 16       	cp	r1, r22
     eec:	17 06       	cpc	r1, r23
     eee:	18 06       	cpc	r1, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	f1 cf       	rjmp	.-30     	; 0xed6 <__fp_splitA+0xc>
     ef4:	86 95       	lsr	r24
     ef6:	71 05       	cpc	r23, r1
     ef8:	61 05       	cpc	r22, r1
     efa:	08 94       	sec
     efc:	08 95       	ret

00000efe <__fp_zero>:
     efe:	e8 94       	clt

00000f00 <__fp_szero>:
     f00:	bb 27       	eor	r27, r27
     f02:	66 27       	eor	r22, r22
     f04:	77 27       	eor	r23, r23
     f06:	cb 01       	movw	r24, r22
     f08:	97 f9       	bld	r25, 7
     f0a:	08 95       	ret

00000f0c <__mulsf3>:
     f0c:	0e 94 99 07 	call	0xf32	; 0xf32 <__mulsf3x>
     f10:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__fp_round>
     f14:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fp_pscA>
     f18:	38 f0       	brcs	.+14     	; 0xf28 <__mulsf3+0x1c>
     f1a:	0e 94 45 07 	call	0xe8a	; 0xe8a <__fp_pscB>
     f1e:	20 f0       	brcs	.+8      	; 0xf28 <__mulsf3+0x1c>
     f20:	95 23       	and	r25, r21
     f22:	11 f0       	breq	.+4      	; 0xf28 <__mulsf3+0x1c>
     f24:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_inf>
     f28:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_nan>
     f2c:	11 24       	eor	r1, r1
     f2e:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_szero>

00000f32 <__mulsf3x>:
     f32:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_split3>
     f36:	70 f3       	brcs	.-36     	; 0xf14 <__mulsf3+0x8>

00000f38 <__mulsf3_pse>:
     f38:	95 9f       	mul	r25, r21
     f3a:	c1 f3       	breq	.-16     	; 0xf2c <__mulsf3+0x20>
     f3c:	95 0f       	add	r25, r21
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	55 1f       	adc	r21, r21
     f42:	62 9f       	mul	r22, r18
     f44:	f0 01       	movw	r30, r0
     f46:	72 9f       	mul	r23, r18
     f48:	bb 27       	eor	r27, r27
     f4a:	f0 0d       	add	r31, r0
     f4c:	b1 1d       	adc	r27, r1
     f4e:	63 9f       	mul	r22, r19
     f50:	aa 27       	eor	r26, r26
     f52:	f0 0d       	add	r31, r0
     f54:	b1 1d       	adc	r27, r1
     f56:	aa 1f       	adc	r26, r26
     f58:	64 9f       	mul	r22, r20
     f5a:	66 27       	eor	r22, r22
     f5c:	b0 0d       	add	r27, r0
     f5e:	a1 1d       	adc	r26, r1
     f60:	66 1f       	adc	r22, r22
     f62:	82 9f       	mul	r24, r18
     f64:	22 27       	eor	r18, r18
     f66:	b0 0d       	add	r27, r0
     f68:	a1 1d       	adc	r26, r1
     f6a:	62 1f       	adc	r22, r18
     f6c:	73 9f       	mul	r23, r19
     f6e:	b0 0d       	add	r27, r0
     f70:	a1 1d       	adc	r26, r1
     f72:	62 1f       	adc	r22, r18
     f74:	83 9f       	mul	r24, r19
     f76:	a0 0d       	add	r26, r0
     f78:	61 1d       	adc	r22, r1
     f7a:	22 1f       	adc	r18, r18
     f7c:	74 9f       	mul	r23, r20
     f7e:	33 27       	eor	r19, r19
     f80:	a0 0d       	add	r26, r0
     f82:	61 1d       	adc	r22, r1
     f84:	23 1f       	adc	r18, r19
     f86:	84 9f       	mul	r24, r20
     f88:	60 0d       	add	r22, r0
     f8a:	21 1d       	adc	r18, r1
     f8c:	82 2f       	mov	r24, r18
     f8e:	76 2f       	mov	r23, r22
     f90:	6a 2f       	mov	r22, r26
     f92:	11 24       	eor	r1, r1
     f94:	9f 57       	subi	r25, 0x7F	; 127
     f96:	50 40       	sbci	r21, 0x00	; 0
     f98:	9a f0       	brmi	.+38     	; 0xfc0 <__mulsf3_pse+0x88>
     f9a:	f1 f0       	breq	.+60     	; 0xfd8 <__mulsf3_pse+0xa0>
     f9c:	88 23       	and	r24, r24
     f9e:	4a f0       	brmi	.+18     	; 0xfb2 <__mulsf3_pse+0x7a>
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	bb 1f       	adc	r27, r27
     fa6:	66 1f       	adc	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	91 50       	subi	r25, 0x01	; 1
     fae:	50 40       	sbci	r21, 0x00	; 0
     fb0:	a9 f7       	brne	.-22     	; 0xf9c <__mulsf3_pse+0x64>
     fb2:	9e 3f       	cpi	r25, 0xFE	; 254
     fb4:	51 05       	cpc	r21, r1
     fb6:	80 f0       	brcs	.+32     	; 0xfd8 <__mulsf3_pse+0xa0>
     fb8:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_inf>
     fbc:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_szero>
     fc0:	5f 3f       	cpi	r21, 0xFF	; 255
     fc2:	e4 f3       	brlt	.-8      	; 0xfbc <__mulsf3_pse+0x84>
     fc4:	98 3e       	cpi	r25, 0xE8	; 232
     fc6:	d4 f3       	brlt	.-12     	; 0xfbc <__mulsf3_pse+0x84>
     fc8:	86 95       	lsr	r24
     fca:	77 95       	ror	r23
     fcc:	67 95       	ror	r22
     fce:	b7 95       	ror	r27
     fd0:	f7 95       	ror	r31
     fd2:	e7 95       	ror	r30
     fd4:	9f 5f       	subi	r25, 0xFF	; 255
     fd6:	c1 f7       	brne	.-16     	; 0xfc8 <__mulsf3_pse+0x90>
     fd8:	fe 2b       	or	r31, r30
     fda:	88 0f       	add	r24, r24
     fdc:	91 1d       	adc	r25, r1
     fde:	96 95       	lsr	r25
     fe0:	87 95       	ror	r24
     fe2:	97 f9       	bld	r25, 7
     fe4:	08 95       	ret

00000fe6 <__umulhisi3>:
     fe6:	a2 9f       	mul	r26, r18
     fe8:	b0 01       	movw	r22, r0
     fea:	b3 9f       	mul	r27, r19
     fec:	c0 01       	movw	r24, r0
     fee:	a3 9f       	mul	r26, r19
     ff0:	70 0d       	add	r23, r0
     ff2:	81 1d       	adc	r24, r1
     ff4:	11 24       	eor	r1, r1
     ff6:	91 1d       	adc	r25, r1
     ff8:	b2 9f       	mul	r27, r18
     ffa:	70 0d       	add	r23, r0
     ffc:	81 1d       	adc	r24, r1
     ffe:	11 24       	eor	r1, r1
    1000:	91 1d       	adc	r25, r1
    1002:	08 95       	ret

00001004 <_exit>:
    1004:	f8 94       	cli

00001006 <__stop_program>:
    1006:	ff cf       	rjmp	.-2      	; 0x1006 <__stop_program>
