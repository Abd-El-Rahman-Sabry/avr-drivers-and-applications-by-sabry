
Hope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000942  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000942  000009d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800080  00800080  000009f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002692  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd8  00000000  00000000  00003446  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015da  00000000  00000000  0000421e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008bc  00000000  00000000  000057f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001851  00000000  00000000  000060b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001763  00000000  00000000  00007905  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 15 03 	jmp	0x62a	; 0x62a <__vector_1>
   8:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_2>
   c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_6>
  1c:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_7>
  20:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_8>
  24:	0c 94 b3 03 	jmp	0x766	; 0x766 <__vector_9>
  28:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  8a:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_write_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 b2 02 	call	0x564	; 0x564 <GPIO_write_pin>
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	0e 94 b2 02 	call	0x564	; 0x564 <GPIO_write_pin>
  aa:	6c 2f       	mov	r22, r28
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <GPIO_write_port>
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	0e 94 b2 02 	call	0x564	; 0x564 <GPIO_write_pin>
  bc:	83 ef       	ldi	r24, 0xF3	; 243
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcd_write_command+0x2e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcd_write_command+0x34>
  c6:	00 00       	nop
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	0e 94 b2 02 	call	0x564	; 0x564 <GPIO_write_pin>
  d2:	83 ef       	ldi	r24, 0xF3	; 243
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_write_command+0x44>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_write_command+0x4a>
  dc:	00 00       	nop
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <lcd_write_data>:
  e2:	cf 93       	push	r28
  e4:	c8 2f       	mov	r28, r24
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 b2 02 	call	0x564	; 0x564 <GPIO_write_pin>
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 b2 02 	call	0x564	; 0x564 <GPIO_write_pin>
  fa:	6c 2f       	mov	r22, r28
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <GPIO_write_port>
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	0e 94 b2 02 	call	0x564	; 0x564 <GPIO_write_pin>
 10c:	83 ef       	ldi	r24, 0xF3	; 243
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write_data+0x2e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write_data+0x34>
 116:	00 00       	nop
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	0e 94 b2 02 	call	0x564	; 0x564 <GPIO_write_pin>
 122:	83 ef       	ldi	r24, 0xF3	; 243
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_write_data+0x44>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_write_data+0x4a>
 12c:	00 00       	nop
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <LCD_Init>:
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <GPIO_init_pin>
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <GPIO_init_pin>
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <GPIO_init_pin>
 150:	6f ef       	ldi	r22, 0xFF	; 255
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 a5 02 	call	0x54a	; 0x54a <GPIO_init_port>
 158:	85 ea       	ldi	r24, 0xA5	; 165
 15a:	9e e0       	ldi	r25, 0x0E	; 14
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_Init+0x2a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_Init+0x30>
 162:	00 00       	nop
 164:	88 e3       	ldi	r24, 0x38	; 56
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 16a:	91 e2       	ldi	r25, 0x21	; 33
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Init+0x3a>
 170:	00 00       	nop
 172:	8e e0       	ldi	r24, 0x0E	; 14
 174:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 178:	81 e2       	ldi	r24, 0x21	; 33
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_Init+0x48>
 17e:	00 00       	nop
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 186:	83 ef       	ldi	r24, 0xF3	; 243
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_Init+0x58>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_Init+0x5e>
 190:	00 00       	nop
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 198:	83 ef       	ldi	r24, 0xF3	; 243
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Init+0x6a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Init+0x70>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <LCD_write_char>:
 1a6:	18 16       	cp	r1, r24
 1a8:	14 f4       	brge	.+4      	; 0x1ae <LCD_write_char+0x8>
 1aa:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write_data>
 1ae:	08 95       	ret

000001b0 <LCD_write_string>:
{
	lcd_write_command(0x01);
	_delay_ms(2);
}
void LCD_write_string(uint8 *str)
{
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	8c 01       	movw	r16, r24
	uint8 c = 0;
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
	while ( str[c] )
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <LCD_write_string+0x12>
	{
		LCD_write_char(str[c++]);
 1bc:	cf 5f       	subi	r28, 0xFF	; 255
 1be:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_write_char>
	_delay_ms(2);
}
void LCD_write_string(uint8 *str)
{
	uint8 c = 0;
	while ( str[c] )
 1c2:	f8 01       	movw	r30, r16
 1c4:	ec 0f       	add	r30, r28
 1c6:	f1 1d       	adc	r31, r1
 1c8:	80 81       	ld	r24, Z
 1ca:	81 11       	cpse	r24, r1
 1cc:	f7 cf       	rjmp	.-18     	; 0x1bc <LCD_write_string+0xc>
	{
		LCD_write_char(str[c++]);
	}
}
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <LCD_go_to>:

void LCD_go_to(uint8 row , uint8 col)
{
	if(row == 1)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <LCD_go_to+0x12>
	{
		if(col < MAX_COL)
 1da:	60 31       	cpi	r22, 0x10	; 16
 1dc:	68 f4       	brcc	.+26     	; 0x1f8 <LCD_go_to+0x22>
		{
			lcd_write_command((0x80+col));
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	86 0f       	add	r24, r22
 1e2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 1e6:	08 95       	ret
		}
	}
	else if(row == 2)
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	31 f4       	brne	.+12     	; 0x1f8 <LCD_go_to+0x22>
	{
		if(col < MAX_COL)
 1ec:	60 31       	cpi	r22, 0x10	; 16
 1ee:	20 f4       	brcc	.+8      	; 0x1f8 <LCD_go_to+0x22>
		{
			lcd_write_command((0xC0+col));
 1f0:	80 ec       	ldi	r24, 0xC0	; 192
 1f2:	86 0f       	add	r24, r22
 1f4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 1f8:	08 95       	ret

000001fa <LCD_write_number>:
		}
	}
}
void LCD_write_number(uint32 n)
{
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	2a 97       	sbiw	r28, 0x0a	; 10
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
 210:	ac 01       	movw	r20, r24
	uint8 i = 0 , j , digits[10];
	if(n == 0)
 212:	89 2b       	or	r24, r25
 214:	91 f5       	brne	.+100    	; 0x27a <LCD_write_number+0x80>
		lcd_write_data('0');
 216:	80 e3       	ldi	r24, 0x30	; 48
 218:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write_data>
 21c:	42 c0       	rjmp	.+132    	; 0x2a2 <LCD_write_number+0xa8>
	else {
		while(n)
		{
			digits[i] = (uint8)(n%10 + '0');
 21e:	9a 01       	movw	r18, r20
 220:	ad ec       	ldi	r26, 0xCD	; 205
 222:	bc ec       	ldi	r27, 0xCC	; 204
 224:	0e 94 90 04 	call	0x920	; 0x920 <__umulhisi3>
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	96 95       	lsr	r25
 22e:	87 95       	ror	r24
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	9c 01       	movw	r18, r24
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	82 0f       	add	r24, r18
 248:	93 1f       	adc	r25, r19
 24a:	9a 01       	movw	r18, r20
 24c:	28 1b       	sub	r18, r24
 24e:	39 0b       	sbc	r19, r25
 250:	c9 01       	movw	r24, r18
 252:	80 5d       	subi	r24, 0xD0	; 208
 254:	e1 e0       	ldi	r30, 0x01	; 1
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	ec 0f       	add	r30, r28
 25a:	fd 1f       	adc	r31, r29
 25c:	e1 0f       	add	r30, r17
 25e:	f1 1d       	adc	r31, r1
 260:	80 83       	st	Z, r24
			n = n / 10;
 262:	9a 01       	movw	r18, r20
 264:	0e 94 90 04 	call	0x920	; 0x920 <__umulhisi3>
 268:	ac 01       	movw	r20, r24
 26a:	56 95       	lsr	r21
 26c:	47 95       	ror	r20
 26e:	56 95       	lsr	r21
 270:	47 95       	ror	r20
 272:	56 95       	lsr	r21
 274:	47 95       	ror	r20
			i++;
 276:	1f 5f       	subi	r17, 0xFF	; 255
 278:	01 c0       	rjmp	.+2      	; 0x27c <LCD_write_number+0x82>
 27a:	10 e0       	ldi	r17, 0x00	; 0
{
	uint8 i = 0 , j , digits[10];
	if(n == 0)
		lcd_write_data('0');
	else {
		while(n)
 27c:	41 15       	cp	r20, r1
 27e:	51 05       	cpc	r21, r1
 280:	71 f6       	brne	.-100    	; 0x21e <LCD_write_number+0x24>
 282:	0d c0       	rjmp	.+26     	; 0x29e <LCD_write_number+0xa4>
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
		{
			lcd_write_data(digits[j-1]);
 284:	e1 2f       	mov	r30, r17
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	8c 0f       	add	r24, r28
 290:	9d 1f       	adc	r25, r29
 292:	e8 0f       	add	r30, r24
 294:	f9 1f       	adc	r31, r25
 296:	80 81       	ld	r24, Z
 298:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write_data>
		{
			digits[i] = (uint8)(n%10 + '0');
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
 29c:	11 50       	subi	r17, 0x01	; 1
 29e:	11 11       	cpse	r17, r1
 2a0:	f1 cf       	rjmp	.-30     	; 0x284 <LCD_write_number+0x8a>
		{
			lcd_write_data(digits[j-1]);
		}
	}
}
 2a2:	2a 96       	adiw	r28, 0x0a	; 10
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	cd bf       	out	0x3d, r28	; 61
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	08 95       	ret

000002b6 <LCD_clear_next_chars>:
void LCD_clear_next_chars(uint8 n)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	d8 2f       	mov	r29, r24
	for(uint8 i = 0 ; i < n ; i++)
 2bc:	c0 e0       	ldi	r28, 0x00	; 0
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <LCD_clear_next_chars+0x12>
		LCD_write_char(' ');
 2c0:	80 e2       	ldi	r24, 0x20	; 32
 2c2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_write_char>
		}
	}
}
void LCD_clear_next_chars(uint8 n)
{
	for(uint8 i = 0 ; i < n ; i++)
 2c6:	cf 5f       	subi	r28, 0xFF	; 255
 2c8:	cd 17       	cp	r28, r29
 2ca:	d0 f3       	brcs	.-12     	; 0x2c0 <LCD_clear_next_chars+0xa>
		LCD_write_char(' ');
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <main>:
#include "MCAL/ADC/ADC.h"
volatile int x = 105;
int main(void)
{
	//sei();
	LCD_Init();
 2d2:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Init>
	GPIO_init_pin(GPIO_A , PIN_5 , GPIO_PIN_INPUT);
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	65 e0       	ldi	r22, 0x05	; 5
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <GPIO_init_pin>
	GPIO_enable_pull_up_res(GPIO_A , PIN_5);
 2e0:	65 e0       	ldi	r22, 0x05	; 5
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <GPIO_enable_pull_up_res>
	TIMER_Init(NORMAL , PRESCALER_8 );
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 57 04 	call	0x8ae	; 0x8ae <TIMER_Init>
	TIMER0_OV_interrupt_enable();
 2f0:	0e 94 8c 04 	call	0x918	; 0x918 <TIMER0_OV_interrupt_enable>
	LCD_write_string("5 + 6 = ??");
 2f4:	80 e7       	ldi	r24, 0x70	; 112
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_string>
	ADC_init(Single_Ended_Input_On_Channel_1_ADC1 , ADC_prescaler_8 ,VrefAt_Internal_2560mV);
 2fc:	43 e0       	ldi	r20, 0x03	; 3
 2fe:	63 e0       	ldi	r22, 0x03	; 3
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 9e 01 	call	0x33c	; 0x33c <ADC_init>
	ADC_set_auto_triggering(Free_Running_Mode);
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <ADC_set_auto_triggering>
    while (1) 
    {
		
		uint16 data = ADC_read();
 30c:	0e 94 44 02 	call	0x488	; 0x488 <ADC_read>
 310:	ec 01       	movw	r28, r24
		LCD_go_to(2 , 0);
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_go_to>
		LCD_write_string("LOL ");
 31a:	8b e7       	ldi	r24, 0x7B	; 123
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_string>
		LCD_write_number(data);
 322:	ce 01       	movw	r24, r28
 324:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_write_number>
		LCD_clear_next_chars(1);
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_clear_next_chars>
 32e:	87 ea       	ldi	r24, 0xA7	; 167
 330:	91 e6       	ldi	r25, 0x61	; 97
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <main+0x60>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x66>
 338:	00 00       	nop
 33a:	e8 cf       	rjmp	.-48     	; 0x30c <main+0x3a>

0000033c <ADC_init>:
{
	SET_BIT(ADCSRA , ADIE);
}
void ADC_clear_interrupt()
{
	CLEAR_BIT(ADCSRA , ADIE);
 33c:	80 31       	cpi	r24, 0x10	; 16
 33e:	08 f0       	brcs	.+2      	; 0x342 <ADC_init+0x6>
 340:	5a c0       	rjmp	.+180    	; 0x3f6 <ADC_init+0xba>
 342:	68 30       	cpi	r22, 0x08	; 8
 344:	08 f0       	brcs	.+2      	; 0x348 <ADC_init+0xc>
 346:	57 c0       	rjmp	.+174    	; 0x3f6 <ADC_init+0xba>
 348:	44 30       	cpi	r20, 0x04	; 4
 34a:	08 f0       	brcs	.+2      	; 0x34e <ADC_init+0x12>
 34c:	54 c0       	rjmp	.+168    	; 0x3f6 <ADC_init+0xba>
 34e:	42 30       	cpi	r20, 0x02	; 2
 350:	09 f4       	brne	.+2      	; 0x354 <ADC_init+0x18>
 352:	51 c0       	rjmp	.+162    	; 0x3f6 <ADC_init+0xba>
 354:	96 b1       	in	r25, 0x06	; 6
 356:	90 68       	ori	r25, 0x80	; 128
 358:	96 b9       	out	0x06, r25	; 6
 35a:	97 b1       	in	r25, 0x07	; 7
 35c:	9e 7f       	andi	r25, 0xFE	; 254
 35e:	58 2f       	mov	r21, r24
 360:	51 70       	andi	r21, 0x01	; 1
 362:	95 2b       	or	r25, r21
 364:	97 b9       	out	0x07, r25	; 7
 366:	97 b1       	in	r25, 0x07	; 7
 368:	9d 7f       	andi	r25, 0xFD	; 253
 36a:	58 2f       	mov	r21, r24
 36c:	52 70       	andi	r21, 0x02	; 2
 36e:	95 2b       	or	r25, r21
 370:	97 b9       	out	0x07, r25	; 7
 372:	97 b1       	in	r25, 0x07	; 7
 374:	9b 7f       	andi	r25, 0xFB	; 251
 376:	58 2f       	mov	r21, r24
 378:	54 70       	andi	r21, 0x04	; 4
 37a:	95 2b       	or	r25, r21
 37c:	97 b9       	out	0x07, r25	; 7
 37e:	97 b1       	in	r25, 0x07	; 7
 380:	97 7f       	andi	r25, 0xF7	; 247
 382:	58 2f       	mov	r21, r24
 384:	58 70       	andi	r21, 0x08	; 8
 386:	95 2b       	or	r25, r21
 388:	97 b9       	out	0x07, r25	; 7
 38a:	97 b1       	in	r25, 0x07	; 7
 38c:	9f 7e       	andi	r25, 0xEF	; 239
 38e:	80 71       	andi	r24, 0x10	; 16
 390:	89 2b       	or	r24, r25
 392:	87 b9       	out	0x07, r24	; 7
 394:	87 b1       	in	r24, 0x07	; 7
 396:	8f 7d       	andi	r24, 0xDF	; 223
 398:	87 b9       	out	0x07, r24	; 7
 39a:	87 b1       	in	r24, 0x07	; 7
 39c:	24 2f       	mov	r18, r20
 39e:	21 70       	andi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	00 24       	eor	r0, r0
 3a4:	36 95       	lsr	r19
 3a6:	27 95       	ror	r18
 3a8:	07 94       	ror	r0
 3aa:	36 95       	lsr	r19
 3ac:	27 95       	ror	r18
 3ae:	07 94       	ror	r0
 3b0:	32 2f       	mov	r19, r18
 3b2:	20 2d       	mov	r18, r0
 3b4:	8f 7b       	andi	r24, 0xBF	; 191
 3b6:	28 2b       	or	r18, r24
 3b8:	27 b9       	out	0x07, r18	; 7
 3ba:	87 b1       	in	r24, 0x07	; 7
 3bc:	42 70       	andi	r20, 0x02	; 2
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	55 95       	asr	r21
 3c2:	47 95       	ror	r20
 3c4:	56 95       	lsr	r21
 3c6:	54 2f       	mov	r21, r20
 3c8:	44 27       	eor	r20, r20
 3ca:	57 95       	ror	r21
 3cc:	47 95       	ror	r20
 3ce:	8f 77       	andi	r24, 0x7F	; 127
 3d0:	48 2b       	or	r20, r24
 3d2:	47 b9       	out	0x07, r20	; 7
 3d4:	86 b1       	in	r24, 0x06	; 6
 3d6:	8e 7f       	andi	r24, 0xFE	; 254
 3d8:	96 2f       	mov	r25, r22
 3da:	91 70       	andi	r25, 0x01	; 1
 3dc:	89 2b       	or	r24, r25
 3de:	86 b9       	out	0x06, r24	; 6
 3e0:	86 b1       	in	r24, 0x06	; 6
 3e2:	8d 7f       	andi	r24, 0xFD	; 253
 3e4:	96 2f       	mov	r25, r22
 3e6:	92 70       	andi	r25, 0x02	; 2
 3e8:	89 2b       	or	r24, r25
 3ea:	86 b9       	out	0x06, r24	; 6
 3ec:	86 b1       	in	r24, 0x06	; 6
 3ee:	8b 7f       	andi	r24, 0xFB	; 251
 3f0:	64 70       	andi	r22, 0x04	; 4
 3f2:	68 2b       	or	r22, r24
 3f4:	66 b9       	out	0x06, r22	; 6
 3f6:	08 95       	ret

000003f8 <ADC_set_auto_triggering>:
 3f8:	81 11       	cpse	r24, r1
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fc:	86 b1       	in	r24, 0x06	; 6
 3fe:	8f 7d       	andi	r24, 0xDF	; 223
 400:	86 b9       	out	0x06, r24	; 6
 402:	08 95       	ret
 404:	e0 b7       	in	r30, 0x30	; 48
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	bc 01       	movw	r22, r24
 40c:	61 70       	andi	r22, 0x01	; 1
 40e:	77 27       	eor	r23, r23
 410:	66 0f       	add	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	62 95       	swap	r22
 416:	72 95       	swap	r23
 418:	70 7f       	andi	r23, 0xF0	; 240
 41a:	76 27       	eor	r23, r22
 41c:	60 7f       	andi	r22, 0xF0	; 240
 41e:	76 27       	eor	r23, r22
 420:	9e 2f       	mov	r25, r30
 422:	9f 7d       	andi	r25, 0xDF	; 223
 424:	69 2b       	or	r22, r25
 426:	60 bf       	out	0x30, r22	; 48
 428:	90 b7       	in	r25, 0x30	; 48
 42a:	81 fb       	bst	r24, 1
 42c:	44 27       	eor	r20, r20
 42e:	40 f9       	bld	r20, 0
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	00 24       	eor	r0, r0
 434:	56 95       	lsr	r21
 436:	47 95       	ror	r20
 438:	07 94       	ror	r0
 43a:	56 95       	lsr	r21
 43c:	47 95       	ror	r20
 43e:	07 94       	ror	r0
 440:	54 2f       	mov	r21, r20
 442:	40 2d       	mov	r20, r0
 444:	9f 7b       	andi	r25, 0xBF	; 191
 446:	49 2b       	or	r20, r25
 448:	40 bf       	out	0x30, r20	; 48
 44a:	90 b7       	in	r25, 0x30	; 48
 44c:	82 fb       	bst	r24, 2
 44e:	22 27       	eor	r18, r18
 450:	20 f9       	bld	r18, 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	36 95       	lsr	r19
 456:	32 2f       	mov	r19, r18
 458:	22 27       	eor	r18, r18
 45a:	37 95       	ror	r19
 45c:	27 95       	ror	r18
 45e:	89 2f       	mov	r24, r25
 460:	8f 77       	andi	r24, 0x7F	; 127
 462:	28 2b       	or	r18, r24
 464:	20 bf       	out	0x30, r18	; 48
 466:	08 95       	ret

00000468 <ADC_start_conversion>:
 468:	86 b1       	in	r24, 0x06	; 6
 46a:	80 64       	ori	r24, 0x40	; 64
 46c:	86 b9       	out	0x06, r24	; 6
 46e:	08 95       	ret

00000470 <ADC_conversion_flag>:
 470:	86 b1       	in	r24, 0x06	; 6
 472:	80 71       	andi	r24, 0x10	; 16
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	95 95       	asr	r25
 478:	87 95       	ror	r24
 47a:	95 95       	asr	r25
 47c:	87 95       	ror	r24
 47e:	95 95       	asr	r25
 480:	87 95       	ror	r24
 482:	95 95       	asr	r25
 484:	87 95       	ror	r24
 486:	08 95       	ret

00000488 <ADC_read>:
}
uint16 ADC_read()
{
	ADC_start_conversion();
 488:	0e 94 34 02 	call	0x468	; 0x468 <ADC_start_conversion>
	while(ADC_conversion_flag() == 0);
 48c:	0e 94 38 02 	call	0x470	; 0x470 <ADC_conversion_flag>
 490:	88 23       	and	r24, r24
 492:	e1 f3       	breq	.-8      	; 0x48c <ADC_read+0x4>
	
	return  (ADCL + ADCH*256);
 494:	24 b1       	in	r18, 0x04	; 4
 496:	85 b1       	in	r24, 0x05	; 5
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	98 2f       	mov	r25, r24
 49c:	88 27       	eor	r24, r24
}
 49e:	82 0f       	add	r24, r18
 4a0:	91 1d       	adc	r25, r1
 4a2:	08 95       	ret

000004a4 <__vector_16>:

ISR(ADC_vect)
{
 4a4:	1f 92       	push	r1
 4a6:	0f 92       	push	r0
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	0f 92       	push	r0
 4ac:	11 24       	eor	r1, r1
 4ae:	2f 93       	push	r18
 4b0:	3f 93       	push	r19
 4b2:	4f 93       	push	r20
 4b4:	5f 93       	push	r21
 4b6:	6f 93       	push	r22
 4b8:	7f 93       	push	r23
 4ba:	8f 93       	push	r24
 4bc:	9f 93       	push	r25
 4be:	af 93       	push	r26
 4c0:	bf 93       	push	r27
 4c2:	ef 93       	push	r30
 4c4:	ff 93       	push	r31
	if(adc_isr != NULLPTR)
 4c6:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 4ca:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
 4ce:	30 97       	sbiw	r30, 0x00	; 0
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <__vector_16+0x30>
	{
		adc_isr();
 4d2:	09 95       	icall
	}
 4d4:	ff 91       	pop	r31
 4d6:	ef 91       	pop	r30
 4d8:	bf 91       	pop	r27
 4da:	af 91       	pop	r26
 4dc:	9f 91       	pop	r25
 4de:	8f 91       	pop	r24
 4e0:	7f 91       	pop	r23
 4e2:	6f 91       	pop	r22
 4e4:	5f 91       	pop	r21
 4e6:	4f 91       	pop	r20
 4e8:	3f 91       	pop	r19
 4ea:	2f 91       	pop	r18
 4ec:	0f 90       	pop	r0
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	0f 90       	pop	r0
 4f2:	1f 90       	pop	r1
 4f4:	18 95       	reti

000004f6 <GPIO_init_pin>:
	}
	else
	{
		return ((*(input_registers[reg])));
	}
}
 4f6:	84 30       	cpi	r24, 0x04	; 4
 4f8:	10 f5       	brcc	.+68     	; 0x53e <GPIO_init_pin+0x48>
 4fa:	68 30       	cpi	r22, 0x08	; 8
 4fc:	10 f5       	brcc	.+68     	; 0x542 <GPIO_init_pin+0x4c>
 4fe:	42 30       	cpi	r20, 0x02	; 2
 500:	10 f5       	brcc	.+68     	; 0x546 <GPIO_init_pin+0x50>
 502:	e8 2f       	mov	r30, r24
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	e8 59       	subi	r30, 0x98	; 152
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	01 90       	ld	r0, Z+
 510:	f0 81       	ld	r31, Z
 512:	e0 2d       	mov	r30, r0
 514:	20 81       	ld	r18, Z
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	06 2e       	mov	r0, r22
 51c:	02 c0       	rjmp	.+4      	; 0x522 <GPIO_init_pin+0x2c>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <GPIO_init_pin+0x28>
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <GPIO_init_pin+0x38>
 52a:	44 0f       	add	r20, r20
 52c:	55 1f       	adc	r21, r21
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <GPIO_init_pin+0x34>
 532:	80 95       	com	r24
 534:	82 23       	and	r24, r18
 536:	48 2b       	or	r20, r24
 538:	40 83       	st	Z, r20
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	08 95       	ret
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	08 95       	ret
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	08 95       	ret
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	08 95       	ret

0000054a <GPIO_init_port>:
 54a:	84 30       	cpi	r24, 0x04	; 4
 54c:	50 f4       	brcc	.+20     	; 0x562 <GPIO_init_port+0x18>
 54e:	e8 2f       	mov	r30, r24
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	e8 59       	subi	r30, 0x98	; 152
 558:	ff 4f       	sbci	r31, 0xFF	; 255
 55a:	01 90       	ld	r0, Z+
 55c:	f0 81       	ld	r31, Z
 55e:	e0 2d       	mov	r30, r0
 560:	60 83       	st	Z, r22
 562:	08 95       	ret

00000564 <GPIO_write_pin>:
 564:	84 30       	cpi	r24, 0x04	; 4
 566:	00 f5       	brcc	.+64     	; 0x5a8 <GPIO_write_pin+0x44>
 568:	68 30       	cpi	r22, 0x08	; 8
 56a:	00 f5       	brcc	.+64     	; 0x5ac <GPIO_write_pin+0x48>
 56c:	e8 2f       	mov	r30, r24
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	ee 0f       	add	r30, r30
 572:	ff 1f       	adc	r31, r31
 574:	e0 5a       	subi	r30, 0xA0	; 160
 576:	ff 4f       	sbci	r31, 0xFF	; 255
 578:	01 90       	ld	r0, Z+
 57a:	f0 81       	ld	r31, Z
 57c:	e0 2d       	mov	r30, r0
 57e:	20 81       	ld	r18, Z
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	06 2e       	mov	r0, r22
 586:	02 c0       	rjmp	.+4      	; 0x58c <GPIO_write_pin+0x28>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <GPIO_write_pin+0x24>
 590:	50 e0       	ldi	r21, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <GPIO_write_pin+0x34>
 594:	44 0f       	add	r20, r20
 596:	55 1f       	adc	r21, r21
 598:	6a 95       	dec	r22
 59a:	e2 f7       	brpl	.-8      	; 0x594 <GPIO_write_pin+0x30>
 59c:	80 95       	com	r24
 59e:	82 23       	and	r24, r18
 5a0:	48 2b       	or	r20, r24
 5a2:	40 83       	st	Z, r20
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	08 95       	ret
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	08 95       	ret

000005b0 <GPIO_write_port>:
 5b0:	84 30       	cpi	r24, 0x04	; 4
 5b2:	50 f4       	brcc	.+20     	; 0x5c8 <GPIO_write_port+0x18>
 5b4:	e8 2f       	mov	r30, r24
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	e0 5a       	subi	r30, 0xA0	; 160
 5be:	ff 4f       	sbci	r31, 0xFF	; 255
 5c0:	01 90       	ld	r0, Z+
 5c2:	f0 81       	ld	r31, Z
 5c4:	e0 2d       	mov	r30, r0
 5c6:	60 83       	st	Z, r22
 5c8:	08 95       	ret

000005ca <GPIO_enable_pull_up_res>:
//PULL up and PULL down internal resistors

GPIO_state_t GPIO_enable_pull_up_res(GPIO_port_name_t reg , uint8 pin)
{
	GPIO_state_t state = SUCCESS;
	if( NOT_VALID_PORT(reg)){
 5ca:	84 30       	cpi	r24, 0x04	; 4
 5cc:	50 f5       	brcc	.+84     	; 0x622 <GPIO_enable_pull_up_res+0x58>
		state = FAIL;
	}
	else if ( PIN_IS_OUTPUT((*(direction_regisers[reg])), pin) )
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	fc 01       	movw	r30, r24
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	e8 59       	subi	r30, 0x98	; 152
 5d8:	ff 4f       	sbci	r31, 0xFF	; 255
 5da:	01 90       	ld	r0, Z+
 5dc:	f0 81       	ld	r31, Z
 5de:	e0 2d       	mov	r30, r0
 5e0:	20 81       	ld	r18, Z
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	06 2e       	mov	r0, r22
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <GPIO_enable_pull_up_res+0x24>
 5ea:	44 0f       	add	r20, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	0a 94       	dec	r0
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <GPIO_enable_pull_up_res+0x20>
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	24 23       	and	r18, r20
 5f6:	35 23       	and	r19, r21
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <GPIO_enable_pull_up_res+0x34>
 5fa:	35 95       	asr	r19
 5fc:	27 95       	ror	r18
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <GPIO_enable_pull_up_res+0x30>
 602:	21 30       	cpi	r18, 0x01	; 1
 604:	31 05       	cpc	r19, r1
 606:	79 f0       	breq	.+30     	; 0x626 <GPIO_enable_pull_up_res+0x5c>
	{
		state = FAIL;
	}	
	else
	{
		SET_BIT(  (*(output_registers[reg])) ,pin);	
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	fc 01       	movw	r30, r24
 60e:	e0 5a       	subi	r30, 0xA0	; 160
 610:	ff 4f       	sbci	r31, 0xFF	; 255
 612:	01 90       	ld	r0, Z+
 614:	f0 81       	ld	r31, Z
 616:	e0 2d       	mov	r30, r0
 618:	80 81       	ld	r24, Z
 61a:	48 2b       	or	r20, r24
 61c:	40 83       	st	Z, r20

//PULL up and PULL down internal resistors

GPIO_state_t GPIO_enable_pull_up_res(GPIO_port_name_t reg , uint8 pin)
{
	GPIO_state_t state = SUCCESS;
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	08 95       	ret
	if( NOT_VALID_PORT(reg)){
		state = FAIL;
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	08 95       	ret
	}
	else if ( PIN_IS_OUTPUT((*(direction_regisers[reg])), pin) )
	{
		state = FAIL;
 626:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		SET_BIT(  (*(output_registers[reg])) ,pin);	
	}
	return state;
}
 628:	08 95       	ret

0000062a <__vector_1>:
	return EXT_SUCCESS;
}


ISR(INT0_vect)
{
 62a:	1f 92       	push	r1
 62c:	0f 92       	push	r0
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	0f 92       	push	r0
 632:	11 24       	eor	r1, r1
 634:	2f 93       	push	r18
 636:	3f 93       	push	r19
 638:	4f 93       	push	r20
 63a:	5f 93       	push	r21
 63c:	6f 93       	push	r22
 63e:	7f 93       	push	r23
 640:	8f 93       	push	r24
 642:	9f 93       	push	r25
 644:	af 93       	push	r26
 646:	bf 93       	push	r27
 648:	ef 93       	push	r30
 64a:	ff 93       	push	r31
	EXT_int0_isr();
 64c:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <EXT_int0_isr>
 650:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <EXT_int0_isr+0x1>
 654:	09 95       	icall
}
 656:	ff 91       	pop	r31
 658:	ef 91       	pop	r30
 65a:	bf 91       	pop	r27
 65c:	af 91       	pop	r26
 65e:	9f 91       	pop	r25
 660:	8f 91       	pop	r24
 662:	7f 91       	pop	r23
 664:	6f 91       	pop	r22
 666:	5f 91       	pop	r21
 668:	4f 91       	pop	r20
 66a:	3f 91       	pop	r19
 66c:	2f 91       	pop	r18
 66e:	0f 90       	pop	r0
 670:	0f be       	out	0x3f, r0	; 63
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <__vector_2>:
ISR(INT1_vect)
{
 678:	1f 92       	push	r1
 67a:	0f 92       	push	r0
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	0f 92       	push	r0
 680:	11 24       	eor	r1, r1
 682:	2f 93       	push	r18
 684:	3f 93       	push	r19
 686:	4f 93       	push	r20
 688:	5f 93       	push	r21
 68a:	6f 93       	push	r22
 68c:	7f 93       	push	r23
 68e:	8f 93       	push	r24
 690:	9f 93       	push	r25
 692:	af 93       	push	r26
 694:	bf 93       	push	r27
 696:	ef 93       	push	r30
 698:	ff 93       	push	r31
	EXT_int1_isr();
 69a:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <EXT_int1_isr>
 69e:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <EXT_int1_isr+0x1>
 6a2:	09 95       	icall
}
 6a4:	ff 91       	pop	r31
 6a6:	ef 91       	pop	r30
 6a8:	bf 91       	pop	r27
 6aa:	af 91       	pop	r26
 6ac:	9f 91       	pop	r25
 6ae:	8f 91       	pop	r24
 6b0:	7f 91       	pop	r23
 6b2:	6f 91       	pop	r22
 6b4:	5f 91       	pop	r21
 6b6:	4f 91       	pop	r20
 6b8:	3f 91       	pop	r19
 6ba:	2f 91       	pop	r18
 6bc:	0f 90       	pop	r0
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	0f 90       	pop	r0
 6c2:	1f 90       	pop	r1
 6c4:	18 95       	reti

000006c6 <__vector_3>:
ISR(INT2_vect)
{
 6c6:	1f 92       	push	r1
 6c8:	0f 92       	push	r0
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	0f 92       	push	r0
 6ce:	11 24       	eor	r1, r1
 6d0:	2f 93       	push	r18
 6d2:	3f 93       	push	r19
 6d4:	4f 93       	push	r20
 6d6:	5f 93       	push	r21
 6d8:	6f 93       	push	r22
 6da:	7f 93       	push	r23
 6dc:	8f 93       	push	r24
 6de:	9f 93       	push	r25
 6e0:	af 93       	push	r26
 6e2:	bf 93       	push	r27
 6e4:	ef 93       	push	r30
 6e6:	ff 93       	push	r31
	EXT_int2_isr();
 6e8:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <EXT_int2_isr>
 6ec:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <EXT_int2_isr+0x1>
 6f0:	09 95       	icall
 6f2:	ff 91       	pop	r31
 6f4:	ef 91       	pop	r30
 6f6:	bf 91       	pop	r27
 6f8:	af 91       	pop	r26
 6fa:	9f 91       	pop	r25
 6fc:	8f 91       	pop	r24
 6fe:	7f 91       	pop	r23
 700:	6f 91       	pop	r22
 702:	5f 91       	pop	r21
 704:	4f 91       	pop	r20
 706:	3f 91       	pop	r19
 708:	2f 91       	pop	r18
 70a:	0f 90       	pop	r0
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	0f 90       	pop	r0
 710:	1f 90       	pop	r1
 712:	18 95       	reti

00000714 <__vector_10>:
	{	
		timer0_overflow_isr();
	}
}*/
ISR(TIMER0_COMP)
{
 714:	1f 92       	push	r1
 716:	0f 92       	push	r0
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	0f 92       	push	r0
 71c:	11 24       	eor	r1, r1
 71e:	2f 93       	push	r18
 720:	3f 93       	push	r19
 722:	4f 93       	push	r20
 724:	5f 93       	push	r21
 726:	6f 93       	push	r22
 728:	7f 93       	push	r23
 72a:	8f 93       	push	r24
 72c:	9f 93       	push	r25
 72e:	af 93       	push	r26
 730:	bf 93       	push	r27
 732:	ef 93       	push	r30
 734:	ff 93       	push	r31
	if(timer0_compare_isr != NULLPTR)
 736:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <timer0_compare_isr>
 73a:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <timer0_compare_isr+0x1>
 73e:	30 97       	sbiw	r30, 0x00	; 0
 740:	09 f0       	breq	.+2      	; 0x744 <__vector_10+0x30>
	{
		timer0_compare_isr();
 742:	09 95       	icall
	}
}
 744:	ff 91       	pop	r31
 746:	ef 91       	pop	r30
 748:	bf 91       	pop	r27
 74a:	af 91       	pop	r26
 74c:	9f 91       	pop	r25
 74e:	8f 91       	pop	r24
 750:	7f 91       	pop	r23
 752:	6f 91       	pop	r22
 754:	5f 91       	pop	r21
 756:	4f 91       	pop	r20
 758:	3f 91       	pop	r19
 75a:	2f 91       	pop	r18
 75c:	0f 90       	pop	r0
 75e:	0f be       	out	0x3f, r0	; 63
 760:	0f 90       	pop	r0
 762:	1f 90       	pop	r1
 764:	18 95       	reti

00000766 <__vector_9>:


ISR(TIMER1_OVF)
{
 766:	1f 92       	push	r1
 768:	0f 92       	push	r0
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	0f 92       	push	r0
 76e:	11 24       	eor	r1, r1
 770:	2f 93       	push	r18
 772:	3f 93       	push	r19
 774:	4f 93       	push	r20
 776:	5f 93       	push	r21
 778:	6f 93       	push	r22
 77a:	7f 93       	push	r23
 77c:	8f 93       	push	r24
 77e:	9f 93       	push	r25
 780:	af 93       	push	r26
 782:	bf 93       	push	r27
 784:	ef 93       	push	r30
 786:	ff 93       	push	r31
	if(timer1_overflow_isr != NULLPTR)
 788:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <timer1_overflow_isr>
 78c:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <timer1_overflow_isr+0x1>
 790:	30 97       	sbiw	r30, 0x00	; 0
 792:	09 f0       	breq	.+2      	; 0x796 <__vector_9+0x30>
	{
		timer1_overflow_isr();
 794:	09 95       	icall
	}
}
 796:	ff 91       	pop	r31
 798:	ef 91       	pop	r30
 79a:	bf 91       	pop	r27
 79c:	af 91       	pop	r26
 79e:	9f 91       	pop	r25
 7a0:	8f 91       	pop	r24
 7a2:	7f 91       	pop	r23
 7a4:	6f 91       	pop	r22
 7a6:	5f 91       	pop	r21
 7a8:	4f 91       	pop	r20
 7aa:	3f 91       	pop	r19
 7ac:	2f 91       	pop	r18
 7ae:	0f 90       	pop	r0
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	0f 90       	pop	r0
 7b4:	1f 90       	pop	r1
 7b6:	18 95       	reti

000007b8 <__vector_7>:

ISR(TIMER1_COMPA)
{
 7b8:	1f 92       	push	r1
 7ba:	0f 92       	push	r0
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	0f 92       	push	r0
 7c0:	11 24       	eor	r1, r1
 7c2:	2f 93       	push	r18
 7c4:	3f 93       	push	r19
 7c6:	4f 93       	push	r20
 7c8:	5f 93       	push	r21
 7ca:	6f 93       	push	r22
 7cc:	7f 93       	push	r23
 7ce:	8f 93       	push	r24
 7d0:	9f 93       	push	r25
 7d2:	af 93       	push	r26
 7d4:	bf 93       	push	r27
 7d6:	ef 93       	push	r30
 7d8:	ff 93       	push	r31
	if(timer1_compare_a_isr != NULLPTR)
 7da:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <timer1_compare_a_isr>
 7de:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <timer1_compare_a_isr+0x1>
 7e2:	30 97       	sbiw	r30, 0x00	; 0
 7e4:	09 f0       	breq	.+2      	; 0x7e8 <__vector_7+0x30>
	{
		timer1_compare_a_isr();
 7e6:	09 95       	icall
	}
}
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	bf 91       	pop	r27
 7ee:	af 91       	pop	r26
 7f0:	9f 91       	pop	r25
 7f2:	8f 91       	pop	r24
 7f4:	7f 91       	pop	r23
 7f6:	6f 91       	pop	r22
 7f8:	5f 91       	pop	r21
 7fa:	4f 91       	pop	r20
 7fc:	3f 91       	pop	r19
 7fe:	2f 91       	pop	r18
 800:	0f 90       	pop	r0
 802:	0f be       	out	0x3f, r0	; 63
 804:	0f 90       	pop	r0
 806:	1f 90       	pop	r1
 808:	18 95       	reti

0000080a <__vector_8>:

ISR(TIMER1_COMPB)
{
 80a:	1f 92       	push	r1
 80c:	0f 92       	push	r0
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	0f 92       	push	r0
 812:	11 24       	eor	r1, r1
 814:	2f 93       	push	r18
 816:	3f 93       	push	r19
 818:	4f 93       	push	r20
 81a:	5f 93       	push	r21
 81c:	6f 93       	push	r22
 81e:	7f 93       	push	r23
 820:	8f 93       	push	r24
 822:	9f 93       	push	r25
 824:	af 93       	push	r26
 826:	bf 93       	push	r27
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
	if(timer1_compare_b_isr != NULLPTR)
 82c:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <timer1_compare_b_isr>
 830:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <timer1_compare_b_isr+0x1>
 834:	30 97       	sbiw	r30, 0x00	; 0
 836:	09 f0       	breq	.+2      	; 0x83a <__vector_8+0x30>
	{
		timer1_compare_b_isr();
 838:	09 95       	icall
	}
}
 83a:	ff 91       	pop	r31
 83c:	ef 91       	pop	r30
 83e:	bf 91       	pop	r27
 840:	af 91       	pop	r26
 842:	9f 91       	pop	r25
 844:	8f 91       	pop	r24
 846:	7f 91       	pop	r23
 848:	6f 91       	pop	r22
 84a:	5f 91       	pop	r21
 84c:	4f 91       	pop	r20
 84e:	3f 91       	pop	r19
 850:	2f 91       	pop	r18
 852:	0f 90       	pop	r0
 854:	0f be       	out	0x3f, r0	; 63
 856:	0f 90       	pop	r0
 858:	1f 90       	pop	r1
 85a:	18 95       	reti

0000085c <__vector_6>:

ISR(TIMER1_CAPT)
{
 85c:	1f 92       	push	r1
 85e:	0f 92       	push	r0
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	0f 92       	push	r0
 864:	11 24       	eor	r1, r1
 866:	2f 93       	push	r18
 868:	3f 93       	push	r19
 86a:	4f 93       	push	r20
 86c:	5f 93       	push	r21
 86e:	6f 93       	push	r22
 870:	7f 93       	push	r23
 872:	8f 93       	push	r24
 874:	9f 93       	push	r25
 876:	af 93       	push	r26
 878:	bf 93       	push	r27
 87a:	ef 93       	push	r30
 87c:	ff 93       	push	r31
	if(timer1_input_capture_isr != NULLPTR)
 87e:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <timer1_input_capture_isr>
 882:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <timer1_input_capture_isr+0x1>
 886:	30 97       	sbiw	r30, 0x00	; 0
 888:	09 f0       	breq	.+2      	; 0x88c <__stack+0x2d>
	{
		timer1_input_capture_isr();
 88a:	09 95       	icall
	}
}
 88c:	ff 91       	pop	r31
 88e:	ef 91       	pop	r30
 890:	bf 91       	pop	r27
 892:	af 91       	pop	r26
 894:	9f 91       	pop	r25
 896:	8f 91       	pop	r24
 898:	7f 91       	pop	r23
 89a:	6f 91       	pop	r22
 89c:	5f 91       	pop	r21
 89e:	4f 91       	pop	r20
 8a0:	3f 91       	pop	r19
 8a2:	2f 91       	pop	r18
 8a4:	0f 90       	pop	r0
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	0f 90       	pop	r0
 8aa:	1f 90       	pop	r1
 8ac:	18 95       	reti

000008ae <TIMER_Init>:

#include "TIMER0.h"

void TIMER_Init(TIMER_Mode_t mode , TIMER_Precaler_t pre)
{
	switch(mode)
 8ae:	81 30       	cpi	r24, 0x01	; 1
 8b0:	69 f0       	breq	.+26     	; 0x8cc <TIMER_Init+0x1e>
 8b2:	28 f0       	brcs	.+10     	; 0x8be <TIMER_Init+0x10>
 8b4:	82 30       	cpi	r24, 0x02	; 2
 8b6:	89 f0       	breq	.+34     	; 0x8da <TIMER_Init+0x2c>
 8b8:	83 30       	cpi	r24, 0x03	; 3
 8ba:	b1 f0       	breq	.+44     	; 0x8e8 <TIMER_Init+0x3a>
 8bc:	1b c0       	rjmp	.+54     	; 0x8f4 <TIMER_Init+0x46>
	{
		case NORMAL:
			CLEAR_BIT(TCCR0 , WGM00);
 8be:	83 b7       	in	r24, 0x33	; 51
 8c0:	8f 7b       	andi	r24, 0xBF	; 191
 8c2:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0 , WGM01);
 8c4:	83 b7       	in	r24, 0x33	; 51
 8c6:	87 7f       	andi	r24, 0xF7	; 247
 8c8:	83 bf       	out	0x33, r24	; 51
		break;
 8ca:	14 c0       	rjmp	.+40     	; 0x8f4 <TIMER_Init+0x46>
		
		case PHASE_CORRECTION_PWM:
			SET_BIT(TCCR0 , WGM00);
 8cc:	83 b7       	in	r24, 0x33	; 51
 8ce:	80 64       	ori	r24, 0x40	; 64
 8d0:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0 , WGM01);
 8d2:	83 b7       	in	r24, 0x33	; 51
 8d4:	87 7f       	andi	r24, 0xF7	; 247
 8d6:	83 bf       	out	0x33, r24	; 51
		break;
 8d8:	0d c0       	rjmp	.+26     	; 0x8f4 <TIMER_Init+0x46>
		
		case CTC:
			CLEAR_BIT(TCCR0 , WGM00);
 8da:	83 b7       	in	r24, 0x33	; 51
 8dc:	8f 7b       	andi	r24, 0xBF	; 191
 8de:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0 , WGM01);
 8e0:	83 b7       	in	r24, 0x33	; 51
 8e2:	88 60       	ori	r24, 0x08	; 8
 8e4:	83 bf       	out	0x33, r24	; 51
		break;
 8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <TIMER_Init+0x46>
		
		case FAST_PWM:
			SET_BIT(TCCR0 , WGM00);
 8e8:	83 b7       	in	r24, 0x33	; 51
 8ea:	80 64       	ori	r24, 0x40	; 64
 8ec:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0 , WGM01);
 8ee:	83 b7       	in	r24, 0x33	; 51
 8f0:	88 60       	ori	r24, 0x08	; 8
 8f2:	83 bf       	out	0x33, r24	; 51
		break;
	}
	
	WRITE_BIT(TCCR0 , CS00 , GET_BIT((uint8)pre , 0));
 8f4:	83 b7       	in	r24, 0x33	; 51
 8f6:	8e 7f       	andi	r24, 0xFE	; 254
 8f8:	96 2f       	mov	r25, r22
 8fa:	91 70       	andi	r25, 0x01	; 1
 8fc:	89 2b       	or	r24, r25
 8fe:	83 bf       	out	0x33, r24	; 51
	WRITE_BIT(TCCR0 , CS01 , GET_BIT((uint8)pre , 1));
 900:	83 b7       	in	r24, 0x33	; 51
 902:	8d 7f       	andi	r24, 0xFD	; 253
 904:	96 2f       	mov	r25, r22
 906:	92 70       	andi	r25, 0x02	; 2
 908:	89 2b       	or	r24, r25
 90a:	83 bf       	out	0x33, r24	; 51
	WRITE_BIT(TCCR0 , CS02 , GET_BIT((uint8)pre , 2));
 90c:	83 b7       	in	r24, 0x33	; 51
 90e:	8b 7f       	andi	r24, 0xFB	; 251
 910:	64 70       	andi	r22, 0x04	; 4
 912:	68 2b       	or	r22, r24
 914:	63 bf       	out	0x33, r22	; 51
 916:	08 95       	ret

00000918 <TIMER0_OV_interrupt_enable>:
}
void TIMER0_OV_interrupt_enable()
{
	SET_BIT(TIMSK , TOIE0);
 918:	89 b7       	in	r24, 0x39	; 57
 91a:	81 60       	ori	r24, 0x01	; 1
 91c:	89 bf       	out	0x39, r24	; 57
 91e:	08 95       	ret

00000920 <__umulhisi3>:
 920:	a2 9f       	mul	r26, r18
 922:	b0 01       	movw	r22, r0
 924:	b3 9f       	mul	r27, r19
 926:	c0 01       	movw	r24, r0
 928:	a3 9f       	mul	r26, r19
 92a:	70 0d       	add	r23, r0
 92c:	81 1d       	adc	r24, r1
 92e:	11 24       	eor	r1, r1
 930:	91 1d       	adc	r25, r1
 932:	b2 9f       	mul	r27, r18
 934:	70 0d       	add	r23, r0
 936:	81 1d       	adc	r24, r1
 938:	11 24       	eor	r1, r1
 93a:	91 1d       	adc	r25, r1
 93c:	08 95       	ret

0000093e <_exit>:
 93e:	f8 94       	cli

00000940 <__stop_program>:
 940:	ff cf       	rjmp	.-2      	; 0x940 <__stop_program>
