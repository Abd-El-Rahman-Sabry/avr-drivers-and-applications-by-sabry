
Hope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000086a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000086a  000008fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800074  00800074  00000912  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bc8  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec8  00000000  00000000  00003948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019c2  00000000  00000000  00004810  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a74  00000000  00000000  000061d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a6d  00000000  00000000  00006c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c1e  00000000  00000000  000086b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0000a2d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 aa 02 	jmp	0x554	; 0x554 <__vector_1>
   8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_2>
   c:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_6>
  1c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_7>
  20:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_8>
  24:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_9>
  28:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <main>
  8a:	0c 94 33 04 	jmp	0x866	; 0x866 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_write_data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	65 e0       	ldi	r22, 0x05	; 5
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
  aa:	4c 2f       	mov	r20, r28
  ac:	40 71       	andi	r20, 0x10	; 16
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	55 95       	asr	r21
  b2:	47 95       	ror	r20
  b4:	55 95       	asr	r21
  b6:	47 95       	ror	r20
  b8:	55 95       	asr	r21
  ba:	47 95       	ror	r20
  bc:	55 95       	asr	r21
  be:	47 95       	ror	r20
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
  c8:	4c 2f       	mov	r20, r28
  ca:	40 72       	andi	r20, 0x20	; 32
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	55 95       	asr	r21
  d0:	47 95       	ror	r20
  d2:	55 95       	asr	r21
  d4:	47 95       	ror	r20
  d6:	55 95       	asr	r21
  d8:	47 95       	ror	r20
  da:	55 95       	asr	r21
  dc:	47 95       	ror	r20
  de:	55 95       	asr	r21
  e0:	47 95       	ror	r20
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
  ea:	4c 2f       	mov	r20, r28
  ec:	40 74       	andi	r20, 0x40	; 64
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	04 2e       	mov	r0, r20
  f2:	45 2f       	mov	r20, r21
  f4:	00 0c       	add	r0, r0
  f6:	44 1f       	adc	r20, r20
  f8:	55 0b       	sbc	r21, r21
  fa:	00 0c       	add	r0, r0
  fc:	44 1f       	adc	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	62 e0       	ldi	r22, 0x02	; 2
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 108:	4c 2f       	mov	r20, r28
 10a:	44 1f       	adc	r20, r20
 10c:	44 27       	eor	r20, r20
 10e:	44 1f       	adc	r20, r20
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	66 e0       	ldi	r22, 0x06	; 6
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 122:	83 ef       	ldi	r24, 0xF3	; 243
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_write_data+0x94>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_write_data+0x9a>
 12c:	00 00       	nop
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	66 e0       	ldi	r22, 0x06	; 6
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 138:	83 ef       	ldi	r24, 0xF3	; 243
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_write_data+0xaa>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_write_data+0xb0>
 142:	00 00       	nop
 144:	4c 2f       	mov	r20, r28
 146:	41 70       	andi	r20, 0x01	; 1
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 150:	4c 2f       	mov	r20, r28
 152:	42 70       	andi	r20, 0x02	; 2
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	55 95       	asr	r21
 158:	47 95       	ror	r20
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 162:	4c 2f       	mov	r20, r28
 164:	44 70       	andi	r20, 0x04	; 4
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	55 95       	asr	r21
 16a:	47 95       	ror	r20
 16c:	55 95       	asr	r21
 16e:	47 95       	ror	r20
 170:	62 e0       	ldi	r22, 0x02	; 2
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 178:	c8 70       	andi	r28, 0x08	; 8
 17a:	4c 2f       	mov	r20, r28
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	55 95       	asr	r21
 180:	47 95       	ror	r20
 182:	55 95       	asr	r21
 184:	47 95       	ror	r20
 186:	55 95       	asr	r21
 188:	47 95       	ror	r20
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	66 e0       	ldi	r22, 0x06	; 6
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 19c:	83 ef       	ldi	r24, 0xF3	; 243
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_write_data+0x10e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_write_data+0x114>
 1a6:	00 00       	nop
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	66 e0       	ldi	r22, 0x06	; 6
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 1b2:	83 ef       	ldi	r24, 0xF3	; 243
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_write_data+0x124>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_write_data+0x12a>
 1bc:	00 00       	nop
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <lcd_write_command>:
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	65 e0       	ldi	r22, 0x05	; 5
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	64 e0       	ldi	r22, 0x04	; 4
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 1da:	4c 2f       	mov	r20, r28
 1dc:	40 71       	andi	r20, 0x10	; 16
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	55 95       	asr	r21
 1e2:	47 95       	ror	r20
 1e4:	55 95       	asr	r21
 1e6:	47 95       	ror	r20
 1e8:	55 95       	asr	r21
 1ea:	47 95       	ror	r20
 1ec:	55 95       	asr	r21
 1ee:	47 95       	ror	r20
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 1f8:	4c 2f       	mov	r20, r28
 1fa:	40 72       	andi	r20, 0x20	; 32
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	55 95       	asr	r21
 200:	47 95       	ror	r20
 202:	55 95       	asr	r21
 204:	47 95       	ror	r20
 206:	55 95       	asr	r21
 208:	47 95       	ror	r20
 20a:	55 95       	asr	r21
 20c:	47 95       	ror	r20
 20e:	55 95       	asr	r21
 210:	47 95       	ror	r20
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 21a:	4c 2f       	mov	r20, r28
 21c:	40 74       	andi	r20, 0x40	; 64
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	04 2e       	mov	r0, r20
 222:	45 2f       	mov	r20, r21
 224:	00 0c       	add	r0, r0
 226:	44 1f       	adc	r20, r20
 228:	55 0b       	sbc	r21, r21
 22a:	00 0c       	add	r0, r0
 22c:	44 1f       	adc	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 238:	4c 2f       	mov	r20, r28
 23a:	44 1f       	adc	r20, r20
 23c:	44 27       	eor	r20, r20
 23e:	44 1f       	adc	r20, r20
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	66 e0       	ldi	r22, 0x06	; 6
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 252:	83 ef       	ldi	r24, 0xF3	; 243
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_write_command+0x94>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_write_command+0x9a>
 25c:	00 00       	nop
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	66 e0       	ldi	r22, 0x06	; 6
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 268:	83 ef       	ldi	r24, 0xF3	; 243
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_write_command+0xaa>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_write_command+0xb0>
 272:	00 00       	nop
 274:	4c 2f       	mov	r20, r28
 276:	41 70       	andi	r20, 0x01	; 1
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 280:	4c 2f       	mov	r20, r28
 282:	42 70       	andi	r20, 0x02	; 2
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	55 95       	asr	r21
 288:	47 95       	ror	r20
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 292:	4c 2f       	mov	r20, r28
 294:	44 70       	andi	r20, 0x04	; 4
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	55 95       	asr	r21
 29a:	47 95       	ror	r20
 29c:	55 95       	asr	r21
 29e:	47 95       	ror	r20
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 2a8:	c8 70       	andi	r28, 0x08	; 8
 2aa:	4c 2f       	mov	r20, r28
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	55 95       	asr	r21
 2b0:	47 95       	ror	r20
 2b2:	55 95       	asr	r21
 2b4:	47 95       	ror	r20
 2b6:	55 95       	asr	r21
 2b8:	47 95       	ror	r20
 2ba:	63 e0       	ldi	r22, 0x03	; 3
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	66 e0       	ldi	r22, 0x06	; 6
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 2cc:	83 ef       	ldi	r24, 0xF3	; 243
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_write_command+0x10e>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_write_command+0x114>
 2d6:	00 00       	nop
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	66 e0       	ldi	r22, 0x06	; 6
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	0e 94 84 02 	call	0x508	; 0x508 <GPIO_write_pin>
 2e2:	83 ef       	ldi	r24, 0xF3	; 243
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_write_command+0x124>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <lcd_write_command+0x12a>
 2ec:	00 00       	nop
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <LCD_Init>:
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	64 e0       	ldi	r22, 0x04	; 4
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <GPIO_init_pin>
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	66 e0       	ldi	r22, 0x06	; 6
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <GPIO_init_pin>
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	65 e0       	ldi	r22, 0x05	; 5
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <GPIO_init_pin>
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <GPIO_init_pin>
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <GPIO_init_pin>
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	62 e0       	ldi	r22, 0x02	; 2
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <GPIO_init_pin>
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	63 e0       	ldi	r22, 0x03	; 3
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <GPIO_init_pin>
 338:	85 ea       	ldi	r24, 0xA5	; 165
 33a:	9e e0       	ldi	r25, 0x0E	; 14
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_Init+0x4a>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_Init+0x50>
 342:	00 00       	nop
 344:	83 e3       	ldi	r24, 0x33	; 51
 346:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 34a:	91 e2       	ldi	r25, 0x21	; 33
 34c:	9a 95       	dec	r25
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_Init+0x5a>
 350:	00 00       	nop
 352:	82 e3       	ldi	r24, 0x32	; 50
 354:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 358:	81 e2       	ldi	r24, 0x21	; 33
 35a:	8a 95       	dec	r24
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_Init+0x68>
 35e:	00 00       	nop
 360:	88 e2       	ldi	r24, 0x28	; 40
 362:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 366:	91 e2       	ldi	r25, 0x21	; 33
 368:	9a 95       	dec	r25
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_Init+0x76>
 36c:	00 00       	nop
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 374:	83 ef       	ldi	r24, 0xF3	; 243
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <LCD_Init+0x86>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_Init+0x8c>
 37e:	00 00       	nop
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 386:	83 ef       	ldi	r24, 0xF3	; 243
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_Init+0x98>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_Init+0x9e>
 390:	00 00       	nop
 392:	8c e0       	ldi	r24, 0x0C	; 12
 394:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 398:	91 e2       	ldi	r25, 0x21	; 33
 39a:	9a 95       	dec	r25
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_Init+0xa8>
 39e:	00 00       	nop
 3a0:	08 95       	ret

000003a2 <LCD_write_char>:
 3a2:	18 16       	cp	r1, r24
 3a4:	14 f4       	brge	.+4      	; 0x3aa <LCD_write_char+0x8>
 3a6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_data>
 3aa:	08 95       	ret

000003ac <LCD_write_string>:
{
	lcd_write_command(0x01);
	_delay_ms(2);
}
void LCD_write_string(sint8 *str)
{
 3ac:	0f 93       	push	r16
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	8c 01       	movw	r16, r24
	uint8 c = 0;
 3b4:	c0 e0       	ldi	r28, 0x00	; 0
	while ( str[c] )
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <LCD_write_string+0x12>
	{
		LCD_write_char(str[c++]);
 3b8:	cf 5f       	subi	r28, 0xFF	; 255
 3ba:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_write_char>
	_delay_ms(2);
}
void LCD_write_string(sint8 *str)
{
	uint8 c = 0;
	while ( str[c] )
 3be:	f8 01       	movw	r30, r16
 3c0:	ec 0f       	add	r30, r28
 3c2:	f1 1d       	adc	r31, r1
 3c4:	80 81       	ld	r24, Z
 3c6:	81 11       	cpse	r24, r1
 3c8:	f7 cf       	rjmp	.-18     	; 0x3b8 <LCD_write_string+0xc>
	{
		LCD_write_char(str[c++]);
	}
}
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <LCD_go_to>:

void LCD_go_to(uint8 row , uint8 col)
{
	if(row == 1)
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	39 f4       	brne	.+14     	; 0x3e4 <LCD_go_to+0x12>
	{
		if(col < MAX_COL)
 3d6:	60 31       	cpi	r22, 0x10	; 16
 3d8:	68 f4       	brcc	.+26     	; 0x3f4 <LCD_go_to+0x22>
		{
			lcd_write_command((0x80+col));
 3da:	80 e8       	ldi	r24, 0x80	; 128
 3dc:	86 0f       	add	r24, r22
 3de:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 3e2:	08 95       	ret
		}
	}
	else if(row == 2)
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	31 f4       	brne	.+12     	; 0x3f4 <LCD_go_to+0x22>
	{
		if(col < MAX_COL)
 3e8:	60 31       	cpi	r22, 0x10	; 16
 3ea:	20 f4       	brcc	.+8      	; 0x3f4 <LCD_go_to+0x22>
		{
			lcd_write_command((0xC0+col));
 3ec:	80 ec       	ldi	r24, 0xC0	; 192
 3ee:	86 0f       	add	r24, r22
 3f0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_command>
 3f4:	08 95       	ret

000003f6 <main>:
#include "MCAL/UART/UART.h"



int main(void)
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	c4 56       	subi	r28, 0x64	; 100
 400:	d1 09       	sbc	r29, r1
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
	int x = 0;
	UART_init();
 40c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <UART_init>
	//GPIO_enable_pull_up_res(GPIO_A, PIN_2);
	LCD_Init();
 410:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Init>
	//Initialize LCD for debugging
	GPIO_init_pin(GPIO_D , PIN_0 , GPIO_PIN_INPUT);
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <GPIO_init_pin>
	GPIO_init_pin(GPIO_D , PIN_1 , GPIO_PIN_OUTPUT);
 41e:	41 e0       	ldi	r20, 0x01	; 1
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	83 e0       	ldi	r24, 0x03	; 3
 424:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <GPIO_init_pin>
	GPIO_init_pin(GPIO_A , PIN_1 , GPIO_PIN_OUTPUT);
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <GPIO_init_pin>
	LCD_write_string("RX ");
 432:	80 e7       	ldi	r24, 0x70	; 112
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_write_string>
	uint8 str[100] = {0};
 43a:	fe 01       	movw	r30, r28
 43c:	31 96       	adiw	r30, 0x01	; 1
 43e:	84 e6       	ldi	r24, 0x64	; 100
 440:	df 01       	movw	r26, r30
 442:	1d 92       	st	X+, r1
 444:	8a 95       	dec	r24
 446:	e9 f7       	brne	.-6      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	while (1) 
    {
		UART_receive_string(str);
 448:	ce 01       	movw	r24, r28
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	0e 94 12 04 	call	0x824	; 0x824 <UART_receive_string>
		LCD_go_to(0,0);
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCD_go_to>
		LCD_write_string(str);
 458:	ce 01       	movw	r24, r28
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_write_string>
 460:	f3 cf       	rjmp	.-26     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>

00000462 <__vector_16>:
	
	return  (ADCL + ADCH*256);
}

ISR(ADC_vect)
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
	if(adc_isr != NULLPTR)
 484:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 488:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 48c:	30 97       	sbiw	r30, 0x00	; 0
 48e:	09 f0       	breq	.+2      	; 0x492 <__vector_16+0x30>
	{
		adc_isr();
 490:	09 95       	icall
	}
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	7f 91       	pop	r23
 4a0:	6f 91       	pop	r22
 4a2:	5f 91       	pop	r21
 4a4:	4f 91       	pop	r20
 4a6:	3f 91       	pop	r19
 4a8:	2f 91       	pop	r18
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <GPIO_init_pin>:
		{
			return;
		}
		else
		{
			PORT_CLEAR_MASK((*(direction_regisers[reg])),mask);
 4b4:	84 30       	cpi	r24, 0x04	; 4
 4b6:	10 f5       	brcc	.+68     	; 0x4fc <GPIO_init_pin+0x48>
 4b8:	68 30       	cpi	r22, 0x08	; 8
 4ba:	10 f5       	brcc	.+68     	; 0x500 <GPIO_init_pin+0x4c>
 4bc:	42 30       	cpi	r20, 0x02	; 2
 4be:	10 f5       	brcc	.+68     	; 0x504 <GPIO_init_pin+0x50>
 4c0:	e8 2f       	mov	r30, r24
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	e8 59       	subi	r30, 0x98	; 152
 4ca:	ff 4f       	sbci	r31, 0xFF	; 255
 4cc:	01 90       	ld	r0, Z+
 4ce:	f0 81       	ld	r31, Z
 4d0:	e0 2d       	mov	r30, r0
 4d2:	20 81       	ld	r18, Z
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	06 2e       	mov	r0, r22
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <GPIO_init_pin+0x2c>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <GPIO_init_pin+0x28>
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <GPIO_init_pin+0x38>
 4e8:	44 0f       	add	r20, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <GPIO_init_pin+0x34>
 4f0:	80 95       	com	r24
 4f2:	82 23       	and	r24, r18
 4f4:	48 2b       	or	r20, r24
 4f6:	40 83       	st	Z, r20
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	08 95       	ret
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	08 95       	ret
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	08 95       	ret
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	08 95       	ret

00000508 <GPIO_write_pin>:
//write functions

GPIO_state_t GPIO_write_pin(GPIO_port_name_t reg , uint8 pin , uint8 data)
{
		GPIO_state_t state = SUCCESS;
		if( NOT_VALID_PORT(reg) || NOT_VALID_PIN(pin) )
 508:	84 30       	cpi	r24, 0x04	; 4
 50a:	00 f5       	brcc	.+64     	; 0x54c <GPIO_write_pin+0x44>
 50c:	68 30       	cpi	r22, 0x08	; 8
 50e:	00 f5       	brcc	.+64     	; 0x550 <GPIO_write_pin+0x48>
		{
			state = FAIL;
		}
		else
		{
			WRITE_BIT( (*(output_registers[reg])) , pin , data);
 510:	e8 2f       	mov	r30, r24
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	ee 0f       	add	r30, r30
 516:	ff 1f       	adc	r31, r31
 518:	e0 5a       	subi	r30, 0xA0	; 160
 51a:	ff 4f       	sbci	r31, 0xFF	; 255
 51c:	01 90       	ld	r0, Z+
 51e:	f0 81       	ld	r31, Z
 520:	e0 2d       	mov	r30, r0
 522:	20 81       	ld	r18, Z
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	06 2e       	mov	r0, r22
 52a:	02 c0       	rjmp	.+4      	; 0x530 <GPIO_write_pin+0x28>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	0a 94       	dec	r0
 532:	e2 f7       	brpl	.-8      	; 0x52c <GPIO_write_pin+0x24>
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <GPIO_write_pin+0x34>
 538:	44 0f       	add	r20, r20
 53a:	55 1f       	adc	r21, r21
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <GPIO_write_pin+0x30>
 540:	80 95       	com	r24
 542:	82 23       	and	r24, r18
 544:	48 2b       	or	r20, r24
 546:	40 83       	st	Z, r20

//write functions

GPIO_state_t GPIO_write_pin(GPIO_port_name_t reg , uint8 pin , uint8 data)
{
		GPIO_state_t state = SUCCESS;
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	08 95       	ret
		if( NOT_VALID_PORT(reg) || NOT_VALID_PIN(pin) )
		{
			state = FAIL;
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	08 95       	ret
 550:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			WRITE_BIT( (*(output_registers[reg])) , pin , data);
		}
		return state;
}
 552:	08 95       	ret

00000554 <__vector_1>:
	return EXT_SUCCESS;
}


ISR(INT0_vect)
{
 554:	1f 92       	push	r1
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	0f 92       	push	r0
 55c:	11 24       	eor	r1, r1
 55e:	2f 93       	push	r18
 560:	3f 93       	push	r19
 562:	4f 93       	push	r20
 564:	5f 93       	push	r21
 566:	6f 93       	push	r22
 568:	7f 93       	push	r23
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
	EXT_int0_isr();
 576:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <EXT_int0_isr>
 57a:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <EXT_int0_isr+0x1>
 57e:	09 95       	icall
}
 580:	ff 91       	pop	r31
 582:	ef 91       	pop	r30
 584:	bf 91       	pop	r27
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <__vector_2>:
ISR(INT1_vect)
{
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
	EXT_int1_isr();
 5c4:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <EXT_int1_isr>
 5c8:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <EXT_int1_isr+0x1>
 5cc:	09 95       	icall
}
 5ce:	ff 91       	pop	r31
 5d0:	ef 91       	pop	r30
 5d2:	bf 91       	pop	r27
 5d4:	af 91       	pop	r26
 5d6:	9f 91       	pop	r25
 5d8:	8f 91       	pop	r24
 5da:	7f 91       	pop	r23
 5dc:	6f 91       	pop	r22
 5de:	5f 91       	pop	r21
 5e0:	4f 91       	pop	r20
 5e2:	3f 91       	pop	r19
 5e4:	2f 91       	pop	r18
 5e6:	0f 90       	pop	r0
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	0f 90       	pop	r0
 5ec:	1f 90       	pop	r1
 5ee:	18 95       	reti

000005f0 <__vector_3>:
ISR(INT2_vect)
{
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	2f 93       	push	r18
 5fc:	3f 93       	push	r19
 5fe:	4f 93       	push	r20
 600:	5f 93       	push	r21
 602:	6f 93       	push	r22
 604:	7f 93       	push	r23
 606:	8f 93       	push	r24
 608:	9f 93       	push	r25
 60a:	af 93       	push	r26
 60c:	bf 93       	push	r27
 60e:	ef 93       	push	r30
 610:	ff 93       	push	r31
	EXT_int2_isr();
 612:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <EXT_int2_isr>
 616:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <EXT_int2_isr+0x1>
 61a:	09 95       	icall
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	bf 91       	pop	r27
 622:	af 91       	pop	r26
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	7f 91       	pop	r23
 62a:	6f 91       	pop	r22
 62c:	5f 91       	pop	r21
 62e:	4f 91       	pop	r20
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <__vector_10>:
	{	
		timer0_overflow_isr();
	}
}*/
ISR(TIMER0_COMP)
{
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	2f 93       	push	r18
 64a:	3f 93       	push	r19
 64c:	4f 93       	push	r20
 64e:	5f 93       	push	r21
 650:	6f 93       	push	r22
 652:	7f 93       	push	r23
 654:	8f 93       	push	r24
 656:	9f 93       	push	r25
 658:	af 93       	push	r26
 65a:	bf 93       	push	r27
 65c:	ef 93       	push	r30
 65e:	ff 93       	push	r31
	if(timer0_compare_isr != NULLPTR)
 660:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <timer0_compare_isr>
 664:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <timer0_compare_isr+0x1>
 668:	30 97       	sbiw	r30, 0x00	; 0
 66a:	09 f0       	breq	.+2      	; 0x66e <__vector_10+0x30>
	{
		timer0_compare_isr();
 66c:	09 95       	icall
	}
}
 66e:	ff 91       	pop	r31
 670:	ef 91       	pop	r30
 672:	bf 91       	pop	r27
 674:	af 91       	pop	r26
 676:	9f 91       	pop	r25
 678:	8f 91       	pop	r24
 67a:	7f 91       	pop	r23
 67c:	6f 91       	pop	r22
 67e:	5f 91       	pop	r21
 680:	4f 91       	pop	r20
 682:	3f 91       	pop	r19
 684:	2f 91       	pop	r18
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__vector_9>:


ISR(TIMER1_OVF)
{
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	4f 93       	push	r20
 6a0:	5f 93       	push	r21
 6a2:	6f 93       	push	r22
 6a4:	7f 93       	push	r23
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	af 93       	push	r26
 6ac:	bf 93       	push	r27
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31
	if(timer1_overflow_isr != NULLPTR)
 6b2:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <timer1_overflow_isr>
 6b6:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <timer1_overflow_isr+0x1>
 6ba:	30 97       	sbiw	r30, 0x00	; 0
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <__vector_9+0x30>
	{
		timer1_overflow_isr();
 6be:	09 95       	icall
	}
}
 6c0:	ff 91       	pop	r31
 6c2:	ef 91       	pop	r30
 6c4:	bf 91       	pop	r27
 6c6:	af 91       	pop	r26
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	7f 91       	pop	r23
 6ce:	6f 91       	pop	r22
 6d0:	5f 91       	pop	r21
 6d2:	4f 91       	pop	r20
 6d4:	3f 91       	pop	r19
 6d6:	2f 91       	pop	r18
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <__vector_7>:

ISR(TIMER1_COMPA)
{
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	2f 93       	push	r18
 6ee:	3f 93       	push	r19
 6f0:	4f 93       	push	r20
 6f2:	5f 93       	push	r21
 6f4:	6f 93       	push	r22
 6f6:	7f 93       	push	r23
 6f8:	8f 93       	push	r24
 6fa:	9f 93       	push	r25
 6fc:	af 93       	push	r26
 6fe:	bf 93       	push	r27
 700:	ef 93       	push	r30
 702:	ff 93       	push	r31
	if(timer1_compare_a_isr != NULLPTR)
 704:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <timer1_compare_a_isr>
 708:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <timer1_compare_a_isr+0x1>
 70c:	30 97       	sbiw	r30, 0x00	; 0
 70e:	09 f0       	breq	.+2      	; 0x712 <__vector_7+0x30>
	{
		timer1_compare_a_isr();
 710:	09 95       	icall
	}
}
 712:	ff 91       	pop	r31
 714:	ef 91       	pop	r30
 716:	bf 91       	pop	r27
 718:	af 91       	pop	r26
 71a:	9f 91       	pop	r25
 71c:	8f 91       	pop	r24
 71e:	7f 91       	pop	r23
 720:	6f 91       	pop	r22
 722:	5f 91       	pop	r21
 724:	4f 91       	pop	r20
 726:	3f 91       	pop	r19
 728:	2f 91       	pop	r18
 72a:	0f 90       	pop	r0
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	0f 90       	pop	r0
 730:	1f 90       	pop	r1
 732:	18 95       	reti

00000734 <__vector_8>:

ISR(TIMER1_COMPB)
{
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	2f 93       	push	r18
 740:	3f 93       	push	r19
 742:	4f 93       	push	r20
 744:	5f 93       	push	r21
 746:	6f 93       	push	r22
 748:	7f 93       	push	r23
 74a:	8f 93       	push	r24
 74c:	9f 93       	push	r25
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
	if(timer1_compare_b_isr != NULLPTR)
 756:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <timer1_compare_b_isr>
 75a:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <timer1_compare_b_isr+0x1>
 75e:	30 97       	sbiw	r30, 0x00	; 0
 760:	09 f0       	breq	.+2      	; 0x764 <__vector_8+0x30>
	{
		timer1_compare_b_isr();
 762:	09 95       	icall
	}
}
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	bf 91       	pop	r27
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	7f 91       	pop	r23
 772:	6f 91       	pop	r22
 774:	5f 91       	pop	r21
 776:	4f 91       	pop	r20
 778:	3f 91       	pop	r19
 77a:	2f 91       	pop	r18
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <__vector_6>:

ISR(TIMER1_CAPT)
{
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	2f 93       	push	r18
 792:	3f 93       	push	r19
 794:	4f 93       	push	r20
 796:	5f 93       	push	r21
 798:	6f 93       	push	r22
 79a:	7f 93       	push	r23
 79c:	8f 93       	push	r24
 79e:	9f 93       	push	r25
 7a0:	af 93       	push	r26
 7a2:	bf 93       	push	r27
 7a4:	ef 93       	push	r30
 7a6:	ff 93       	push	r31
	if(timer1_input_capture_isr != NULLPTR)
 7a8:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <timer1_input_capture_isr>
 7ac:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <timer1_input_capture_isr+0x1>
 7b0:	30 97       	sbiw	r30, 0x00	; 0
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <__vector_6+0x30>
	{
		timer1_input_capture_isr();
 7b4:	09 95       	icall
	}
}
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	bf 91       	pop	r27
 7bc:	af 91       	pop	r26
 7be:	9f 91       	pop	r25
 7c0:	8f 91       	pop	r24
 7c2:	7f 91       	pop	r23
 7c4:	6f 91       	pop	r22
 7c6:	5f 91       	pop	r21
 7c8:	4f 91       	pop	r20
 7ca:	3f 91       	pop	r19
 7cc:	2f 91       	pop	r18
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti

000007d8 <UART_init>:


void UART_send_byte(uint8 data)
{
	while (!GET_BIT(UCSRA , UDRE));
	UDR = data;
 7d8:	10 bc       	out	0x20, r1	; 32
 7da:	83 e3       	ldi	r24, 0x33	; 51
 7dc:	89 b9       	out	0x09, r24	; 9
 7de:	8b b1       	in	r24, 0x0b	; 11
 7e0:	8d 7f       	andi	r24, 0xFD	; 253
 7e2:	8b b9       	out	0x0b, r24	; 11
 7e4:	8a b1       	in	r24, 0x0a	; 10
 7e6:	80 61       	ori	r24, 0x10	; 16
 7e8:	8a b9       	out	0x0a, r24	; 10
 7ea:	8a b1       	in	r24, 0x0a	; 10
 7ec:	88 60       	ori	r24, 0x08	; 8
 7ee:	8a b9       	out	0x0a, r24	; 10
 7f0:	80 b5       	in	r24, 0x20	; 32
 7f2:	8f 7b       	andi	r24, 0xBF	; 191
 7f4:	80 bd       	out	0x20, r24	; 32
 7f6:	80 b5       	in	r24, 0x20	; 32
 7f8:	8f 7e       	andi	r24, 0xEF	; 239
 7fa:	80 bd       	out	0x20, r24	; 32
 7fc:	80 b5       	in	r24, 0x20	; 32
 7fe:	8f 7d       	andi	r24, 0xDF	; 223
 800:	80 bd       	out	0x20, r24	; 32
 802:	80 b5       	in	r24, 0x20	; 32
 804:	87 7f       	andi	r24, 0xF7	; 247
 806:	80 bd       	out	0x20, r24	; 32
 808:	80 b5       	in	r24, 0x20	; 32
 80a:	82 60       	ori	r24, 0x02	; 2
 80c:	80 bd       	out	0x20, r24	; 32
 80e:	80 b5       	in	r24, 0x20	; 32
 810:	84 60       	ori	r24, 0x04	; 4
 812:	80 bd       	out	0x20, r24	; 32
 814:	8a b1       	in	r24, 0x0a	; 10
 816:	8b 7f       	andi	r24, 0xFB	; 251
 818:	8a b9       	out	0x0a, r24	; 10
 81a:	08 95       	ret

0000081c <UART_receive_byte>:
}
uint8 UART_receive_byte()
{
	while (!GET_BIT(UCSRA , RXC));
 81c:	5f 9b       	sbis	0x0b, 7	; 11
 81e:	fe cf       	rjmp	.-4      	; 0x81c <UART_receive_byte>
	return UDR;
 820:	8c b1       	in	r24, 0x0c	; 12
}
 822:	08 95       	ret

00000824 <UART_receive_string>:
		UART_send_byte(str[i]);
	}
}

void UART_receive_string(uint8 *str)
{
 824:	ef 92       	push	r14
 826:	ff 92       	push	r15
 828:	0f 93       	push	r16
 82a:	1f 93       	push	r17
 82c:	cf 93       	push	r28
 82e:	8c 01       	movw	r16, r24
	uint8 i = 0;
	str[i] = UART_receive_byte();
 830:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_receive_byte>
 834:	f8 01       	movw	r30, r16
 836:	80 83       	st	Z, r24
	}
}

void UART_receive_string(uint8 *str)
{
	uint8 i = 0;
 838:	c0 e0       	ldi	r28, 0x00	; 0
	str[i] = UART_receive_byte();
	while(str[i] != '\t')
 83a:	08 c0       	rjmp	.+16     	; 0x84c <UART_receive_string+0x28>
	{
		i++;
 83c:	cf 5f       	subi	r28, 0xFF	; 255
		str[i] = UART_receive_byte();
 83e:	78 01       	movw	r14, r16
 840:	ec 0e       	add	r14, r28
 842:	f1 1c       	adc	r15, r1
 844:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_receive_byte>
 848:	f7 01       	movw	r30, r14
 84a:	80 83       	st	Z, r24

void UART_receive_string(uint8 *str)
{
	uint8 i = 0;
	str[i] = UART_receive_byte();
	while(str[i] != '\t')
 84c:	f8 01       	movw	r30, r16
 84e:	ec 0f       	add	r30, r28
 850:	f1 1d       	adc	r31, r1
 852:	80 81       	ld	r24, Z
 854:	89 30       	cpi	r24, 0x09	; 9
 856:	91 f7       	brne	.-28     	; 0x83c <UART_receive_string+0x18>
	{
		i++;
		str[i] = UART_receive_byte();
	}
	str[i] = 0;
 858:	10 82       	st	Z, r1
}
 85a:	cf 91       	pop	r28
 85c:	1f 91       	pop	r17
 85e:	0f 91       	pop	r16
 860:	ff 90       	pop	r15
 862:	ef 90       	pop	r14
 864:	08 95       	ret

00000866 <_exit>:
 866:	f8 94       	cli

00000868 <__stop_program>:
 868:	ff cf       	rjmp	.-2      	; 0x868 <__stop_program>
