
Hope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000009fc  00000a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800084  00800084  00000ab4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002be9  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed2  00000000  00000000  00003a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017d0  00000000  00000000  0000495b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000960  00000000  00000000  0000612c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019be  00000000  00000000  00006a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a95  00000000  00000000  0000844a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  00009edf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_1>
   8:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_2>
   c:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 c4 04 	jmp	0x988	; 0x988 <__vector_6>
  1c:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__vector_7>
  20:	0c 94 9b 04 	jmp	0x936	; 0x936 <__vector_8>
  24:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_9>
  28:	0c 94 20 04 	jmp	0x840	; 0x840 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d7 02 	call	0x5ae	; 0x5ae <main>
  8a:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Button_listen>:
#include <util/delay.h>



void Button_listen(Button *btn)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
	switch(btn->current_state)
  98:	8c 81       	ldd	r24, Y+4	; 0x04
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	81 f0       	breq	.+32     	; 0xbe <Button_listen+0x2c>
  9e:	28 f0       	brcs	.+10     	; 0xaa <Button_listen+0x18>
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	f9 f0       	breq	.+62     	; 0xe2 <Button_listen+0x50>
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	a1 f1       	breq	.+104    	; 0x110 <Button_listen+0x7e>
  a8:	44 c0       	rjmp	.+136    	; 0x132 <Button_listen+0xa0>
	{
		case NOT_PRESSED:
		
		if(GPIO_read_pin(btn->port , btn->pin) == btn->sense)
  aa:	6e 81       	ldd	r22, Y+6	; 0x06
  ac:	8d 81       	ldd	r24, Y+5	; 0x05
  ae:	0e 94 86 03 	call	0x70c	; 0x70c <GPIO_read_pin>
  b2:	98 81       	ld	r25, Y
  b4:	89 13       	cpse	r24, r25
  b6:	3d c0       	rjmp	.+122    	; 0x132 <Button_listen+0xa0>
			{btn->current_state = MAYBE_PRESSED;}
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	8c 83       	std	Y+4, r24	; 0x04
  bc:	3a c0       	rjmp	.+116    	; 0x132 <Button_listen+0xa0>
			
		break;
		
		case MAYBE_PRESSED:
		
		if(GPIO_read_pin(btn->port , btn->pin) == btn->sense)
  be:	6e 81       	ldd	r22, Y+6	; 0x06
  c0:	8d 81       	ldd	r24, Y+5	; 0x05
  c2:	0e 94 86 03 	call	0x70c	; 0x70c <GPIO_read_pin>
  c6:	98 81       	ld	r25, Y
  c8:	89 13       	cpse	r24, r25
  ca:	09 c0       	rjmp	.+18     	; 0xde <Button_listen+0x4c>
			{
				btn->current_state = NOT_RELEASED;
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	8c 83       	std	Y+4, r24	; 0x04
				if(btn->evt == ON_KEY_DOWN)
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	81 11       	cpse	r24, r1
  d4:	2e c0       	rjmp	.+92     	; 0x132 <Button_listen+0xa0>
					{
						btn->callback();
  d6:	ea 81       	ldd	r30, Y+2	; 0x02
  d8:	fb 81       	ldd	r31, Y+3	; 0x03
  da:	09 95       	icall
  dc:	2a c0       	rjmp	.+84     	; 0x132 <Button_listen+0xa0>
					}
			}
		
		else {btn->current_state = NOT_PRESSED;}
  de:	1c 82       	std	Y+4, r1	; 0x04
  e0:	28 c0       	rjmp	.+80     	; 0x132 <Button_listen+0xa0>
		
		break;
		
		case NOT_RELEASED:
				if(GPIO_read_pin(btn->port , btn->pin) == btn->sense)
  e2:	6e 81       	ldd	r22, Y+6	; 0x06
  e4:	8d 81       	ldd	r24, Y+5	; 0x05
  e6:	0e 94 86 03 	call	0x70c	; 0x70c <GPIO_read_pin>
  ea:	98 81       	ld	r25, Y
  ec:	89 13       	cpse	r24, r25
  ee:	0d c0       	rjmp	.+26     	; 0x10a <Button_listen+0x78>
				{
					if(btn->evt == ON_KEY_PRESSED)
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	19 f4       	brne	.+6      	; 0xfc <Button_listen+0x6a>
					{
						btn->callback();
  f6:	ea 81       	ldd	r30, Y+2	; 0x02
  f8:	fb 81       	ldd	r31, Y+3	; 0x03
  fa:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	83 e2       	ldi	r24, 0x23	; 35
  fe:	94 ef       	ldi	r25, 0xF4	; 244
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <Button_listen+0x6e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <Button_listen+0x74>
 106:	00 00       	nop
 108:	14 c0       	rjmp	.+40     	; 0x132 <Button_listen+0xa0>
					}
					_delay_ms(COOL_DOWN_MS);
				}
				
				else {btn->current_state = MAYBE_RELEASED;}
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	8c 83       	std	Y+4, r24	; 0x04
 10e:	11 c0       	rjmp	.+34     	; 0x132 <Button_listen+0xa0>
		break;
		case MAYBE_RELEASED:
				if(GPIO_read_pin(btn->port , btn->pin) != btn->sense)
 110:	6e 81       	ldd	r22, Y+6	; 0x06
 112:	8d 81       	ldd	r24, Y+5	; 0x05
 114:	0e 94 86 03 	call	0x70c	; 0x70c <GPIO_read_pin>
 118:	98 81       	ld	r25, Y
 11a:	89 17       	cp	r24, r25
 11c:	41 f0       	breq	.+16     	; 0x12e <Button_listen+0x9c>
				{
					btn->current_state = NOT_PRESSED;
 11e:	1c 82       	std	Y+4, r1	; 0x04
					if(btn->evt == ON_KEY_UP)
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	31 f4       	brne	.+12     	; 0x132 <Button_listen+0xa0>
					{
						btn->callback();
 126:	ea 81       	ldd	r30, Y+2	; 0x02
 128:	fb 81       	ldd	r31, Y+3	; 0x03
 12a:	09 95       	icall
 12c:	02 c0       	rjmp	.+4      	; 0x132 <Button_listen+0xa0>
					}
				}
		
				else {btn->current_state = NOT_RELEASED;}
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	8c 83       	std	Y+4, r24	; 0x04
		break;
								
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <Button_config>:

void Button_config(Button *btn , GPIO_port_name_t port_name , uint8 pin, Button_event btn_event , void (*btn_callback)(void) , Button_Sense sense)
{
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
 14a:	d6 2e       	mov	r13, r22
 14c:	f4 2e       	mov	r15, r20
 14e:	c2 2e       	mov	r12, r18
	GPIO_init_pin(port_name , pin , GPIO_PIN_INPUT);
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	6f 2d       	mov	r22, r15
 154:	8d 2d       	mov	r24, r13
 156:	0e 94 36 03 	call	0x66c	; 0x66c <GPIO_init_pin>
	btn->callback = btn_callback;
 15a:	1b 83       	std	Y+3, r17	; 0x03
 15c:	0a 83       	std	Y+2, r16	; 0x02
	btn->evt = btn_event;
 15e:	c9 82       	std	Y+1, r12	; 0x01
	btn->port = port_name;
 160:	dd 82       	std	Y+5, r13	; 0x05
	btn->pin = pin;
 162:	fe 82       	std	Y+6, r15	; 0x06
	btn->current_state = NOT_PRESSED;
 164:	1c 82       	std	Y+4, r1	; 0x04
	btn->sense = sense;
 166:	e8 82       	st	Y, r14
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	df 90       	pop	r13
 176:	cf 90       	pop	r12
 178:	08 95       	ret

0000017a <lcd_write_data>:
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	65 e0       	ldi	r22, 0x05	; 5
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	64 e0       	ldi	r22, 0x04	; 4
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 192:	4c 2f       	mov	r20, r28
 194:	40 71       	andi	r20, 0x10	; 16
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	55 95       	asr	r21
 19a:	47 95       	ror	r20
 19c:	55 95       	asr	r21
 19e:	47 95       	ror	r20
 1a0:	55 95       	asr	r21
 1a2:	47 95       	ror	r20
 1a4:	55 95       	asr	r21
 1a6:	47 95       	ror	r20
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 1b0:	4c 2f       	mov	r20, r28
 1b2:	40 72       	andi	r20, 0x20	; 32
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	55 95       	asr	r21
 1b8:	47 95       	ror	r20
 1ba:	55 95       	asr	r21
 1bc:	47 95       	ror	r20
 1be:	55 95       	asr	r21
 1c0:	47 95       	ror	r20
 1c2:	55 95       	asr	r21
 1c4:	47 95       	ror	r20
 1c6:	55 95       	asr	r21
 1c8:	47 95       	ror	r20
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 1d2:	4c 2f       	mov	r20, r28
 1d4:	40 74       	andi	r20, 0x40	; 64
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	04 2e       	mov	r0, r20
 1da:	45 2f       	mov	r20, r21
 1dc:	00 0c       	add	r0, r0
 1de:	44 1f       	adc	r20, r20
 1e0:	55 0b       	sbc	r21, r21
 1e2:	00 0c       	add	r0, r0
 1e4:	44 1f       	adc	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 1f0:	4c 2f       	mov	r20, r28
 1f2:	44 1f       	adc	r20, r20
 1f4:	44 27       	eor	r20, r20
 1f6:	44 1f       	adc	r20, r20
 1f8:	63 e0       	ldi	r22, 0x03	; 3
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	66 e0       	ldi	r22, 0x06	; 6
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 20a:	83 ef       	ldi	r24, 0xF3	; 243
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_write_data+0x94>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_write_data+0x9a>
 214:	00 00       	nop
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	66 e0       	ldi	r22, 0x06	; 6
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 220:	83 ef       	ldi	r24, 0xF3	; 243
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <lcd_write_data+0xaa>
 228:	00 c0       	rjmp	.+0      	; 0x22a <lcd_write_data+0xb0>
 22a:	00 00       	nop
 22c:	4c 2f       	mov	r20, r28
 22e:	41 70       	andi	r20, 0x01	; 1
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 238:	4c 2f       	mov	r20, r28
 23a:	42 70       	andi	r20, 0x02	; 2
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	55 95       	asr	r21
 240:	47 95       	ror	r20
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 24a:	4c 2f       	mov	r20, r28
 24c:	44 70       	andi	r20, 0x04	; 4
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	55 95       	asr	r21
 252:	47 95       	ror	r20
 254:	55 95       	asr	r21
 256:	47 95       	ror	r20
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 260:	c8 70       	andi	r28, 0x08	; 8
 262:	4c 2f       	mov	r20, r28
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	55 95       	asr	r21
 268:	47 95       	ror	r20
 26a:	55 95       	asr	r21
 26c:	47 95       	ror	r20
 26e:	55 95       	asr	r21
 270:	47 95       	ror	r20
 272:	63 e0       	ldi	r22, 0x03	; 3
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	66 e0       	ldi	r22, 0x06	; 6
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 284:	83 ef       	ldi	r24, 0xF3	; 243
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_write_data+0x10e>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <lcd_write_data+0x114>
 28e:	00 00       	nop
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	66 e0       	ldi	r22, 0x06	; 6
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 29a:	83 ef       	ldi	r24, 0xF3	; 243
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_write_data+0x124>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_write_data+0x12a>
 2a4:	00 00       	nop
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <lcd_write_command>:
 2aa:	cf 93       	push	r28
 2ac:	c8 2f       	mov	r28, r24
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	65 e0       	ldi	r22, 0x05	; 5
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	64 e0       	ldi	r22, 0x04	; 4
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 2c2:	4c 2f       	mov	r20, r28
 2c4:	40 71       	andi	r20, 0x10	; 16
 2c6:	50 e0       	ldi	r21, 0x00	; 0
 2c8:	55 95       	asr	r21
 2ca:	47 95       	ror	r20
 2cc:	55 95       	asr	r21
 2ce:	47 95       	ror	r20
 2d0:	55 95       	asr	r21
 2d2:	47 95       	ror	r20
 2d4:	55 95       	asr	r21
 2d6:	47 95       	ror	r20
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 2e0:	4c 2f       	mov	r20, r28
 2e2:	40 72       	andi	r20, 0x20	; 32
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	55 95       	asr	r21
 2e8:	47 95       	ror	r20
 2ea:	55 95       	asr	r21
 2ec:	47 95       	ror	r20
 2ee:	55 95       	asr	r21
 2f0:	47 95       	ror	r20
 2f2:	55 95       	asr	r21
 2f4:	47 95       	ror	r20
 2f6:	55 95       	asr	r21
 2f8:	47 95       	ror	r20
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 302:	4c 2f       	mov	r20, r28
 304:	40 74       	andi	r20, 0x40	; 64
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	04 2e       	mov	r0, r20
 30a:	45 2f       	mov	r20, r21
 30c:	00 0c       	add	r0, r0
 30e:	44 1f       	adc	r20, r20
 310:	55 0b       	sbc	r21, r21
 312:	00 0c       	add	r0, r0
 314:	44 1f       	adc	r20, r20
 316:	55 1f       	adc	r21, r21
 318:	62 e0       	ldi	r22, 0x02	; 2
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 320:	4c 2f       	mov	r20, r28
 322:	44 1f       	adc	r20, r20
 324:	44 27       	eor	r20, r20
 326:	44 1f       	adc	r20, r20
 328:	63 e0       	ldi	r22, 0x03	; 3
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	66 e0       	ldi	r22, 0x06	; 6
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 33a:	83 ef       	ldi	r24, 0xF3	; 243
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <lcd_write_command+0x94>
 342:	00 c0       	rjmp	.+0      	; 0x344 <lcd_write_command+0x9a>
 344:	00 00       	nop
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	66 e0       	ldi	r22, 0x06	; 6
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 350:	83 ef       	ldi	r24, 0xF3	; 243
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <lcd_write_command+0xaa>
 358:	00 c0       	rjmp	.+0      	; 0x35a <lcd_write_command+0xb0>
 35a:	00 00       	nop
 35c:	4c 2f       	mov	r20, r28
 35e:	41 70       	andi	r20, 0x01	; 1
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 368:	4c 2f       	mov	r20, r28
 36a:	42 70       	andi	r20, 0x02	; 2
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	55 95       	asr	r21
 370:	47 95       	ror	r20
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 37a:	4c 2f       	mov	r20, r28
 37c:	44 70       	andi	r20, 0x04	; 4
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	55 95       	asr	r21
 382:	47 95       	ror	r20
 384:	55 95       	asr	r21
 386:	47 95       	ror	r20
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 390:	c8 70       	andi	r28, 0x08	; 8
 392:	4c 2f       	mov	r20, r28
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	55 95       	asr	r21
 398:	47 95       	ror	r20
 39a:	55 95       	asr	r21
 39c:	47 95       	ror	r20
 39e:	55 95       	asr	r21
 3a0:	47 95       	ror	r20
 3a2:	63 e0       	ldi	r22, 0x03	; 3
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	66 e0       	ldi	r22, 0x06	; 6
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 3b4:	83 ef       	ldi	r24, 0xF3	; 243
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <lcd_write_command+0x10e>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <lcd_write_command+0x114>
 3be:	00 00       	nop
 3c0:	40 e0       	ldi	r20, 0x00	; 0
 3c2:	66 e0       	ldi	r22, 0x06	; 6
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <GPIO_write_pin>
 3ca:	83 ef       	ldi	r24, 0xF3	; 243
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <lcd_write_command+0x124>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <lcd_write_command+0x12a>
 3d4:	00 00       	nop
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <LCD_Init>:
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	64 e0       	ldi	r22, 0x04	; 4
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	0e 94 36 03 	call	0x66c	; 0x66c <GPIO_init_pin>
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	66 e0       	ldi	r22, 0x06	; 6
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 36 03 	call	0x66c	; 0x66c <GPIO_init_pin>
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	65 e0       	ldi	r22, 0x05	; 5
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	0e 94 36 03 	call	0x66c	; 0x66c <GPIO_init_pin>
 3f8:	41 e0       	ldi	r20, 0x01	; 1
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	0e 94 36 03 	call	0x66c	; 0x66c <GPIO_init_pin>
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	0e 94 36 03 	call	0x66c	; 0x66c <GPIO_init_pin>
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	62 e0       	ldi	r22, 0x02	; 2
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	0e 94 36 03 	call	0x66c	; 0x66c <GPIO_init_pin>
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	63 e0       	ldi	r22, 0x03	; 3
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	0e 94 36 03 	call	0x66c	; 0x66c <GPIO_init_pin>
 420:	85 ea       	ldi	r24, 0xA5	; 165
 422:	9e e0       	ldi	r25, 0x0E	; 14
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
 42c:	83 e3       	ldi	r24, 0x33	; 51
 42e:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_command>
 432:	91 e2       	ldi	r25, 0x21	; 33
 434:	9a 95       	dec	r25
 436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 438:	00 00       	nop
 43a:	82 e3       	ldi	r24, 0x32	; 50
 43c:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_command>
 440:	81 e2       	ldi	r24, 0x21	; 33
 442:	8a 95       	dec	r24
 444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 446:	00 00       	nop
 448:	88 e2       	ldi	r24, 0x28	; 40
 44a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_command>
 44e:	91 e2       	ldi	r25, 0x21	; 33
 450:	9a 95       	dec	r25
 452:	f1 f7       	brne	.-4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 454:	00 00       	nop
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_command>
 45c:	83 ef       	ldi	r24, 0xF3	; 243
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 466:	00 00       	nop
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_command>
 46e:	83 ef       	ldi	r24, 0xF3	; 243
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 478:	00 00       	nop
 47a:	8c e0       	ldi	r24, 0x0C	; 12
 47c:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_command>
 480:	91 e2       	ldi	r25, 0x21	; 33
 482:	9a 95       	dec	r25
 484:	f1 f7       	brne	.-4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 486:	00 00       	nop
 488:	08 95       	ret

0000048a <LCD_write_char>:
 48a:	18 16       	cp	r1, r24
 48c:	14 f4       	brge	.+4      	; 0x492 <LCD_write_char+0x8>
 48e:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_write_data>
 492:	08 95       	ret

00000494 <LCD_write_string>:
{
	lcd_write_command(0x01);
	_delay_ms(2);
}
void LCD_write_string(sint8 *str)
{
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	8c 01       	movw	r16, r24
	uint8 c = 0;
 49c:	c0 e0       	ldi	r28, 0x00	; 0
	while ( str[c] )
 49e:	03 c0       	rjmp	.+6      	; 0x4a6 <LCD_write_string+0x12>
	{
		LCD_write_char(str[c++]);
 4a0:	cf 5f       	subi	r28, 0xFF	; 255
 4a2:	0e 94 45 02 	call	0x48a	; 0x48a <LCD_write_char>
	_delay_ms(2);
}
void LCD_write_string(sint8 *str)
{
	uint8 c = 0;
	while ( str[c] )
 4a6:	f8 01       	movw	r30, r16
 4a8:	ec 0f       	add	r30, r28
 4aa:	f1 1d       	adc	r31, r1
 4ac:	80 81       	ld	r24, Z
 4ae:	81 11       	cpse	r24, r1
 4b0:	f7 cf       	rjmp	.-18     	; 0x4a0 <LCD_write_string+0xc>
	{
		LCD_write_char(str[c++]);
	}
}
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	08 95       	ret

000004ba <LCD_go_to>:

void LCD_go_to(uint8 row , uint8 col)
{
	if(row == 1)
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	39 f4       	brne	.+14     	; 0x4cc <LCD_go_to+0x12>
	{
		if(col < MAX_COL)
 4be:	60 31       	cpi	r22, 0x10	; 16
 4c0:	68 f4       	brcc	.+26     	; 0x4dc <LCD_go_to+0x22>
		{
			lcd_write_command((0x80+col));
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	86 0f       	add	r24, r22
 4c6:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_command>
 4ca:	08 95       	ret
		}
	}
	else if(row == 2)
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	31 f4       	brne	.+12     	; 0x4dc <LCD_go_to+0x22>
	{
		if(col < MAX_COL)
 4d0:	60 31       	cpi	r22, 0x10	; 16
 4d2:	20 f4       	brcc	.+8      	; 0x4dc <LCD_go_to+0x22>
		{
			lcd_write_command((0xC0+col));
 4d4:	80 ec       	ldi	r24, 0xC0	; 192
 4d6:	86 0f       	add	r24, r22
 4d8:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_write_command>
 4dc:	08 95       	ret

000004de <LCD_write_number>:
		}
	}
}
void LCD_write_number(uint32 n)
{
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
 4e8:	2a 97       	sbiw	r28, 0x0a	; 10
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	f8 94       	cli
 4ee:	de bf       	out	0x3e, r29	; 62
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	cd bf       	out	0x3d, r28	; 61
 4f4:	ac 01       	movw	r20, r24
	uint8 i = 0 , j , digits[10];
	if(n == 0)
 4f6:	89 2b       	or	r24, r25
 4f8:	91 f5       	brne	.+100    	; 0x55e <LCD_write_number+0x80>
		lcd_write_data('0');
 4fa:	80 e3       	ldi	r24, 0x30	; 48
 4fc:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_write_data>
 500:	42 c0       	rjmp	.+132    	; 0x586 <LCD_write_number+0xa8>
	else {
		while(n)
		{
			digits[i] = (uint8)(n%10 + '0');
 502:	9a 01       	movw	r18, r20
 504:	ad ec       	ldi	r26, 0xCD	; 205
 506:	bc ec       	ldi	r27, 0xCC	; 204
 508:	0e 94 ed 04 	call	0x9da	; 0x9da <__umulhisi3>
 50c:	96 95       	lsr	r25
 50e:	87 95       	ror	r24
 510:	96 95       	lsr	r25
 512:	87 95       	ror	r24
 514:	96 95       	lsr	r25
 516:	87 95       	ror	r24
 518:	9c 01       	movw	r18, r24
 51a:	22 0f       	add	r18, r18
 51c:	33 1f       	adc	r19, r19
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	82 0f       	add	r24, r18
 52c:	93 1f       	adc	r25, r19
 52e:	9a 01       	movw	r18, r20
 530:	28 1b       	sub	r18, r24
 532:	39 0b       	sbc	r19, r25
 534:	c9 01       	movw	r24, r18
 536:	80 5d       	subi	r24, 0xD0	; 208
 538:	e1 e0       	ldi	r30, 0x01	; 1
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	ec 0f       	add	r30, r28
 53e:	fd 1f       	adc	r31, r29
 540:	e1 0f       	add	r30, r17
 542:	f1 1d       	adc	r31, r1
 544:	80 83       	st	Z, r24
			n = n / 10;
 546:	9a 01       	movw	r18, r20
 548:	0e 94 ed 04 	call	0x9da	; 0x9da <__umulhisi3>
 54c:	ac 01       	movw	r20, r24
 54e:	56 95       	lsr	r21
 550:	47 95       	ror	r20
 552:	56 95       	lsr	r21
 554:	47 95       	ror	r20
 556:	56 95       	lsr	r21
 558:	47 95       	ror	r20
			i++;
 55a:	1f 5f       	subi	r17, 0xFF	; 255
 55c:	01 c0       	rjmp	.+2      	; 0x560 <LCD_write_number+0x82>
 55e:	10 e0       	ldi	r17, 0x00	; 0
{
	uint8 i = 0 , j , digits[10];
	if(n == 0)
		lcd_write_data('0');
	else {
		while(n)
 560:	41 15       	cp	r20, r1
 562:	51 05       	cpc	r21, r1
 564:	71 f6       	brne	.-100    	; 0x502 <LCD_write_number+0x24>
 566:	0d c0       	rjmp	.+26     	; 0x582 <LCD_write_number+0xa4>
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
		{
			lcd_write_data(digits[j-1]);
 568:	e1 2f       	mov	r30, r17
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	31 97       	sbiw	r30, 0x01	; 1
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	8c 0f       	add	r24, r28
 574:	9d 1f       	adc	r25, r29
 576:	e8 0f       	add	r30, r24
 578:	f9 1f       	adc	r31, r25
 57a:	80 81       	ld	r24, Z
 57c:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_write_data>
		{
			digits[i] = (uint8)(n%10 + '0');
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
 580:	11 50       	subi	r17, 0x01	; 1
 582:	11 11       	cpse	r17, r1
 584:	f1 cf       	rjmp	.-30     	; 0x568 <LCD_write_number+0x8a>
		{
			lcd_write_data(digits[j-1]);
		}
	}
}
 586:	2a 96       	adiw	r28, 0x0a	; 10
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	08 95       	ret

0000059a <button_event>:

uint16 x = 0;
uint16 y = 0;

void button_event(){
	x++;
 59a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 59e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__data_end+0x1>
 5a8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__data_end>
 5ac:	08 95       	ret

000005ae <main>:
}

int main(void)
{
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	60 97       	sbiw	r28, 0x10	; 16
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	f8 94       	cli
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	cd bf       	out	0x3d, r28	; 61

	
	//GPIO_enable_pull_up_res(GPIO_A, PIN_2);
	
	//Initialize LCD for debugging
	LCD_Init();
 5c2:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_Init>
	LCD_write_string("NOF CLICKS");
 5c6:	88 e7       	ldi	r24, 0x78	; 120
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_string>
	Button button1,button2;
	
	Button_config(&button1 , GPIO_A , PIN_2 , ON_KEY_DOWN , button_event , Button_pull_up);
 5ce:	e1 2c       	mov	r14, r1
 5d0:	0d ec       	ldi	r16, 0xCD	; 205
 5d2:	12 e0       	ldi	r17, 0x02	; 2
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	42 e0       	ldi	r20, 0x02	; 2
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	ce 01       	movw	r24, r28
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	0e 94 9c 00 	call	0x138	; 0x138 <Button_config>
	Button_config(&button2 , GPIO_D , PIN_2 , ON_KEY_UP , button_event , Button_pull_down);
 5e2:	ee 24       	eor	r14, r14
 5e4:	e3 94       	inc	r14
 5e6:	22 e0       	ldi	r18, 0x02	; 2
 5e8:	42 e0       	ldi	r20, 0x02	; 2
 5ea:	63 e0       	ldi	r22, 0x03	; 3
 5ec:	ce 01       	movw	r24, r28
 5ee:	09 96       	adiw	r24, 0x09	; 9
 5f0:	0e 94 9c 00 	call	0x138	; 0x138 <Button_config>
	
	while (1) 
    {
		Button_listen(&button1);
 5f4:	ce 01       	movw	r24, r28
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	0e 94 49 00 	call	0x92	; 0x92 <Button_listen>
		Button_listen(&button2);
 5fc:	ce 01       	movw	r24, r28
 5fe:	09 96       	adiw	r24, 0x09	; 9
 600:	0e 94 49 00 	call	0x92	; 0x92 <Button_listen>
		LCD_go_to(2 , 0);	
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_go_to>
		LCD_write_number(x);
 60c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__data_end>
 610:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__data_end+0x1>
 614:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_write_number>
 618:	ed cf       	rjmp	.-38     	; 0x5f4 <main+0x46>

0000061a <__vector_16>:
	
	return  (ADCL + ADCH*256);
}

ISR(ADC_vect)
{
 61a:	1f 92       	push	r1
 61c:	0f 92       	push	r0
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	0f 92       	push	r0
 622:	11 24       	eor	r1, r1
 624:	2f 93       	push	r18
 626:	3f 93       	push	r19
 628:	4f 93       	push	r20
 62a:	5f 93       	push	r21
 62c:	6f 93       	push	r22
 62e:	7f 93       	push	r23
 630:	8f 93       	push	r24
 632:	9f 93       	push	r25
 634:	af 93       	push	r26
 636:	bf 93       	push	r27
 638:	ef 93       	push	r30
 63a:	ff 93       	push	r31
	if(adc_isr != NULLPTR)
 63c:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <adc_isr>
 640:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <adc_isr+0x1>
 644:	30 97       	sbiw	r30, 0x00	; 0
 646:	09 f0       	breq	.+2      	; 0x64a <__vector_16+0x30>
	{
		adc_isr();
 648:	09 95       	icall
	}
 64a:	ff 91       	pop	r31
 64c:	ef 91       	pop	r30
 64e:	bf 91       	pop	r27
 650:	af 91       	pop	r26
 652:	9f 91       	pop	r25
 654:	8f 91       	pop	r24
 656:	7f 91       	pop	r23
 658:	6f 91       	pop	r22
 65a:	5f 91       	pop	r21
 65c:	4f 91       	pop	r20
 65e:	3f 91       	pop	r19
 660:	2f 91       	pop	r18
 662:	0f 90       	pop	r0
 664:	0f be       	out	0x3f, r0	; 63
 666:	0f 90       	pop	r0
 668:	1f 90       	pop	r1
 66a:	18 95       	reti

0000066c <GPIO_init_pin>:
		{
			return;
		}
		else
		{
			PORT_CLEAR_MASK((*(output_registers[reg])) , mask);
 66c:	84 30       	cpi	r24, 0x04	; 4
 66e:	10 f5       	brcc	.+68     	; 0x6b4 <GPIO_init_pin+0x48>
 670:	68 30       	cpi	r22, 0x08	; 8
 672:	10 f5       	brcc	.+68     	; 0x6b8 <GPIO_init_pin+0x4c>
 674:	42 30       	cpi	r20, 0x02	; 2
 676:	10 f5       	brcc	.+68     	; 0x6bc <GPIO_init_pin+0x50>
 678:	e8 2f       	mov	r30, r24
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	ee 0f       	add	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	e0 59       	subi	r30, 0x90	; 144
 682:	ff 4f       	sbci	r31, 0xFF	; 255
 684:	01 90       	ld	r0, Z+
 686:	f0 81       	ld	r31, Z
 688:	e0 2d       	mov	r30, r0
 68a:	20 81       	ld	r18, Z
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	06 2e       	mov	r0, r22
 692:	02 c0       	rjmp	.+4      	; 0x698 <GPIO_init_pin+0x2c>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	0a 94       	dec	r0
 69a:	e2 f7       	brpl	.-8      	; 0x694 <GPIO_init_pin+0x28>
 69c:	50 e0       	ldi	r21, 0x00	; 0
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <GPIO_init_pin+0x38>
 6a0:	44 0f       	add	r20, r20
 6a2:	55 1f       	adc	r21, r21
 6a4:	6a 95       	dec	r22
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <GPIO_init_pin+0x34>
 6a8:	80 95       	com	r24
 6aa:	82 23       	and	r24, r18
 6ac:	48 2b       	or	r20, r24
 6ae:	40 83       	st	Z, r20
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	08 95       	ret
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	08 95       	ret
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	08 95       	ret
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	08 95       	ret

000006c0 <GPIO_write_pin>:
 6c0:	84 30       	cpi	r24, 0x04	; 4
 6c2:	00 f5       	brcc	.+64     	; 0x704 <GPIO_write_pin+0x44>
 6c4:	68 30       	cpi	r22, 0x08	; 8
 6c6:	00 f5       	brcc	.+64     	; 0x708 <GPIO_write_pin+0x48>
 6c8:	e8 2f       	mov	r30, r24
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	e0 5a       	subi	r30, 0xA0	; 160
 6d2:	ff 4f       	sbci	r31, 0xFF	; 255
 6d4:	01 90       	ld	r0, Z+
 6d6:	f0 81       	ld	r31, Z
 6d8:	e0 2d       	mov	r30, r0
 6da:	20 81       	ld	r18, Z
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	06 2e       	mov	r0, r22
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <GPIO_write_pin+0x28>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	0a 94       	dec	r0
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <GPIO_write_pin+0x24>
 6ec:	50 e0       	ldi	r21, 0x00	; 0
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <GPIO_write_pin+0x34>
 6f0:	44 0f       	add	r20, r20
 6f2:	55 1f       	adc	r21, r21
 6f4:	6a 95       	dec	r22
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <GPIO_write_pin+0x30>
 6f8:	80 95       	com	r24
 6fa:	82 23       	and	r24, r18
 6fc:	48 2b       	or	r20, r24
 6fe:	40 83       	st	Z, r20
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	08 95       	ret
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	08 95       	ret
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	08 95       	ret

0000070c <GPIO_read_pin>:
		}
}
//read functions

uint8 GPIO_read_pin(GPIO_port_name_t reg , uint8 pin){
	if( NOT_VALID_PORT(reg) || NOT_VALID_PIN (pin))
 70c:	84 30       	cpi	r24, 0x04	; 4
 70e:	f8 f4       	brcc	.+62     	; 0x74e <GPIO_read_pin+0x42>
 710:	68 30       	cpi	r22, 0x08	; 8
 712:	f8 f4       	brcc	.+62     	; 0x752 <GPIO_read_pin+0x46>
	{
		return NOT_VALID_PIN_CODE;	
	}
	else 
	{
		return GET_BIT( (*(input_registers[reg])) , pin);
 714:	e8 2f       	mov	r30, r24
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	ee 0f       	add	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	e8 59       	subi	r30, 0x98	; 152
 71e:	ff 4f       	sbci	r31, 0xFF	; 255
 720:	01 90       	ld	r0, Z+
 722:	f0 81       	ld	r31, Z
 724:	e0 2d       	mov	r30, r0
 726:	40 81       	ld	r20, Z
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	9c 01       	movw	r18, r24
 72e:	06 2e       	mov	r0, r22
 730:	02 c0       	rjmp	.+4      	; 0x736 <GPIO_read_pin+0x2a>
 732:	22 0f       	add	r18, r18
 734:	33 1f       	adc	r19, r19
 736:	0a 94       	dec	r0
 738:	e2 f7       	brpl	.-8      	; 0x732 <GPIO_read_pin+0x26>
 73a:	84 2f       	mov	r24, r20
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	82 23       	and	r24, r18
 740:	93 23       	and	r25, r19
 742:	02 c0       	rjmp	.+4      	; 0x748 <GPIO_read_pin+0x3c>
 744:	95 95       	asr	r25
 746:	87 95       	ror	r24
 748:	6a 95       	dec	r22
 74a:	e2 f7       	brpl	.-8      	; 0x744 <GPIO_read_pin+0x38>
 74c:	08 95       	ret
//read functions

uint8 GPIO_read_pin(GPIO_port_name_t reg , uint8 pin){
	if( NOT_VALID_PORT(reg) || NOT_VALID_PIN (pin))
	{
		return NOT_VALID_PIN_CODE;	
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	08 95       	ret
 752:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else 
	{
		return GET_BIT( (*(input_registers[reg])) , pin);
	}
}
 754:	08 95       	ret

00000756 <__vector_1>:
	return EXT_SUCCESS;
}


ISR(INT0_vect)
{
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	4f 93       	push	r20
 766:	5f 93       	push	r21
 768:	6f 93       	push	r22
 76a:	7f 93       	push	r23
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
 770:	af 93       	push	r26
 772:	bf 93       	push	r27
 774:	ef 93       	push	r30
 776:	ff 93       	push	r31
	EXT_int0_isr();
 778:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <EXT_int0_isr>
 77c:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <EXT_int0_isr+0x1>
 780:	09 95       	icall
}
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	bf 91       	pop	r27
 788:	af 91       	pop	r26
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	7f 91       	pop	r23
 790:	6f 91       	pop	r22
 792:	5f 91       	pop	r21
 794:	4f 91       	pop	r20
 796:	3f 91       	pop	r19
 798:	2f 91       	pop	r18
 79a:	0f 90       	pop	r0
 79c:	0f be       	out	0x3f, r0	; 63
 79e:	0f 90       	pop	r0
 7a0:	1f 90       	pop	r1
 7a2:	18 95       	reti

000007a4 <__vector_2>:
ISR(INT1_vect)
{
 7a4:	1f 92       	push	r1
 7a6:	0f 92       	push	r0
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	0f 92       	push	r0
 7ac:	11 24       	eor	r1, r1
 7ae:	2f 93       	push	r18
 7b0:	3f 93       	push	r19
 7b2:	4f 93       	push	r20
 7b4:	5f 93       	push	r21
 7b6:	6f 93       	push	r22
 7b8:	7f 93       	push	r23
 7ba:	8f 93       	push	r24
 7bc:	9f 93       	push	r25
 7be:	af 93       	push	r26
 7c0:	bf 93       	push	r27
 7c2:	ef 93       	push	r30
 7c4:	ff 93       	push	r31
	EXT_int1_isr();
 7c6:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <EXT_int1_isr>
 7ca:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <EXT_int1_isr+0x1>
 7ce:	09 95       	icall
}
 7d0:	ff 91       	pop	r31
 7d2:	ef 91       	pop	r30
 7d4:	bf 91       	pop	r27
 7d6:	af 91       	pop	r26
 7d8:	9f 91       	pop	r25
 7da:	8f 91       	pop	r24
 7dc:	7f 91       	pop	r23
 7de:	6f 91       	pop	r22
 7e0:	5f 91       	pop	r21
 7e2:	4f 91       	pop	r20
 7e4:	3f 91       	pop	r19
 7e6:	2f 91       	pop	r18
 7e8:	0f 90       	pop	r0
 7ea:	0f be       	out	0x3f, r0	; 63
 7ec:	0f 90       	pop	r0
 7ee:	1f 90       	pop	r1
 7f0:	18 95       	reti

000007f2 <__vector_3>:
ISR(INT2_vect)
{
 7f2:	1f 92       	push	r1
 7f4:	0f 92       	push	r0
 7f6:	0f b6       	in	r0, 0x3f	; 63
 7f8:	0f 92       	push	r0
 7fa:	11 24       	eor	r1, r1
 7fc:	2f 93       	push	r18
 7fe:	3f 93       	push	r19
 800:	4f 93       	push	r20
 802:	5f 93       	push	r21
 804:	6f 93       	push	r22
 806:	7f 93       	push	r23
 808:	8f 93       	push	r24
 80a:	9f 93       	push	r25
 80c:	af 93       	push	r26
 80e:	bf 93       	push	r27
 810:	ef 93       	push	r30
 812:	ff 93       	push	r31
	EXT_int2_isr();
 814:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <EXT_int2_isr>
 818:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <EXT_int2_isr+0x1>
 81c:	09 95       	icall
 81e:	ff 91       	pop	r31
 820:	ef 91       	pop	r30
 822:	bf 91       	pop	r27
 824:	af 91       	pop	r26
 826:	9f 91       	pop	r25
 828:	8f 91       	pop	r24
 82a:	7f 91       	pop	r23
 82c:	6f 91       	pop	r22
 82e:	5f 91       	pop	r21
 830:	4f 91       	pop	r20
 832:	3f 91       	pop	r19
 834:	2f 91       	pop	r18
 836:	0f 90       	pop	r0
 838:	0f be       	out	0x3f, r0	; 63
 83a:	0f 90       	pop	r0
 83c:	1f 90       	pop	r1
 83e:	18 95       	reti

00000840 <__vector_10>:
	{	
		timer0_overflow_isr();
	}
}*/
ISR(TIMER0_COMP)
{
 840:	1f 92       	push	r1
 842:	0f 92       	push	r0
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	0f 92       	push	r0
 848:	11 24       	eor	r1, r1
 84a:	2f 93       	push	r18
 84c:	3f 93       	push	r19
 84e:	4f 93       	push	r20
 850:	5f 93       	push	r21
 852:	6f 93       	push	r22
 854:	7f 93       	push	r23
 856:	8f 93       	push	r24
 858:	9f 93       	push	r25
 85a:	af 93       	push	r26
 85c:	bf 93       	push	r27
 85e:	ef 93       	push	r30
 860:	ff 93       	push	r31
	if(timer0_compare_isr != NULLPTR)
 862:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <timer0_compare_isr>
 866:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <timer0_compare_isr+0x1>
 86a:	30 97       	sbiw	r30, 0x00	; 0
 86c:	09 f0       	breq	.+2      	; 0x870 <__stack+0x11>
	{
		timer0_compare_isr();
 86e:	09 95       	icall
	}
}
 870:	ff 91       	pop	r31
 872:	ef 91       	pop	r30
 874:	bf 91       	pop	r27
 876:	af 91       	pop	r26
 878:	9f 91       	pop	r25
 87a:	8f 91       	pop	r24
 87c:	7f 91       	pop	r23
 87e:	6f 91       	pop	r22
 880:	5f 91       	pop	r21
 882:	4f 91       	pop	r20
 884:	3f 91       	pop	r19
 886:	2f 91       	pop	r18
 888:	0f 90       	pop	r0
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	0f 90       	pop	r0
 88e:	1f 90       	pop	r1
 890:	18 95       	reti

00000892 <__vector_9>:


ISR(TIMER1_OVF)
{
 892:	1f 92       	push	r1
 894:	0f 92       	push	r0
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	0f 92       	push	r0
 89a:	11 24       	eor	r1, r1
 89c:	2f 93       	push	r18
 89e:	3f 93       	push	r19
 8a0:	4f 93       	push	r20
 8a2:	5f 93       	push	r21
 8a4:	6f 93       	push	r22
 8a6:	7f 93       	push	r23
 8a8:	8f 93       	push	r24
 8aa:	9f 93       	push	r25
 8ac:	af 93       	push	r26
 8ae:	bf 93       	push	r27
 8b0:	ef 93       	push	r30
 8b2:	ff 93       	push	r31
	if(timer1_overflow_isr != NULLPTR)
 8b4:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <timer1_overflow_isr>
 8b8:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <timer1_overflow_isr+0x1>
 8bc:	30 97       	sbiw	r30, 0x00	; 0
 8be:	09 f0       	breq	.+2      	; 0x8c2 <__vector_9+0x30>
	{
		timer1_overflow_isr();
 8c0:	09 95       	icall
	}
}
 8c2:	ff 91       	pop	r31
 8c4:	ef 91       	pop	r30
 8c6:	bf 91       	pop	r27
 8c8:	af 91       	pop	r26
 8ca:	9f 91       	pop	r25
 8cc:	8f 91       	pop	r24
 8ce:	7f 91       	pop	r23
 8d0:	6f 91       	pop	r22
 8d2:	5f 91       	pop	r21
 8d4:	4f 91       	pop	r20
 8d6:	3f 91       	pop	r19
 8d8:	2f 91       	pop	r18
 8da:	0f 90       	pop	r0
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	0f 90       	pop	r0
 8e0:	1f 90       	pop	r1
 8e2:	18 95       	reti

000008e4 <__vector_7>:

ISR(TIMER1_COMPA)
{
 8e4:	1f 92       	push	r1
 8e6:	0f 92       	push	r0
 8e8:	0f b6       	in	r0, 0x3f	; 63
 8ea:	0f 92       	push	r0
 8ec:	11 24       	eor	r1, r1
 8ee:	2f 93       	push	r18
 8f0:	3f 93       	push	r19
 8f2:	4f 93       	push	r20
 8f4:	5f 93       	push	r21
 8f6:	6f 93       	push	r22
 8f8:	7f 93       	push	r23
 8fa:	8f 93       	push	r24
 8fc:	9f 93       	push	r25
 8fe:	af 93       	push	r26
 900:	bf 93       	push	r27
 902:	ef 93       	push	r30
 904:	ff 93       	push	r31
	if(timer1_compare_a_isr != NULLPTR)
 906:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <timer1_compare_a_isr>
 90a:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <timer1_compare_a_isr+0x1>
 90e:	30 97       	sbiw	r30, 0x00	; 0
 910:	09 f0       	breq	.+2      	; 0x914 <__vector_7+0x30>
	{
		timer1_compare_a_isr();
 912:	09 95       	icall
	}
}
 914:	ff 91       	pop	r31
 916:	ef 91       	pop	r30
 918:	bf 91       	pop	r27
 91a:	af 91       	pop	r26
 91c:	9f 91       	pop	r25
 91e:	8f 91       	pop	r24
 920:	7f 91       	pop	r23
 922:	6f 91       	pop	r22
 924:	5f 91       	pop	r21
 926:	4f 91       	pop	r20
 928:	3f 91       	pop	r19
 92a:	2f 91       	pop	r18
 92c:	0f 90       	pop	r0
 92e:	0f be       	out	0x3f, r0	; 63
 930:	0f 90       	pop	r0
 932:	1f 90       	pop	r1
 934:	18 95       	reti

00000936 <__vector_8>:

ISR(TIMER1_COMPB)
{
 936:	1f 92       	push	r1
 938:	0f 92       	push	r0
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	0f 92       	push	r0
 93e:	11 24       	eor	r1, r1
 940:	2f 93       	push	r18
 942:	3f 93       	push	r19
 944:	4f 93       	push	r20
 946:	5f 93       	push	r21
 948:	6f 93       	push	r22
 94a:	7f 93       	push	r23
 94c:	8f 93       	push	r24
 94e:	9f 93       	push	r25
 950:	af 93       	push	r26
 952:	bf 93       	push	r27
 954:	ef 93       	push	r30
 956:	ff 93       	push	r31
	if(timer1_compare_b_isr != NULLPTR)
 958:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <timer1_compare_b_isr>
 95c:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <timer1_compare_b_isr+0x1>
 960:	30 97       	sbiw	r30, 0x00	; 0
 962:	09 f0       	breq	.+2      	; 0x966 <__vector_8+0x30>
	{
		timer1_compare_b_isr();
 964:	09 95       	icall
	}
}
 966:	ff 91       	pop	r31
 968:	ef 91       	pop	r30
 96a:	bf 91       	pop	r27
 96c:	af 91       	pop	r26
 96e:	9f 91       	pop	r25
 970:	8f 91       	pop	r24
 972:	7f 91       	pop	r23
 974:	6f 91       	pop	r22
 976:	5f 91       	pop	r21
 978:	4f 91       	pop	r20
 97a:	3f 91       	pop	r19
 97c:	2f 91       	pop	r18
 97e:	0f 90       	pop	r0
 980:	0f be       	out	0x3f, r0	; 63
 982:	0f 90       	pop	r0
 984:	1f 90       	pop	r1
 986:	18 95       	reti

00000988 <__vector_6>:

ISR(TIMER1_CAPT)
{
 988:	1f 92       	push	r1
 98a:	0f 92       	push	r0
 98c:	0f b6       	in	r0, 0x3f	; 63
 98e:	0f 92       	push	r0
 990:	11 24       	eor	r1, r1
 992:	2f 93       	push	r18
 994:	3f 93       	push	r19
 996:	4f 93       	push	r20
 998:	5f 93       	push	r21
 99a:	6f 93       	push	r22
 99c:	7f 93       	push	r23
 99e:	8f 93       	push	r24
 9a0:	9f 93       	push	r25
 9a2:	af 93       	push	r26
 9a4:	bf 93       	push	r27
 9a6:	ef 93       	push	r30
 9a8:	ff 93       	push	r31
	if(timer1_input_capture_isr != NULLPTR)
 9aa:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <timer1_input_capture_isr>
 9ae:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <timer1_input_capture_isr+0x1>
 9b2:	30 97       	sbiw	r30, 0x00	; 0
 9b4:	09 f0       	breq	.+2      	; 0x9b8 <__vector_6+0x30>
	{
		timer1_input_capture_isr();
 9b6:	09 95       	icall
	}
}
 9b8:	ff 91       	pop	r31
 9ba:	ef 91       	pop	r30
 9bc:	bf 91       	pop	r27
 9be:	af 91       	pop	r26
 9c0:	9f 91       	pop	r25
 9c2:	8f 91       	pop	r24
 9c4:	7f 91       	pop	r23
 9c6:	6f 91       	pop	r22
 9c8:	5f 91       	pop	r21
 9ca:	4f 91       	pop	r20
 9cc:	3f 91       	pop	r19
 9ce:	2f 91       	pop	r18
 9d0:	0f 90       	pop	r0
 9d2:	0f be       	out	0x3f, r0	; 63
 9d4:	0f 90       	pop	r0
 9d6:	1f 90       	pop	r1
 9d8:	18 95       	reti

000009da <__umulhisi3>:
 9da:	a2 9f       	mul	r26, r18
 9dc:	b0 01       	movw	r22, r0
 9de:	b3 9f       	mul	r27, r19
 9e0:	c0 01       	movw	r24, r0
 9e2:	a3 9f       	mul	r26, r19
 9e4:	70 0d       	add	r23, r0
 9e6:	81 1d       	adc	r24, r1
 9e8:	11 24       	eor	r1, r1
 9ea:	91 1d       	adc	r25, r1
 9ec:	b2 9f       	mul	r27, r18
 9ee:	70 0d       	add	r23, r0
 9f0:	81 1d       	adc	r24, r1
 9f2:	11 24       	eor	r1, r1
 9f4:	91 1d       	adc	r25, r1
 9f6:	08 95       	ret

000009f8 <_exit>:
 9f8:	f8 94       	cli

000009fa <__stop_program>:
 9fa:	ff cf       	rjmp	.-2      	; 0x9fa <__stop_program>
