
Hope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000cdc  00000d70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080008a  0080008a  00000d9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002992  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000edc  00000000  00000000  00003b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000177a  00000000  00000000  00004a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  00006198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001991  00000000  00000000  00006af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017df  00000000  00000000  00008481  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  00009c60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_1>
   8:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_2>
   c:	0c 94 94 03 	jmp	0x728	; 0x728 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__vector_6>
  1c:	0c 94 0d 04 	jmp	0x81a	; 0x81a <__vector_7>
  20:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_8>
  24:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_9>
  28:	0c 94 bb 03 	jmp	0x776	; 0x776 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 39       	cpi	r26, 0x9D	; 157
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a8 01 	call	0x350	; 0x350 <main>
  8a:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_write_command>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_write_pin>
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_write_pin>
  aa:	6c 2f       	mov	r22, r28
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0e 94 39 03 	call	0x672	; 0x672 <GPIO_write_port>
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_write_pin>
  bc:	83 ef       	ldi	r24, 0xF3	; 243
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcd_write_command+0x2e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcd_write_command+0x34>
  c6:	00 00       	nop
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_write_pin>
  d2:	83 ef       	ldi	r24, 0xF3	; 243
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_write_command+0x44>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_write_command+0x4a>
  dc:	00 00       	nop
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <lcd_write_data>:
  e2:	cf 93       	push	r28
  e4:	c8 2f       	mov	r28, r24
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_write_pin>
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_write_pin>
  fa:	6c 2f       	mov	r22, r28
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0e 94 39 03 	call	0x672	; 0x672 <GPIO_write_port>
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_write_pin>
 10c:	83 ef       	ldi	r24, 0xF3	; 243
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write_data+0x2e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write_data+0x34>
 116:	00 00       	nop
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	0e 94 13 03 	call	0x626	; 0x626 <GPIO_write_pin>
 122:	83 ef       	ldi	r24, 0xF3	; 243
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_write_data+0x44>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_write_data+0x4a>
 12c:	00 00       	nop
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <LCD_Init>:
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <GPIO_init_pin>
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <GPIO_init_pin>
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <GPIO_init_pin>
 150:	6f ef       	ldi	r22, 0xFF	; 255
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 06 03 	call	0x60c	; 0x60c <GPIO_init_port>
 158:	85 ea       	ldi	r24, 0xA5	; 165
 15a:	9e e0       	ldi	r25, 0x0E	; 14
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_Init+0x2a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_Init+0x30>
 162:	00 00       	nop
 164:	88 e3       	ldi	r24, 0x38	; 56
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 16a:	91 e2       	ldi	r25, 0x21	; 33
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Init+0x3a>
 170:	00 00       	nop
 172:	8e e0       	ldi	r24, 0x0E	; 14
 174:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 178:	81 e2       	ldi	r24, 0x21	; 33
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_Init+0x48>
 17e:	00 00       	nop
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 186:	83 ef       	ldi	r24, 0xF3	; 243
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_Init+0x58>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_Init+0x5e>
 190:	00 00       	nop
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 198:	83 ef       	ldi	r24, 0xF3	; 243
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Init+0x6a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Init+0x70>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <LCD_write_char>:
 1a6:	18 16       	cp	r1, r24
 1a8:	14 f4       	brge	.+4      	; 0x1ae <LCD_write_char+0x8>
 1aa:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write_data>
 1ae:	08 95       	ret

000001b0 <LCD_write_string>:
{
	lcd_write_command(0x01);
	_delay_ms(2);
}
void LCD_write_string(sint8 *str)
{
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	8c 01       	movw	r16, r24
	uint8 c = 0;
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
	while ( str[c] )
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <LCD_write_string+0x12>
	{
		LCD_write_char(str[c++]);
 1bc:	cf 5f       	subi	r28, 0xFF	; 255
 1be:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_write_char>
	_delay_ms(2);
}
void LCD_write_string(sint8 *str)
{
	uint8 c = 0;
	while ( str[c] )
 1c2:	f8 01       	movw	r30, r16
 1c4:	ec 0f       	add	r30, r28
 1c6:	f1 1d       	adc	r31, r1
 1c8:	80 81       	ld	r24, Z
 1ca:	81 11       	cpse	r24, r1
 1cc:	f7 cf       	rjmp	.-18     	; 0x1bc <LCD_write_string+0xc>
	{
		LCD_write_char(str[c++]);
	}
}
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <LCD_go_to>:

void LCD_go_to(uint8 row , uint8 col)
{
	if(row == 1)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <LCD_go_to+0x12>
	{
		if(col < MAX_COL)
 1da:	60 31       	cpi	r22, 0x10	; 16
 1dc:	68 f4       	brcc	.+26     	; 0x1f8 <LCD_go_to+0x22>
		{
			lcd_write_command((0x80+col));
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	86 0f       	add	r24, r22
 1e2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 1e6:	08 95       	ret
		}
	}
	else if(row == 2)
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	31 f4       	brne	.+12     	; 0x1f8 <LCD_go_to+0x22>
	{
		if(col < MAX_COL)
 1ec:	60 31       	cpi	r22, 0x10	; 16
 1ee:	20 f4       	brcc	.+8      	; 0x1f8 <LCD_go_to+0x22>
		{
			lcd_write_command((0xC0+col));
 1f0:	80 ec       	ldi	r24, 0xC0	; 192
 1f2:	86 0f       	add	r24, r22
 1f4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write_command>
 1f8:	08 95       	ret

000001fa <LCD_write_number>:
		}
	}
}
void LCD_write_number(uint32 n)
{
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	2a 97       	sbiw	r28, 0x0a	; 10
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
 210:	ac 01       	movw	r20, r24
	uint8 i = 0 , j , digits[10];
	if(n == 0)
 212:	89 2b       	or	r24, r25
 214:	91 f5       	brne	.+100    	; 0x27a <LCD_write_number+0x80>
		lcd_write_data('0');
 216:	80 e3       	ldi	r24, 0x30	; 48
 218:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write_data>
 21c:	42 c0       	rjmp	.+132    	; 0x2a2 <LCD_write_number+0xa8>
	else {
		while(n)
		{
			digits[i] = (uint8)(n%10 + '0');
 21e:	9a 01       	movw	r18, r20
 220:	ad ec       	ldi	r26, 0xCD	; 205
 222:	bc ec       	ldi	r27, 0xCC	; 204
 224:	0e 94 5d 06 	call	0xcba	; 0xcba <__umulhisi3>
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	96 95       	lsr	r25
 22e:	87 95       	ror	r24
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	9c 01       	movw	r18, r24
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	82 0f       	add	r24, r18
 248:	93 1f       	adc	r25, r19
 24a:	9a 01       	movw	r18, r20
 24c:	28 1b       	sub	r18, r24
 24e:	39 0b       	sbc	r19, r25
 250:	c9 01       	movw	r24, r18
 252:	80 5d       	subi	r24, 0xD0	; 208
 254:	e1 e0       	ldi	r30, 0x01	; 1
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	ec 0f       	add	r30, r28
 25a:	fd 1f       	adc	r31, r29
 25c:	e1 0f       	add	r30, r17
 25e:	f1 1d       	adc	r31, r1
 260:	80 83       	st	Z, r24
			n = n / 10;
 262:	9a 01       	movw	r18, r20
 264:	0e 94 5d 06 	call	0xcba	; 0xcba <__umulhisi3>
 268:	ac 01       	movw	r20, r24
 26a:	56 95       	lsr	r21
 26c:	47 95       	ror	r20
 26e:	56 95       	lsr	r21
 270:	47 95       	ror	r20
 272:	56 95       	lsr	r21
 274:	47 95       	ror	r20
			i++;
 276:	1f 5f       	subi	r17, 0xFF	; 255
 278:	01 c0       	rjmp	.+2      	; 0x27c <LCD_write_number+0x82>
 27a:	10 e0       	ldi	r17, 0x00	; 0
{
	uint8 i = 0 , j , digits[10];
	if(n == 0)
		lcd_write_data('0');
	else {
		while(n)
 27c:	41 15       	cp	r20, r1
 27e:	51 05       	cpc	r21, r1
 280:	71 f6       	brne	.-100    	; 0x21e <LCD_write_number+0x24>
 282:	0d c0       	rjmp	.+26     	; 0x29e <LCD_write_number+0xa4>
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
		{
			lcd_write_data(digits[j-1]);
 284:	e1 2f       	mov	r30, r17
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	8c 0f       	add	r24, r28
 290:	9d 1f       	adc	r25, r29
 292:	e8 0f       	add	r30, r24
 294:	f9 1f       	adc	r31, r25
 296:	80 81       	ld	r24, Z
 298:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_write_data>
		{
			digits[i] = (uint8)(n%10 + '0');
			n = n / 10;
			i++;
		}
		for(j = i ; j>0 ; j--)
 29c:	11 50       	subi	r17, 0x01	; 1
 29e:	11 11       	cpse	r17, r1
 2a0:	f1 cf       	rjmp	.-30     	; 0x284 <LCD_write_number+0x8a>
		{
			lcd_write_data(digits[j-1]);
		}
	}
}
 2a2:	2a 96       	adiw	r28, 0x0a	; 10
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	cd bf       	out	0x3d, r28	; 61
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	08 95       	ret

000002b6 <LCD_clear_next_chars>:
void LCD_clear_next_chars(uint8 n)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	d8 2f       	mov	r29, r24
	for(uint8 i = 0 ; i < n ; i++)
 2bc:	c0 e0       	ldi	r28, 0x00	; 0
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <LCD_clear_next_chars+0x12>
		LCD_write_char(' ');
 2c0:	80 e2       	ldi	r24, 0x20	; 32
 2c2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_write_char>
		}
	}
}
void LCD_clear_next_chars(uint8 n)
{
	for(uint8 i = 0 ; i < n ; i++)
 2c6:	cf 5f       	subi	r28, 0xFF	; 255
 2c8:	cd 17       	cp	r28, r29
 2ca:	d0 f3       	brcs	.-12     	; 0x2c0 <LCD_clear_next_chars+0xa>
		LCD_write_char(' ');
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <LM53_Temp_Sensor_Init>:
#include "LM35.h"
static ADC_channel_t lm_channel = -1;

void LM53_Temp_Sensor_Init(ADC_channel_t channel)
{
	lm_channel = channel;
 2d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d6:	08 95       	ret

000002d8 <LM35_Get_Temperature>:
}
uint16 LM35_Get_Temperature()
{
 2d8:	cf 93       	push	r28
	if(lm_channel == -1)
		return -1;
	
	uint16 data = 0;
	ADC_voltage_reference_t vr = ADC_get_current_vref();
 2da:	0e 94 9e 02 	call	0x53c	; 0x53c <ADC_get_current_vref>
 2de:	c8 2f       	mov	r28, r24
	data = ADC_read(lm_channel);
 2e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e4:	0e 94 a5 02 	call	0x54a	; 0x54a <ADC_read>
	
	if(vr == AVCC_pin_External_Cap_At_AREF_pin)
 2e8:	c1 30       	cpi	r28, 0x01	; 1
 2ea:	b1 f4       	brne	.+44     	; 0x318 <LM35_Get_Temperature+0x40>
	{
		return (data*4.88/10);
 2ec:	bc 01       	movw	r22, r24
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 62 05 	call	0xac4	; 0xac4 <__floatunsisf>
 2f6:	26 ef       	ldi	r18, 0xF6	; 246
 2f8:	38 e2       	ldi	r19, 0x28	; 40
 2fa:	4c e9       	ldi	r20, 0x9C	; 156
 2fc:	50 e4       	ldi	r21, 0x40	; 64
 2fe:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	40 e2       	ldi	r20, 0x20	; 32
 308:	51 e4       	ldi	r21, 0x41	; 65
 30a:	0e 94 c1 04 	call	0x982	; 0x982 <__divsf3>
 30e:	0e 94 33 05 	call	0xa66	; 0xa66 <__fixunssfsi>
 312:	26 2f       	mov	r18, r22
 314:	97 2f       	mov	r25, r23
 316:	19 c0       	rjmp	.+50     	; 0x34a <LM35_Get_Temperature+0x72>
	}
	else if(vr == Internal_2560mV)
 318:	c3 30       	cpi	r28, 0x03	; 3
 31a:	b1 f4       	brne	.+44     	; 0x348 <LM35_Get_Temperature+0x70>
	{
		return (data*2.56/10);
 31c:	bc 01       	movw	r22, r24
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 62 05 	call	0xac4	; 0xac4 <__floatunsisf>
 326:	2a e0       	ldi	r18, 0x0A	; 10
 328:	37 ed       	ldi	r19, 0xD7	; 215
 32a:	43 e2       	ldi	r20, 0x23	; 35
 32c:	50 e4       	ldi	r21, 0x40	; 64
 32e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__mulsf3>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 e2       	ldi	r20, 0x20	; 32
 338:	51 e4       	ldi	r21, 0x41	; 65
 33a:	0e 94 c1 04 	call	0x982	; 0x982 <__divsf3>
 33e:	0e 94 33 05 	call	0xa66	; 0xa66 <__fixunssfsi>
 342:	26 2f       	mov	r18, r22
 344:	97 2f       	mov	r25, r23
 346:	01 c0       	rjmp	.+2      	; 0x34a <LM35_Get_Temperature+0x72>
	}
 348:	01 c0       	rjmp	.+2      	; 0x34c <LM35_Get_Temperature+0x74>
 34a:	82 2f       	mov	r24, r18
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <main>:

volatile int x = 105;
int main(void)
{
	//sei();
	LCD_Init();
 350:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Init>
	
	GPIO_init_pin(GPIO_A , PIN_2 , GPIO_PIN_INPUT);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <GPIO_init_pin>
	GPIO_init_pin(GPIO_A , PIN_6 , GPIO_PIN_INPUT);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	66 e0       	ldi	r22, 0x06	; 6
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <GPIO_init_pin>
	//GPIO_enable_pull_up_res(GPIO_A , PIN_2);
	TIMER_Init(NORMAL , PRESCALER_8 );
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 88 04 	call	0x910	; 0x910 <TIMER_Init>
	LM53_Temp_Sensor_Init(Channel_6_ADC6);
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LM53_Temp_Sensor_Init>
	TIMER0_OV_interrupt_enable();
 376:	0e 94 bd 04 	call	0x97a	; 0x97a <TIMER0_OV_interrupt_enable>
	LCD_write_string("Lm35 test :");
 37a:	81 e7       	ldi	r24, 0x71	; 113
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_string>
	ADC_init(Channel_2_ADC2,ADC_prescaler_128,Internal_2560mV);
 382:	43 e0       	ldi	r20, 0x03	; 3
 384:	67 e0       	ldi	r22, 0x07	; 7
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <ADC_init>
	ADC_set_auto_triggering(Free_Running_Mode);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 66 02 	call	0x4cc	; 0x4cc <ADC_set_auto_triggering>
    while (1) 
    {
		
		LCD_go_to(2 , 0);
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_go_to>
		LCD_write_string("value : ");
 39a:	8d e7       	ldi	r24, 0x7D	; 125
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_string>
		LCD_write_number(LM35_Get_Temperature());
 3a2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LM35_Get_Temperature>
 3a6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_write_number>
		LCD_write_string("oC");
 3aa:	86 e8       	ldi	r24, 0x86	; 134
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_write_string>
		LCD_clear_next_chars(1);
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_clear_next_chars>
 3b8:	87 ea       	ldi	r24, 0xA7	; 167
 3ba:	91 e6       	ldi	r25, 0x61	; 97
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <main+0x6c>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x72>
 3c2:	00 00       	nop
 3c4:	e6 cf       	rjmp	.-52     	; 0x392 <main+0x42>

000003c6 <ADC_init>:
{
	SET_BIT(ADCSRA , ADIE);
}
void ADC_clear_interrupt()
{
	CLEAR_BIT(ADCSRA , ADIE);
 3c6:	80 31       	cpi	r24, 0x10	; 16
 3c8:	08 f0       	brcs	.+2      	; 0x3cc <ADC_init+0x6>
 3ca:	5f c0       	rjmp	.+190    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3cc:	68 30       	cpi	r22, 0x08	; 8
 3ce:	08 f0       	brcs	.+2      	; 0x3d2 <ADC_init+0xc>
 3d0:	5c c0       	rjmp	.+184    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3d2:	44 30       	cpi	r20, 0x04	; 4
 3d4:	08 f0       	brcs	.+2      	; 0x3d8 <ADC_init+0x12>
 3d6:	59 c0       	rjmp	.+178    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3d8:	42 30       	cpi	r20, 0x02	; 2
 3da:	09 f4       	brne	.+2      	; 0x3de <ADC_init+0x18>
 3dc:	56 c0       	rjmp	.+172    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3de:	96 b1       	in	r25, 0x06	; 6
 3e0:	90 68       	ori	r25, 0x80	; 128
 3e2:	96 b9       	out	0x06, r25	; 6
 3e4:	97 b1       	in	r25, 0x07	; 7
 3e6:	9e 7f       	andi	r25, 0xFE	; 254
 3e8:	58 2f       	mov	r21, r24
 3ea:	51 70       	andi	r21, 0x01	; 1
 3ec:	95 2b       	or	r25, r21
 3ee:	97 b9       	out	0x07, r25	; 7
 3f0:	97 b1       	in	r25, 0x07	; 7
 3f2:	9d 7f       	andi	r25, 0xFD	; 253
 3f4:	58 2f       	mov	r21, r24
 3f6:	52 70       	andi	r21, 0x02	; 2
 3f8:	95 2b       	or	r25, r21
 3fa:	97 b9       	out	0x07, r25	; 7
 3fc:	97 b1       	in	r25, 0x07	; 7
 3fe:	9b 7f       	andi	r25, 0xFB	; 251
 400:	58 2f       	mov	r21, r24
 402:	54 70       	andi	r21, 0x04	; 4
 404:	95 2b       	or	r25, r21
 406:	97 b9       	out	0x07, r25	; 7
 408:	97 b1       	in	r25, 0x07	; 7
 40a:	97 7f       	andi	r25, 0xF7	; 247
 40c:	58 2f       	mov	r21, r24
 40e:	58 70       	andi	r21, 0x08	; 8
 410:	95 2b       	or	r25, r21
 412:	97 b9       	out	0x07, r25	; 7
 414:	97 b1       	in	r25, 0x07	; 7
 416:	9f 7e       	andi	r25, 0xEF	; 239
 418:	80 71       	andi	r24, 0x10	; 16
 41a:	89 2b       	or	r24, r25
 41c:	87 b9       	out	0x07, r24	; 7
 41e:	87 b1       	in	r24, 0x07	; 7
 420:	8f 7d       	andi	r24, 0xDF	; 223
 422:	87 b9       	out	0x07, r24	; 7
 424:	87 b1       	in	r24, 0x07	; 7
 426:	24 2f       	mov	r18, r20
 428:	21 70       	andi	r18, 0x01	; 1
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	00 24       	eor	r0, r0
 42e:	36 95       	lsr	r19
 430:	27 95       	ror	r18
 432:	07 94       	ror	r0
 434:	36 95       	lsr	r19
 436:	27 95       	ror	r18
 438:	07 94       	ror	r0
 43a:	32 2f       	mov	r19, r18
 43c:	20 2d       	mov	r18, r0
 43e:	8f 7b       	andi	r24, 0xBF	; 191
 440:	28 2b       	or	r18, r24
 442:	27 b9       	out	0x07, r18	; 7
 444:	27 b1       	in	r18, 0x07	; 7
 446:	94 2f       	mov	r25, r20
 448:	92 70       	andi	r25, 0x02	; 2
 44a:	89 2f       	mov	r24, r25
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	95 95       	asr	r25
 450:	87 95       	ror	r24
 452:	96 95       	lsr	r25
 454:	98 2f       	mov	r25, r24
 456:	88 27       	eor	r24, r24
 458:	97 95       	ror	r25
 45a:	87 95       	ror	r24
 45c:	92 2f       	mov	r25, r18
 45e:	9f 77       	andi	r25, 0x7F	; 127
 460:	89 2b       	or	r24, r25
 462:	87 b9       	out	0x07, r24	; 7
 464:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__data_end>
 468:	86 b1       	in	r24, 0x06	; 6
 46a:	8e 7f       	andi	r24, 0xFE	; 254
 46c:	96 2f       	mov	r25, r22
 46e:	91 70       	andi	r25, 0x01	; 1
 470:	89 2b       	or	r24, r25
 472:	86 b9       	out	0x06, r24	; 6
 474:	86 b1       	in	r24, 0x06	; 6
 476:	8d 7f       	andi	r24, 0xFD	; 253
 478:	96 2f       	mov	r25, r22
 47a:	92 70       	andi	r25, 0x02	; 2
 47c:	89 2b       	or	r24, r25
 47e:	86 b9       	out	0x06, r24	; 6
 480:	86 b1       	in	r24, 0x06	; 6
 482:	8b 7f       	andi	r24, 0xFB	; 251
 484:	64 70       	andi	r22, 0x04	; 4
 486:	68 2b       	or	r22, r24
 488:	66 b9       	out	0x06, r22	; 6
 48a:	08 95       	ret

0000048c <ADC_set_channel>:
 48c:	80 31       	cpi	r24, 0x10	; 16
 48e:	e8 f4       	brcc	.+58     	; 0x4ca <ADC_set_channel+0x3e>
 490:	97 b1       	in	r25, 0x07	; 7
 492:	9e 7f       	andi	r25, 0xFE	; 254
 494:	28 2f       	mov	r18, r24
 496:	21 70       	andi	r18, 0x01	; 1
 498:	92 2b       	or	r25, r18
 49a:	97 b9       	out	0x07, r25	; 7
 49c:	97 b1       	in	r25, 0x07	; 7
 49e:	9d 7f       	andi	r25, 0xFD	; 253
 4a0:	28 2f       	mov	r18, r24
 4a2:	22 70       	andi	r18, 0x02	; 2
 4a4:	92 2b       	or	r25, r18
 4a6:	97 b9       	out	0x07, r25	; 7
 4a8:	97 b1       	in	r25, 0x07	; 7
 4aa:	9b 7f       	andi	r25, 0xFB	; 251
 4ac:	28 2f       	mov	r18, r24
 4ae:	24 70       	andi	r18, 0x04	; 4
 4b0:	92 2b       	or	r25, r18
 4b2:	97 b9       	out	0x07, r25	; 7
 4b4:	97 b1       	in	r25, 0x07	; 7
 4b6:	97 7f       	andi	r25, 0xF7	; 247
 4b8:	28 2f       	mov	r18, r24
 4ba:	28 70       	andi	r18, 0x08	; 8
 4bc:	92 2b       	or	r25, r18
 4be:	97 b9       	out	0x07, r25	; 7
 4c0:	97 b1       	in	r25, 0x07	; 7
 4c2:	9f 7e       	andi	r25, 0xEF	; 239
 4c4:	80 71       	andi	r24, 0x10	; 16
 4c6:	89 2b       	or	r24, r25
 4c8:	87 b9       	out	0x07, r24	; 7
 4ca:	08 95       	ret

000004cc <ADC_set_auto_triggering>:
 4cc:	81 11       	cpse	r24, r1
 4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <ADC_set_auto_triggering+0xc>
 4d0:	86 b1       	in	r24, 0x06	; 6
 4d2:	8f 7d       	andi	r24, 0xDF	; 223
 4d4:	86 b9       	out	0x06, r24	; 6
 4d6:	08 95       	ret
 4d8:	e0 b7       	in	r30, 0x30	; 48
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	bc 01       	movw	r22, r24
 4e0:	61 70       	andi	r22, 0x01	; 1
 4e2:	77 27       	eor	r23, r23
 4e4:	66 0f       	add	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	62 95       	swap	r22
 4ea:	72 95       	swap	r23
 4ec:	70 7f       	andi	r23, 0xF0	; 240
 4ee:	76 27       	eor	r23, r22
 4f0:	60 7f       	andi	r22, 0xF0	; 240
 4f2:	76 27       	eor	r23, r22
 4f4:	9e 2f       	mov	r25, r30
 4f6:	9f 7d       	andi	r25, 0xDF	; 223
 4f8:	69 2b       	or	r22, r25
 4fa:	60 bf       	out	0x30, r22	; 48
 4fc:	90 b7       	in	r25, 0x30	; 48
 4fe:	81 fb       	bst	r24, 1
 500:	44 27       	eor	r20, r20
 502:	40 f9       	bld	r20, 0
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	00 24       	eor	r0, r0
 508:	56 95       	lsr	r21
 50a:	47 95       	ror	r20
 50c:	07 94       	ror	r0
 50e:	56 95       	lsr	r21
 510:	47 95       	ror	r20
 512:	07 94       	ror	r0
 514:	54 2f       	mov	r21, r20
 516:	40 2d       	mov	r20, r0
 518:	9f 7b       	andi	r25, 0xBF	; 191
 51a:	49 2b       	or	r20, r25
 51c:	40 bf       	out	0x30, r20	; 48
 51e:	90 b7       	in	r25, 0x30	; 48
 520:	82 fb       	bst	r24, 2
 522:	22 27       	eor	r18, r18
 524:	20 f9       	bld	r18, 0
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	36 95       	lsr	r19
 52a:	32 2f       	mov	r19, r18
 52c:	22 27       	eor	r18, r18
 52e:	37 95       	ror	r19
 530:	27 95       	ror	r18
 532:	89 2f       	mov	r24, r25
 534:	8f 77       	andi	r24, 0x7F	; 127
 536:	28 2b       	or	r18, r24
 538:	20 bf       	out	0x30, r18	; 48
 53a:	08 95       	ret

0000053c <ADC_get_current_vref>:
 53c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
 540:	08 95       	ret

00000542 <ADC_start_conversion>:
 542:	86 b1       	in	r24, 0x06	; 6
 544:	80 64       	ori	r24, 0x40	; 64
 546:	86 b9       	out	0x06, r24	; 6
 548:	08 95       	ret

0000054a <ADC_read>:
}
uint16 ADC_read(ADC_channel_t channel)
{
	ADC_set_channel(channel);
 54a:	0e 94 46 02 	call	0x48c	; 0x48c <ADC_set_channel>
	
	ADC_start_conversion();
 54e:	0e 94 a1 02 	call	0x542	; 0x542 <ADC_start_conversion>
	while(GET_BIT(ADCSRA , ADIF) == 0);
 552:	34 9b       	sbis	0x06, 4	; 6
 554:	fe cf       	rjmp	.-4      	; 0x552 <ADC_read+0x8>
	
	return  (ADCL + ADCH*256);
 556:	24 b1       	in	r18, 0x04	; 4
 558:	85 b1       	in	r24, 0x05	; 5
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	98 2f       	mov	r25, r24
 55e:	88 27       	eor	r24, r24
}
 560:	82 0f       	add	r24, r18
 562:	91 1d       	adc	r25, r1
 564:	08 95       	ret

00000566 <__vector_16>:

ISR(ADC_vect)
{
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	0f 92       	push	r0
 56e:	11 24       	eor	r1, r1
 570:	2f 93       	push	r18
 572:	3f 93       	push	r19
 574:	4f 93       	push	r20
 576:	5f 93       	push	r21
 578:	6f 93       	push	r22
 57a:	7f 93       	push	r23
 57c:	8f 93       	push	r24
 57e:	9f 93       	push	r25
 580:	af 93       	push	r26
 582:	bf 93       	push	r27
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31
	if(adc_isr != NULLPTR)
 588:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <adc_isr>
 58c:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <adc_isr+0x1>
 590:	30 97       	sbiw	r30, 0x00	; 0
 592:	09 f0       	breq	.+2      	; 0x596 <__vector_16+0x30>
	{
		adc_isr();
 594:	09 95       	icall
	}
 596:	ff 91       	pop	r31
 598:	ef 91       	pop	r30
 59a:	bf 91       	pop	r27
 59c:	af 91       	pop	r26
 59e:	9f 91       	pop	r25
 5a0:	8f 91       	pop	r24
 5a2:	7f 91       	pop	r23
 5a4:	6f 91       	pop	r22
 5a6:	5f 91       	pop	r21
 5a8:	4f 91       	pop	r20
 5aa:	3f 91       	pop	r19
 5ac:	2f 91       	pop	r18
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <GPIO_init_pin>:
		{
			return;
		}
		else
		{
			PORT_CLEAR_MASK((*(direction_regisers[reg])),mask);
 5b8:	84 30       	cpi	r24, 0x04	; 4
 5ba:	10 f5       	brcc	.+68     	; 0x600 <GPIO_init_pin+0x48>
 5bc:	68 30       	cpi	r22, 0x08	; 8
 5be:	10 f5       	brcc	.+68     	; 0x604 <GPIO_init_pin+0x4c>
 5c0:	42 30       	cpi	r20, 0x02	; 2
 5c2:	10 f5       	brcc	.+68     	; 0x608 <GPIO_init_pin+0x50>
 5c4:	e8 2f       	mov	r30, r24
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	ee 0f       	add	r30, r30
 5ca:	ff 1f       	adc	r31, r31
 5cc:	e7 59       	subi	r30, 0x97	; 151
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	01 90       	ld	r0, Z+
 5d2:	f0 81       	ld	r31, Z
 5d4:	e0 2d       	mov	r30, r0
 5d6:	20 81       	ld	r18, Z
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	06 2e       	mov	r0, r22
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <GPIO_init_pin+0x2c>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <GPIO_init_pin+0x28>
 5e8:	50 e0       	ldi	r21, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <GPIO_init_pin+0x38>
 5ec:	44 0f       	add	r20, r20
 5ee:	55 1f       	adc	r21, r21
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <GPIO_init_pin+0x34>
 5f4:	80 95       	com	r24
 5f6:	82 23       	and	r24, r18
 5f8:	48 2b       	or	r20, r24
 5fa:	40 83       	st	Z, r20
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	08 95       	ret
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	08 95       	ret
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	08 95       	ret
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	08 95       	ret

0000060c <GPIO_init_port>:
 60c:	84 30       	cpi	r24, 0x04	; 4
 60e:	50 f4       	brcc	.+20     	; 0x624 <GPIO_init_port+0x18>
 610:	e8 2f       	mov	r30, r24
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	e7 59       	subi	r30, 0x97	; 151
 61a:	ff 4f       	sbci	r31, 0xFF	; 255
 61c:	01 90       	ld	r0, Z+
 61e:	f0 81       	ld	r31, Z
 620:	e0 2d       	mov	r30, r0
 622:	60 83       	st	Z, r22
 624:	08 95       	ret

00000626 <GPIO_write_pin>:
//write functions

GPIO_state_t GPIO_write_pin(GPIO_port_name_t reg , uint8 pin , uint8 data)
{
		GPIO_state_t state = SUCCESS;
		if( NOT_VALID_PORT(reg) || NOT_VALID_PIN(pin) )
 626:	84 30       	cpi	r24, 0x04	; 4
 628:	00 f5       	brcc	.+64     	; 0x66a <GPIO_write_pin+0x44>
 62a:	68 30       	cpi	r22, 0x08	; 8
 62c:	00 f5       	brcc	.+64     	; 0x66e <GPIO_write_pin+0x48>
		{
			state = FAIL;
		}
		else
		{
			WRITE_BIT( (*(output_registers[reg])) , pin , data);
 62e:	e8 2f       	mov	r30, r24
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	ef 59       	subi	r30, 0x9F	; 159
 638:	ff 4f       	sbci	r31, 0xFF	; 255
 63a:	01 90       	ld	r0, Z+
 63c:	f0 81       	ld	r31, Z
 63e:	e0 2d       	mov	r30, r0
 640:	20 81       	ld	r18, Z
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	06 2e       	mov	r0, r22
 648:	02 c0       	rjmp	.+4      	; 0x64e <GPIO_write_pin+0x28>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	0a 94       	dec	r0
 650:	e2 f7       	brpl	.-8      	; 0x64a <GPIO_write_pin+0x24>
 652:	50 e0       	ldi	r21, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <GPIO_write_pin+0x34>
 656:	44 0f       	add	r20, r20
 658:	55 1f       	adc	r21, r21
 65a:	6a 95       	dec	r22
 65c:	e2 f7       	brpl	.-8      	; 0x656 <GPIO_write_pin+0x30>
 65e:	80 95       	com	r24
 660:	82 23       	and	r24, r18
 662:	48 2b       	or	r20, r24
 664:	40 83       	st	Z, r20

//write functions

GPIO_state_t GPIO_write_pin(GPIO_port_name_t reg , uint8 pin , uint8 data)
{
		GPIO_state_t state = SUCCESS;
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	08 95       	ret
		if( NOT_VALID_PORT(reg) || NOT_VALID_PIN(pin) )
		{
			state = FAIL;
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	08 95       	ret
 66e:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			WRITE_BIT( (*(output_registers[reg])) , pin , data);
		}
		return state;
}
 670:	08 95       	ret

00000672 <GPIO_write_port>:
void GPIO_write_port(GPIO_port_name_t reg , uint8 data)
{
	if(NOT_VALID_PORT(reg))
 672:	84 30       	cpi	r24, 0x04	; 4
 674:	50 f4       	brcc	.+20     	; 0x68a <GPIO_write_port+0x18>
	{
		return ;
	}
	WRITE_PORT((*(output_registers[reg])) , data);
 676:	e8 2f       	mov	r30, r24
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	ee 0f       	add	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	ef 59       	subi	r30, 0x9F	; 159
 680:	ff 4f       	sbci	r31, 0xFF	; 255
 682:	01 90       	ld	r0, Z+
 684:	f0 81       	ld	r31, Z
 686:	e0 2d       	mov	r30, r0
 688:	60 83       	st	Z, r22
 68a:	08 95       	ret

0000068c <__vector_1>:
	return EXT_SUCCESS;
}


ISR(INT0_vect)
{
 68c:	1f 92       	push	r1
 68e:	0f 92       	push	r0
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	0f 92       	push	r0
 694:	11 24       	eor	r1, r1
 696:	2f 93       	push	r18
 698:	3f 93       	push	r19
 69a:	4f 93       	push	r20
 69c:	5f 93       	push	r21
 69e:	6f 93       	push	r22
 6a0:	7f 93       	push	r23
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25
 6a6:	af 93       	push	r26
 6a8:	bf 93       	push	r27
 6aa:	ef 93       	push	r30
 6ac:	ff 93       	push	r31
	EXT_int0_isr();
 6ae:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <EXT_int0_isr>
 6b2:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <EXT_int0_isr+0x1>
 6b6:	09 95       	icall
}
 6b8:	ff 91       	pop	r31
 6ba:	ef 91       	pop	r30
 6bc:	bf 91       	pop	r27
 6be:	af 91       	pop	r26
 6c0:	9f 91       	pop	r25
 6c2:	8f 91       	pop	r24
 6c4:	7f 91       	pop	r23
 6c6:	6f 91       	pop	r22
 6c8:	5f 91       	pop	r21
 6ca:	4f 91       	pop	r20
 6cc:	3f 91       	pop	r19
 6ce:	2f 91       	pop	r18
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <__vector_2>:
ISR(INT1_vect)
{
 6da:	1f 92       	push	r1
 6dc:	0f 92       	push	r0
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	0f 92       	push	r0
 6e2:	11 24       	eor	r1, r1
 6e4:	2f 93       	push	r18
 6e6:	3f 93       	push	r19
 6e8:	4f 93       	push	r20
 6ea:	5f 93       	push	r21
 6ec:	6f 93       	push	r22
 6ee:	7f 93       	push	r23
 6f0:	8f 93       	push	r24
 6f2:	9f 93       	push	r25
 6f4:	af 93       	push	r26
 6f6:	bf 93       	push	r27
 6f8:	ef 93       	push	r30
 6fa:	ff 93       	push	r31
	EXT_int1_isr();
 6fc:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <EXT_int1_isr>
 700:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <EXT_int1_isr+0x1>
 704:	09 95       	icall
}
 706:	ff 91       	pop	r31
 708:	ef 91       	pop	r30
 70a:	bf 91       	pop	r27
 70c:	af 91       	pop	r26
 70e:	9f 91       	pop	r25
 710:	8f 91       	pop	r24
 712:	7f 91       	pop	r23
 714:	6f 91       	pop	r22
 716:	5f 91       	pop	r21
 718:	4f 91       	pop	r20
 71a:	3f 91       	pop	r19
 71c:	2f 91       	pop	r18
 71e:	0f 90       	pop	r0
 720:	0f be       	out	0x3f, r0	; 63
 722:	0f 90       	pop	r0
 724:	1f 90       	pop	r1
 726:	18 95       	reti

00000728 <__vector_3>:
ISR(INT2_vect)
{
 728:	1f 92       	push	r1
 72a:	0f 92       	push	r0
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	0f 92       	push	r0
 730:	11 24       	eor	r1, r1
 732:	2f 93       	push	r18
 734:	3f 93       	push	r19
 736:	4f 93       	push	r20
 738:	5f 93       	push	r21
 73a:	6f 93       	push	r22
 73c:	7f 93       	push	r23
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
 742:	af 93       	push	r26
 744:	bf 93       	push	r27
 746:	ef 93       	push	r30
 748:	ff 93       	push	r31
	EXT_int2_isr();
 74a:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <EXT_int2_isr>
 74e:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <EXT_int2_isr+0x1>
 752:	09 95       	icall
 754:	ff 91       	pop	r31
 756:	ef 91       	pop	r30
 758:	bf 91       	pop	r27
 75a:	af 91       	pop	r26
 75c:	9f 91       	pop	r25
 75e:	8f 91       	pop	r24
 760:	7f 91       	pop	r23
 762:	6f 91       	pop	r22
 764:	5f 91       	pop	r21
 766:	4f 91       	pop	r20
 768:	3f 91       	pop	r19
 76a:	2f 91       	pop	r18
 76c:	0f 90       	pop	r0
 76e:	0f be       	out	0x3f, r0	; 63
 770:	0f 90       	pop	r0
 772:	1f 90       	pop	r1
 774:	18 95       	reti

00000776 <__vector_10>:
	{	
		timer0_overflow_isr();
	}
}*/
ISR(TIMER0_COMP)
{
 776:	1f 92       	push	r1
 778:	0f 92       	push	r0
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	0f 92       	push	r0
 77e:	11 24       	eor	r1, r1
 780:	2f 93       	push	r18
 782:	3f 93       	push	r19
 784:	4f 93       	push	r20
 786:	5f 93       	push	r21
 788:	6f 93       	push	r22
 78a:	7f 93       	push	r23
 78c:	8f 93       	push	r24
 78e:	9f 93       	push	r25
 790:	af 93       	push	r26
 792:	bf 93       	push	r27
 794:	ef 93       	push	r30
 796:	ff 93       	push	r31
	if(timer0_compare_isr != NULLPTR)
 798:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <timer0_compare_isr>
 79c:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <timer0_compare_isr+0x1>
 7a0:	30 97       	sbiw	r30, 0x00	; 0
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <__vector_10+0x30>
	{
		timer0_compare_isr();
 7a4:	09 95       	icall
	}
}
 7a6:	ff 91       	pop	r31
 7a8:	ef 91       	pop	r30
 7aa:	bf 91       	pop	r27
 7ac:	af 91       	pop	r26
 7ae:	9f 91       	pop	r25
 7b0:	8f 91       	pop	r24
 7b2:	7f 91       	pop	r23
 7b4:	6f 91       	pop	r22
 7b6:	5f 91       	pop	r21
 7b8:	4f 91       	pop	r20
 7ba:	3f 91       	pop	r19
 7bc:	2f 91       	pop	r18
 7be:	0f 90       	pop	r0
 7c0:	0f be       	out	0x3f, r0	; 63
 7c2:	0f 90       	pop	r0
 7c4:	1f 90       	pop	r1
 7c6:	18 95       	reti

000007c8 <__vector_9>:


ISR(TIMER1_OVF)
{
 7c8:	1f 92       	push	r1
 7ca:	0f 92       	push	r0
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	0f 92       	push	r0
 7d0:	11 24       	eor	r1, r1
 7d2:	2f 93       	push	r18
 7d4:	3f 93       	push	r19
 7d6:	4f 93       	push	r20
 7d8:	5f 93       	push	r21
 7da:	6f 93       	push	r22
 7dc:	7f 93       	push	r23
 7de:	8f 93       	push	r24
 7e0:	9f 93       	push	r25
 7e2:	af 93       	push	r26
 7e4:	bf 93       	push	r27
 7e6:	ef 93       	push	r30
 7e8:	ff 93       	push	r31
	if(timer1_overflow_isr != NULLPTR)
 7ea:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <timer1_overflow_isr>
 7ee:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <timer1_overflow_isr+0x1>
 7f2:	30 97       	sbiw	r30, 0x00	; 0
 7f4:	09 f0       	breq	.+2      	; 0x7f8 <__vector_9+0x30>
	{
		timer1_overflow_isr();
 7f6:	09 95       	icall
	}
}
 7f8:	ff 91       	pop	r31
 7fa:	ef 91       	pop	r30
 7fc:	bf 91       	pop	r27
 7fe:	af 91       	pop	r26
 800:	9f 91       	pop	r25
 802:	8f 91       	pop	r24
 804:	7f 91       	pop	r23
 806:	6f 91       	pop	r22
 808:	5f 91       	pop	r21
 80a:	4f 91       	pop	r20
 80c:	3f 91       	pop	r19
 80e:	2f 91       	pop	r18
 810:	0f 90       	pop	r0
 812:	0f be       	out	0x3f, r0	; 63
 814:	0f 90       	pop	r0
 816:	1f 90       	pop	r1
 818:	18 95       	reti

0000081a <__vector_7>:

ISR(TIMER1_COMPA)
{
 81a:	1f 92       	push	r1
 81c:	0f 92       	push	r0
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	0f 92       	push	r0
 822:	11 24       	eor	r1, r1
 824:	2f 93       	push	r18
 826:	3f 93       	push	r19
 828:	4f 93       	push	r20
 82a:	5f 93       	push	r21
 82c:	6f 93       	push	r22
 82e:	7f 93       	push	r23
 830:	8f 93       	push	r24
 832:	9f 93       	push	r25
 834:	af 93       	push	r26
 836:	bf 93       	push	r27
 838:	ef 93       	push	r30
 83a:	ff 93       	push	r31
	if(timer1_compare_a_isr != NULLPTR)
 83c:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <timer1_compare_a_isr>
 840:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <timer1_compare_a_isr+0x1>
 844:	30 97       	sbiw	r30, 0x00	; 0
 846:	09 f0       	breq	.+2      	; 0x84a <__vector_7+0x30>
	{
		timer1_compare_a_isr();
 848:	09 95       	icall
	}
}
 84a:	ff 91       	pop	r31
 84c:	ef 91       	pop	r30
 84e:	bf 91       	pop	r27
 850:	af 91       	pop	r26
 852:	9f 91       	pop	r25
 854:	8f 91       	pop	r24
 856:	7f 91       	pop	r23
 858:	6f 91       	pop	r22
 85a:	5f 91       	pop	r21
 85c:	4f 91       	pop	r20
 85e:	3f 91       	pop	r19
 860:	2f 91       	pop	r18
 862:	0f 90       	pop	r0
 864:	0f be       	out	0x3f, r0	; 63
 866:	0f 90       	pop	r0
 868:	1f 90       	pop	r1
 86a:	18 95       	reti

0000086c <__vector_8>:

ISR(TIMER1_COMPB)
{
 86c:	1f 92       	push	r1
 86e:	0f 92       	push	r0
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	0f 92       	push	r0
 874:	11 24       	eor	r1, r1
 876:	2f 93       	push	r18
 878:	3f 93       	push	r19
 87a:	4f 93       	push	r20
 87c:	5f 93       	push	r21
 87e:	6f 93       	push	r22
 880:	7f 93       	push	r23
 882:	8f 93       	push	r24
 884:	9f 93       	push	r25
 886:	af 93       	push	r26
 888:	bf 93       	push	r27
 88a:	ef 93       	push	r30
 88c:	ff 93       	push	r31
	if(timer1_compare_b_isr != NULLPTR)
 88e:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <timer1_compare_b_isr>
 892:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <timer1_compare_b_isr+0x1>
 896:	30 97       	sbiw	r30, 0x00	; 0
 898:	09 f0       	breq	.+2      	; 0x89c <__vector_8+0x30>
	{
		timer1_compare_b_isr();
 89a:	09 95       	icall
	}
}
 89c:	ff 91       	pop	r31
 89e:	ef 91       	pop	r30
 8a0:	bf 91       	pop	r27
 8a2:	af 91       	pop	r26
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	7f 91       	pop	r23
 8aa:	6f 91       	pop	r22
 8ac:	5f 91       	pop	r21
 8ae:	4f 91       	pop	r20
 8b0:	3f 91       	pop	r19
 8b2:	2f 91       	pop	r18
 8b4:	0f 90       	pop	r0
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	0f 90       	pop	r0
 8ba:	1f 90       	pop	r1
 8bc:	18 95       	reti

000008be <__vector_6>:

ISR(TIMER1_CAPT)
{
 8be:	1f 92       	push	r1
 8c0:	0f 92       	push	r0
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	0f 92       	push	r0
 8c6:	11 24       	eor	r1, r1
 8c8:	2f 93       	push	r18
 8ca:	3f 93       	push	r19
 8cc:	4f 93       	push	r20
 8ce:	5f 93       	push	r21
 8d0:	6f 93       	push	r22
 8d2:	7f 93       	push	r23
 8d4:	8f 93       	push	r24
 8d6:	9f 93       	push	r25
 8d8:	af 93       	push	r26
 8da:	bf 93       	push	r27
 8dc:	ef 93       	push	r30
 8de:	ff 93       	push	r31
	if(timer1_input_capture_isr != NULLPTR)
 8e0:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <timer1_input_capture_isr>
 8e4:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <timer1_input_capture_isr+0x1>
 8e8:	30 97       	sbiw	r30, 0x00	; 0
 8ea:	09 f0       	breq	.+2      	; 0x8ee <__vector_6+0x30>
	{
		timer1_input_capture_isr();
 8ec:	09 95       	icall
	}
}
 8ee:	ff 91       	pop	r31
 8f0:	ef 91       	pop	r30
 8f2:	bf 91       	pop	r27
 8f4:	af 91       	pop	r26
 8f6:	9f 91       	pop	r25
 8f8:	8f 91       	pop	r24
 8fa:	7f 91       	pop	r23
 8fc:	6f 91       	pop	r22
 8fe:	5f 91       	pop	r21
 900:	4f 91       	pop	r20
 902:	3f 91       	pop	r19
 904:	2f 91       	pop	r18
 906:	0f 90       	pop	r0
 908:	0f be       	out	0x3f, r0	; 63
 90a:	0f 90       	pop	r0
 90c:	1f 90       	pop	r1
 90e:	18 95       	reti

00000910 <TIMER_Init>:

#include "TIMER0.h"

void TIMER_Init(TIMER_Mode_t mode , TIMER_Precaler_t pre)
{
	switch(mode)
 910:	81 30       	cpi	r24, 0x01	; 1
 912:	69 f0       	breq	.+26     	; 0x92e <TIMER_Init+0x1e>
 914:	28 f0       	brcs	.+10     	; 0x920 <TIMER_Init+0x10>
 916:	82 30       	cpi	r24, 0x02	; 2
 918:	89 f0       	breq	.+34     	; 0x93c <TIMER_Init+0x2c>
 91a:	83 30       	cpi	r24, 0x03	; 3
 91c:	b1 f0       	breq	.+44     	; 0x94a <TIMER_Init+0x3a>
 91e:	1b c0       	rjmp	.+54     	; 0x956 <TIMER_Init+0x46>
	{
		case NORMAL:
			CLEAR_BIT(TCCR0 , WGM00);
 920:	83 b7       	in	r24, 0x33	; 51
 922:	8f 7b       	andi	r24, 0xBF	; 191
 924:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0 , WGM01);
 926:	83 b7       	in	r24, 0x33	; 51
 928:	87 7f       	andi	r24, 0xF7	; 247
 92a:	83 bf       	out	0x33, r24	; 51
		break;
 92c:	14 c0       	rjmp	.+40     	; 0x956 <TIMER_Init+0x46>
		
		case PHASE_CORRECTION_PWM:
			SET_BIT(TCCR0 , WGM00);
 92e:	83 b7       	in	r24, 0x33	; 51
 930:	80 64       	ori	r24, 0x40	; 64
 932:	83 bf       	out	0x33, r24	; 51
			CLEAR_BIT(TCCR0 , WGM01);
 934:	83 b7       	in	r24, 0x33	; 51
 936:	87 7f       	andi	r24, 0xF7	; 247
 938:	83 bf       	out	0x33, r24	; 51
		break;
 93a:	0d c0       	rjmp	.+26     	; 0x956 <TIMER_Init+0x46>
		
		case CTC:
			CLEAR_BIT(TCCR0 , WGM00);
 93c:	83 b7       	in	r24, 0x33	; 51
 93e:	8f 7b       	andi	r24, 0xBF	; 191
 940:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0 , WGM01);
 942:	83 b7       	in	r24, 0x33	; 51
 944:	88 60       	ori	r24, 0x08	; 8
 946:	83 bf       	out	0x33, r24	; 51
		break;
 948:	06 c0       	rjmp	.+12     	; 0x956 <TIMER_Init+0x46>
		
		case FAST_PWM:
			SET_BIT(TCCR0 , WGM00);
 94a:	83 b7       	in	r24, 0x33	; 51
 94c:	80 64       	ori	r24, 0x40	; 64
 94e:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0 , WGM01);
 950:	83 b7       	in	r24, 0x33	; 51
 952:	88 60       	ori	r24, 0x08	; 8
 954:	83 bf       	out	0x33, r24	; 51
		break;
	}
	
	WRITE_BIT(TCCR0 , CS00 , GET_BIT((uint8)pre , 0));
 956:	83 b7       	in	r24, 0x33	; 51
 958:	8e 7f       	andi	r24, 0xFE	; 254
 95a:	96 2f       	mov	r25, r22
 95c:	91 70       	andi	r25, 0x01	; 1
 95e:	89 2b       	or	r24, r25
 960:	83 bf       	out	0x33, r24	; 51
	WRITE_BIT(TCCR0 , CS01 , GET_BIT((uint8)pre , 1));
 962:	83 b7       	in	r24, 0x33	; 51
 964:	8d 7f       	andi	r24, 0xFD	; 253
 966:	96 2f       	mov	r25, r22
 968:	92 70       	andi	r25, 0x02	; 2
 96a:	89 2b       	or	r24, r25
 96c:	83 bf       	out	0x33, r24	; 51
	WRITE_BIT(TCCR0 , CS02 , GET_BIT((uint8)pre , 2));
 96e:	83 b7       	in	r24, 0x33	; 51
 970:	8b 7f       	andi	r24, 0xFB	; 251
 972:	64 70       	andi	r22, 0x04	; 4
 974:	68 2b       	or	r22, r24
 976:	63 bf       	out	0x33, r22	; 51
 978:	08 95       	ret

0000097a <TIMER0_OV_interrupt_enable>:
}
void TIMER0_OV_interrupt_enable()
{
	SET_BIT(TIMSK , TOIE0);
 97a:	89 b7       	in	r24, 0x39	; 57
 97c:	81 60       	ori	r24, 0x01	; 1
 97e:	89 bf       	out	0x39, r24	; 57
 980:	08 95       	ret

00000982 <__divsf3>:
 982:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__divsf3x>
 986:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_round>
 98a:	0e 94 af 05 	call	0xb5e	; 0xb5e <__fp_pscB>
 98e:	58 f0       	brcs	.+22     	; 0x9a6 <__divsf3+0x24>
 990:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fp_pscA>
 994:	40 f0       	brcs	.+16     	; 0x9a6 <__divsf3+0x24>
 996:	29 f4       	brne	.+10     	; 0x9a2 <__divsf3+0x20>
 998:	5f 3f       	cpi	r21, 0xFF	; 255
 99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x24>
 99c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>
 9a0:	51 11       	cpse	r21, r1
 9a2:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_szero>
 9a6:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_nan>

000009aa <__divsf3x>:
 9aa:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fp_split3>
 9ae:	68 f3       	brcs	.-38     	; 0x98a <__divsf3+0x8>

000009b0 <__divsf3_pse>:
 9b0:	99 23       	and	r25, r25
 9b2:	b1 f3       	breq	.-20     	; 0x9a0 <__divsf3+0x1e>
 9b4:	55 23       	and	r21, r21
 9b6:	91 f3       	breq	.-28     	; 0x99c <__divsf3+0x1a>
 9b8:	95 1b       	sub	r25, r21
 9ba:	55 0b       	sbc	r21, r21
 9bc:	bb 27       	eor	r27, r27
 9be:	aa 27       	eor	r26, r26
 9c0:	62 17       	cp	r22, r18
 9c2:	73 07       	cpc	r23, r19
 9c4:	84 07       	cpc	r24, r20
 9c6:	38 f0       	brcs	.+14     	; 0x9d6 <__divsf3_pse+0x26>
 9c8:	9f 5f       	subi	r25, 0xFF	; 255
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	22 0f       	add	r18, r18
 9ce:	33 1f       	adc	r19, r19
 9d0:	44 1f       	adc	r20, r20
 9d2:	aa 1f       	adc	r26, r26
 9d4:	a9 f3       	breq	.-22     	; 0x9c0 <__divsf3_pse+0x10>
 9d6:	35 d0       	rcall	.+106    	; 0xa42 <__divsf3_pse+0x92>
 9d8:	0e 2e       	mov	r0, r30
 9da:	3a f0       	brmi	.+14     	; 0x9ea <__divsf3_pse+0x3a>
 9dc:	e0 e8       	ldi	r30, 0x80	; 128
 9de:	32 d0       	rcall	.+100    	; 0xa44 <__divsf3_pse+0x94>
 9e0:	91 50       	subi	r25, 0x01	; 1
 9e2:	50 40       	sbci	r21, 0x00	; 0
 9e4:	e6 95       	lsr	r30
 9e6:	00 1c       	adc	r0, r0
 9e8:	ca f7       	brpl	.-14     	; 0x9dc <__divsf3_pse+0x2c>
 9ea:	2b d0       	rcall	.+86     	; 0xa42 <__divsf3_pse+0x92>
 9ec:	fe 2f       	mov	r31, r30
 9ee:	29 d0       	rcall	.+82     	; 0xa42 <__divsf3_pse+0x92>
 9f0:	66 0f       	add	r22, r22
 9f2:	77 1f       	adc	r23, r23
 9f4:	88 1f       	adc	r24, r24
 9f6:	bb 1f       	adc	r27, r27
 9f8:	26 17       	cp	r18, r22
 9fa:	37 07       	cpc	r19, r23
 9fc:	48 07       	cpc	r20, r24
 9fe:	ab 07       	cpc	r26, r27
 a00:	b0 e8       	ldi	r27, 0x80	; 128
 a02:	09 f0       	breq	.+2      	; 0xa06 <__divsf3_pse+0x56>
 a04:	bb 0b       	sbc	r27, r27
 a06:	80 2d       	mov	r24, r0
 a08:	bf 01       	movw	r22, r30
 a0a:	ff 27       	eor	r31, r31
 a0c:	93 58       	subi	r25, 0x83	; 131
 a0e:	5f 4f       	sbci	r21, 0xFF	; 255
 a10:	3a f0       	brmi	.+14     	; 0xa20 <__divsf3_pse+0x70>
 a12:	9e 3f       	cpi	r25, 0xFE	; 254
 a14:	51 05       	cpc	r21, r1
 a16:	78 f0       	brcs	.+30     	; 0xa36 <__divsf3_pse+0x86>
 a18:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>
 a1c:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_szero>
 a20:	5f 3f       	cpi	r21, 0xFF	; 255
 a22:	e4 f3       	brlt	.-8      	; 0xa1c <__divsf3_pse+0x6c>
 a24:	98 3e       	cpi	r25, 0xE8	; 232
 a26:	d4 f3       	brlt	.-12     	; 0xa1c <__divsf3_pse+0x6c>
 a28:	86 95       	lsr	r24
 a2a:	77 95       	ror	r23
 a2c:	67 95       	ror	r22
 a2e:	b7 95       	ror	r27
 a30:	f7 95       	ror	r31
 a32:	9f 5f       	subi	r25, 0xFF	; 255
 a34:	c9 f7       	brne	.-14     	; 0xa28 <__divsf3_pse+0x78>
 a36:	88 0f       	add	r24, r24
 a38:	91 1d       	adc	r25, r1
 a3a:	96 95       	lsr	r25
 a3c:	87 95       	ror	r24
 a3e:	97 f9       	bld	r25, 7
 a40:	08 95       	ret
 a42:	e1 e0       	ldi	r30, 0x01	; 1
 a44:	66 0f       	add	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	88 1f       	adc	r24, r24
 a4a:	bb 1f       	adc	r27, r27
 a4c:	62 17       	cp	r22, r18
 a4e:	73 07       	cpc	r23, r19
 a50:	84 07       	cpc	r24, r20
 a52:	ba 07       	cpc	r27, r26
 a54:	20 f0       	brcs	.+8      	; 0xa5e <__divsf3_pse+0xae>
 a56:	62 1b       	sub	r22, r18
 a58:	73 0b       	sbc	r23, r19
 a5a:	84 0b       	sbc	r24, r20
 a5c:	ba 0b       	sbc	r27, r26
 a5e:	ee 1f       	adc	r30, r30
 a60:	88 f7       	brcc	.-30     	; 0xa44 <__divsf3_pse+0x94>
 a62:	e0 95       	com	r30
 a64:	08 95       	ret

00000a66 <__fixunssfsi>:
 a66:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_splitA>
 a6a:	88 f0       	brcs	.+34     	; 0xa8e <__fixunssfsi+0x28>
 a6c:	9f 57       	subi	r25, 0x7F	; 127
 a6e:	98 f0       	brcs	.+38     	; 0xa96 <__fixunssfsi+0x30>
 a70:	b9 2f       	mov	r27, r25
 a72:	99 27       	eor	r25, r25
 a74:	b7 51       	subi	r27, 0x17	; 23
 a76:	b0 f0       	brcs	.+44     	; 0xaa4 <__fixunssfsi+0x3e>
 a78:	e1 f0       	breq	.+56     	; 0xab2 <__fixunssfsi+0x4c>
 a7a:	66 0f       	add	r22, r22
 a7c:	77 1f       	adc	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	1a f0       	brmi	.+6      	; 0xa8a <__fixunssfsi+0x24>
 a84:	ba 95       	dec	r27
 a86:	c9 f7       	brne	.-14     	; 0xa7a <__fixunssfsi+0x14>
 a88:	14 c0       	rjmp	.+40     	; 0xab2 <__fixunssfsi+0x4c>
 a8a:	b1 30       	cpi	r27, 0x01	; 1
 a8c:	91 f0       	breq	.+36     	; 0xab2 <__fixunssfsi+0x4c>
 a8e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__fp_zero>
 a92:	b1 e0       	ldi	r27, 0x01	; 1
 a94:	08 95       	ret
 a96:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__fp_zero>
 a9a:	67 2f       	mov	r22, r23
 a9c:	78 2f       	mov	r23, r24
 a9e:	88 27       	eor	r24, r24
 aa0:	b8 5f       	subi	r27, 0xF8	; 248
 aa2:	39 f0       	breq	.+14     	; 0xab2 <__fixunssfsi+0x4c>
 aa4:	b9 3f       	cpi	r27, 0xF9	; 249
 aa6:	cc f3       	brlt	.-14     	; 0xa9a <__fixunssfsi+0x34>
 aa8:	86 95       	lsr	r24
 aaa:	77 95       	ror	r23
 aac:	67 95       	ror	r22
 aae:	b3 95       	inc	r27
 ab0:	d9 f7       	brne	.-10     	; 0xaa8 <__fixunssfsi+0x42>
 ab2:	3e f4       	brtc	.+14     	; 0xac2 <__fixunssfsi+0x5c>
 ab4:	90 95       	com	r25
 ab6:	80 95       	com	r24
 ab8:	70 95       	com	r23
 aba:	61 95       	neg	r22
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	8f 4f       	sbci	r24, 0xFF	; 255
 ac0:	9f 4f       	sbci	r25, 0xFF	; 255
 ac2:	08 95       	ret

00000ac4 <__floatunsisf>:
 ac4:	e8 94       	clt
 ac6:	09 c0       	rjmp	.+18     	; 0xada <__floatsisf+0x12>

00000ac8 <__floatsisf>:
 ac8:	97 fb       	bst	r25, 7
 aca:	3e f4       	brtc	.+14     	; 0xada <__floatsisf+0x12>
 acc:	90 95       	com	r25
 ace:	80 95       	com	r24
 ad0:	70 95       	com	r23
 ad2:	61 95       	neg	r22
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	8f 4f       	sbci	r24, 0xFF	; 255
 ad8:	9f 4f       	sbci	r25, 0xFF	; 255
 ada:	99 23       	and	r25, r25
 adc:	a9 f0       	breq	.+42     	; 0xb08 <__floatsisf+0x40>
 ade:	f9 2f       	mov	r31, r25
 ae0:	96 e9       	ldi	r25, 0x96	; 150
 ae2:	bb 27       	eor	r27, r27
 ae4:	93 95       	inc	r25
 ae6:	f6 95       	lsr	r31
 ae8:	87 95       	ror	r24
 aea:	77 95       	ror	r23
 aec:	67 95       	ror	r22
 aee:	b7 95       	ror	r27
 af0:	f1 11       	cpse	r31, r1
 af2:	f8 cf       	rjmp	.-16     	; 0xae4 <__floatsisf+0x1c>
 af4:	fa f4       	brpl	.+62     	; 0xb34 <__floatsisf+0x6c>
 af6:	bb 0f       	add	r27, r27
 af8:	11 f4       	brne	.+4      	; 0xafe <__floatsisf+0x36>
 afa:	60 ff       	sbrs	r22, 0
 afc:	1b c0       	rjmp	.+54     	; 0xb34 <__floatsisf+0x6c>
 afe:	6f 5f       	subi	r22, 0xFF	; 255
 b00:	7f 4f       	sbci	r23, 0xFF	; 255
 b02:	8f 4f       	sbci	r24, 0xFF	; 255
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	16 c0       	rjmp	.+44     	; 0xb34 <__floatsisf+0x6c>
 b08:	88 23       	and	r24, r24
 b0a:	11 f0       	breq	.+4      	; 0xb10 <__floatsisf+0x48>
 b0c:	96 e9       	ldi	r25, 0x96	; 150
 b0e:	11 c0       	rjmp	.+34     	; 0xb32 <__floatsisf+0x6a>
 b10:	77 23       	and	r23, r23
 b12:	21 f0       	breq	.+8      	; 0xb1c <__floatsisf+0x54>
 b14:	9e e8       	ldi	r25, 0x8E	; 142
 b16:	87 2f       	mov	r24, r23
 b18:	76 2f       	mov	r23, r22
 b1a:	05 c0       	rjmp	.+10     	; 0xb26 <__floatsisf+0x5e>
 b1c:	66 23       	and	r22, r22
 b1e:	71 f0       	breq	.+28     	; 0xb3c <__floatsisf+0x74>
 b20:	96 e8       	ldi	r25, 0x86	; 134
 b22:	86 2f       	mov	r24, r22
 b24:	70 e0       	ldi	r23, 0x00	; 0
 b26:	60 e0       	ldi	r22, 0x00	; 0
 b28:	2a f0       	brmi	.+10     	; 0xb34 <__floatsisf+0x6c>
 b2a:	9a 95       	dec	r25
 b2c:	66 0f       	add	r22, r22
 b2e:	77 1f       	adc	r23, r23
 b30:	88 1f       	adc	r24, r24
 b32:	da f7       	brpl	.-10     	; 0xb2a <__floatsisf+0x62>
 b34:	88 0f       	add	r24, r24
 b36:	96 95       	lsr	r25
 b38:	87 95       	ror	r24
 b3a:	97 f9       	bld	r25, 7
 b3c:	08 95       	ret

00000b3e <__fp_inf>:
 b3e:	97 f9       	bld	r25, 7
 b40:	9f 67       	ori	r25, 0x7F	; 127
 b42:	80 e8       	ldi	r24, 0x80	; 128
 b44:	70 e0       	ldi	r23, 0x00	; 0
 b46:	60 e0       	ldi	r22, 0x00	; 0
 b48:	08 95       	ret

00000b4a <__fp_nan>:
 b4a:	9f ef       	ldi	r25, 0xFF	; 255
 b4c:	80 ec       	ldi	r24, 0xC0	; 192
 b4e:	08 95       	ret

00000b50 <__fp_pscA>:
 b50:	00 24       	eor	r0, r0
 b52:	0a 94       	dec	r0
 b54:	16 16       	cp	r1, r22
 b56:	17 06       	cpc	r1, r23
 b58:	18 06       	cpc	r1, r24
 b5a:	09 06       	cpc	r0, r25
 b5c:	08 95       	ret

00000b5e <__fp_pscB>:
 b5e:	00 24       	eor	r0, r0
 b60:	0a 94       	dec	r0
 b62:	12 16       	cp	r1, r18
 b64:	13 06       	cpc	r1, r19
 b66:	14 06       	cpc	r1, r20
 b68:	05 06       	cpc	r0, r21
 b6a:	08 95       	ret

00000b6c <__fp_round>:
 b6c:	09 2e       	mov	r0, r25
 b6e:	03 94       	inc	r0
 b70:	00 0c       	add	r0, r0
 b72:	11 f4       	brne	.+4      	; 0xb78 <__fp_round+0xc>
 b74:	88 23       	and	r24, r24
 b76:	52 f0       	brmi	.+20     	; 0xb8c <__fp_round+0x20>
 b78:	bb 0f       	add	r27, r27
 b7a:	40 f4       	brcc	.+16     	; 0xb8c <__fp_round+0x20>
 b7c:	bf 2b       	or	r27, r31
 b7e:	11 f4       	brne	.+4      	; 0xb84 <__fp_round+0x18>
 b80:	60 ff       	sbrs	r22, 0
 b82:	04 c0       	rjmp	.+8      	; 0xb8c <__fp_round+0x20>
 b84:	6f 5f       	subi	r22, 0xFF	; 255
 b86:	7f 4f       	sbci	r23, 0xFF	; 255
 b88:	8f 4f       	sbci	r24, 0xFF	; 255
 b8a:	9f 4f       	sbci	r25, 0xFF	; 255
 b8c:	08 95       	ret

00000b8e <__fp_split3>:
 b8e:	57 fd       	sbrc	r21, 7
 b90:	90 58       	subi	r25, 0x80	; 128
 b92:	44 0f       	add	r20, r20
 b94:	55 1f       	adc	r21, r21
 b96:	59 f0       	breq	.+22     	; 0xbae <__fp_splitA+0x10>
 b98:	5f 3f       	cpi	r21, 0xFF	; 255
 b9a:	71 f0       	breq	.+28     	; 0xbb8 <__fp_splitA+0x1a>
 b9c:	47 95       	ror	r20

00000b9e <__fp_splitA>:
 b9e:	88 0f       	add	r24, r24
 ba0:	97 fb       	bst	r25, 7
 ba2:	99 1f       	adc	r25, r25
 ba4:	61 f0       	breq	.+24     	; 0xbbe <__fp_splitA+0x20>
 ba6:	9f 3f       	cpi	r25, 0xFF	; 255
 ba8:	79 f0       	breq	.+30     	; 0xbc8 <__fp_splitA+0x2a>
 baa:	87 95       	ror	r24
 bac:	08 95       	ret
 bae:	12 16       	cp	r1, r18
 bb0:	13 06       	cpc	r1, r19
 bb2:	14 06       	cpc	r1, r20
 bb4:	55 1f       	adc	r21, r21
 bb6:	f2 cf       	rjmp	.-28     	; 0xb9c <__fp_split3+0xe>
 bb8:	46 95       	lsr	r20
 bba:	f1 df       	rcall	.-30     	; 0xb9e <__fp_splitA>
 bbc:	08 c0       	rjmp	.+16     	; 0xbce <__fp_splitA+0x30>
 bbe:	16 16       	cp	r1, r22
 bc0:	17 06       	cpc	r1, r23
 bc2:	18 06       	cpc	r1, r24
 bc4:	99 1f       	adc	r25, r25
 bc6:	f1 cf       	rjmp	.-30     	; 0xbaa <__fp_splitA+0xc>
 bc8:	86 95       	lsr	r24
 bca:	71 05       	cpc	r23, r1
 bcc:	61 05       	cpc	r22, r1
 bce:	08 94       	sec
 bd0:	08 95       	ret

00000bd2 <__fp_zero>:
 bd2:	e8 94       	clt

00000bd4 <__fp_szero>:
 bd4:	bb 27       	eor	r27, r27
 bd6:	66 27       	eor	r22, r22
 bd8:	77 27       	eor	r23, r23
 bda:	cb 01       	movw	r24, r22
 bdc:	97 f9       	bld	r25, 7
 bde:	08 95       	ret

00000be0 <__mulsf3>:
 be0:	0e 94 03 06 	call	0xc06	; 0xc06 <__mulsf3x>
 be4:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__fp_round>
 be8:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fp_pscA>
 bec:	38 f0       	brcs	.+14     	; 0xbfc <__mulsf3+0x1c>
 bee:	0e 94 af 05 	call	0xb5e	; 0xb5e <__fp_pscB>
 bf2:	20 f0       	brcs	.+8      	; 0xbfc <__mulsf3+0x1c>
 bf4:	95 23       	and	r25, r21
 bf6:	11 f0       	breq	.+4      	; 0xbfc <__mulsf3+0x1c>
 bf8:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>
 bfc:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_nan>
 c00:	11 24       	eor	r1, r1
 c02:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_szero>

00000c06 <__mulsf3x>:
 c06:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fp_split3>
 c0a:	70 f3       	brcs	.-36     	; 0xbe8 <__mulsf3+0x8>

00000c0c <__mulsf3_pse>:
 c0c:	95 9f       	mul	r25, r21
 c0e:	c1 f3       	breq	.-16     	; 0xc00 <__mulsf3+0x20>
 c10:	95 0f       	add	r25, r21
 c12:	50 e0       	ldi	r21, 0x00	; 0
 c14:	55 1f       	adc	r21, r21
 c16:	62 9f       	mul	r22, r18
 c18:	f0 01       	movw	r30, r0
 c1a:	72 9f       	mul	r23, r18
 c1c:	bb 27       	eor	r27, r27
 c1e:	f0 0d       	add	r31, r0
 c20:	b1 1d       	adc	r27, r1
 c22:	63 9f       	mul	r22, r19
 c24:	aa 27       	eor	r26, r26
 c26:	f0 0d       	add	r31, r0
 c28:	b1 1d       	adc	r27, r1
 c2a:	aa 1f       	adc	r26, r26
 c2c:	64 9f       	mul	r22, r20
 c2e:	66 27       	eor	r22, r22
 c30:	b0 0d       	add	r27, r0
 c32:	a1 1d       	adc	r26, r1
 c34:	66 1f       	adc	r22, r22
 c36:	82 9f       	mul	r24, r18
 c38:	22 27       	eor	r18, r18
 c3a:	b0 0d       	add	r27, r0
 c3c:	a1 1d       	adc	r26, r1
 c3e:	62 1f       	adc	r22, r18
 c40:	73 9f       	mul	r23, r19
 c42:	b0 0d       	add	r27, r0
 c44:	a1 1d       	adc	r26, r1
 c46:	62 1f       	adc	r22, r18
 c48:	83 9f       	mul	r24, r19
 c4a:	a0 0d       	add	r26, r0
 c4c:	61 1d       	adc	r22, r1
 c4e:	22 1f       	adc	r18, r18
 c50:	74 9f       	mul	r23, r20
 c52:	33 27       	eor	r19, r19
 c54:	a0 0d       	add	r26, r0
 c56:	61 1d       	adc	r22, r1
 c58:	23 1f       	adc	r18, r19
 c5a:	84 9f       	mul	r24, r20
 c5c:	60 0d       	add	r22, r0
 c5e:	21 1d       	adc	r18, r1
 c60:	82 2f       	mov	r24, r18
 c62:	76 2f       	mov	r23, r22
 c64:	6a 2f       	mov	r22, r26
 c66:	11 24       	eor	r1, r1
 c68:	9f 57       	subi	r25, 0x7F	; 127
 c6a:	50 40       	sbci	r21, 0x00	; 0
 c6c:	9a f0       	brmi	.+38     	; 0xc94 <__mulsf3_pse+0x88>
 c6e:	f1 f0       	breq	.+60     	; 0xcac <__mulsf3_pse+0xa0>
 c70:	88 23       	and	r24, r24
 c72:	4a f0       	brmi	.+18     	; 0xc86 <__mulsf3_pse+0x7a>
 c74:	ee 0f       	add	r30, r30
 c76:	ff 1f       	adc	r31, r31
 c78:	bb 1f       	adc	r27, r27
 c7a:	66 1f       	adc	r22, r22
 c7c:	77 1f       	adc	r23, r23
 c7e:	88 1f       	adc	r24, r24
 c80:	91 50       	subi	r25, 0x01	; 1
 c82:	50 40       	sbci	r21, 0x00	; 0
 c84:	a9 f7       	brne	.-22     	; 0xc70 <__mulsf3_pse+0x64>
 c86:	9e 3f       	cpi	r25, 0xFE	; 254
 c88:	51 05       	cpc	r21, r1
 c8a:	80 f0       	brcs	.+32     	; 0xcac <__mulsf3_pse+0xa0>
 c8c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_inf>
 c90:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_szero>
 c94:	5f 3f       	cpi	r21, 0xFF	; 255
 c96:	e4 f3       	brlt	.-8      	; 0xc90 <__mulsf3_pse+0x84>
 c98:	98 3e       	cpi	r25, 0xE8	; 232
 c9a:	d4 f3       	brlt	.-12     	; 0xc90 <__mulsf3_pse+0x84>
 c9c:	86 95       	lsr	r24
 c9e:	77 95       	ror	r23
 ca0:	67 95       	ror	r22
 ca2:	b7 95       	ror	r27
 ca4:	f7 95       	ror	r31
 ca6:	e7 95       	ror	r30
 ca8:	9f 5f       	subi	r25, 0xFF	; 255
 caa:	c1 f7       	brne	.-16     	; 0xc9c <__mulsf3_pse+0x90>
 cac:	fe 2b       	or	r31, r30
 cae:	88 0f       	add	r24, r24
 cb0:	91 1d       	adc	r25, r1
 cb2:	96 95       	lsr	r25
 cb4:	87 95       	ror	r24
 cb6:	97 f9       	bld	r25, 7
 cb8:	08 95       	ret

00000cba <__umulhisi3>:
 cba:	a2 9f       	mul	r26, r18
 cbc:	b0 01       	movw	r22, r0
 cbe:	b3 9f       	mul	r27, r19
 cc0:	c0 01       	movw	r24, r0
 cc2:	a3 9f       	mul	r26, r19
 cc4:	70 0d       	add	r23, r0
 cc6:	81 1d       	adc	r24, r1
 cc8:	11 24       	eor	r1, r1
 cca:	91 1d       	adc	r25, r1
 ccc:	b2 9f       	mul	r27, r18
 cce:	70 0d       	add	r23, r0
 cd0:	81 1d       	adc	r24, r1
 cd2:	11 24       	eor	r1, r1
 cd4:	91 1d       	adc	r25, r1
 cd6:	08 95       	ret

00000cd8 <_exit>:
 cd8:	f8 94       	cli

00000cda <__stop_program>:
 cda:	ff cf       	rjmp	.-2      	; 0xcda <__stop_program>
